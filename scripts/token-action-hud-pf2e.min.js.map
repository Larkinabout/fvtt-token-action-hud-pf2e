{"version":3,"file":"token-action-hud-pf2e.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-pf2e'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\n\n/**\n * Damage type icons\n */\nexport const DAMAGE_TYPE_ICONS = {\n    axe: 'fa-solid fa-axe fa-fw',\n    brain: 'fa-solid fa-brain fa-fw',\n    bolt: 'fa-solid fa-bolt fa-fw',\n    'bow-arrow': 'fa-solid fa-bow-arrow fa-fw',\n    droplet: 'fa-solid fa-droplet fa-fw',\n    fire: 'fa-solid fa-fire fa-fw',\n    ghost: 'fa-solid fa-ghost fa-fw',\n    hammer: 'fa-solid fa-hammer fa-fw',\n    skull: 'fa-solid fa-skull fa-fw',\n    snowflake: 'fa-solid fa-snowflake fa-fw',\n    spider: 'fa-solid fa-spider fa-fw',\n    sun: 'fa-solid fa-sun fa-fw',\n    vial: 'fa-solid fa-vial fa-fw',\n    'waveform-lines': 'fa-solid fa-waveform-lines fa-fw'\n}\n\n/**\n * Action icons\n */\nexport const ACTION_ICON = {\n    1: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\n    2: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\n    3: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\n    free: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\n    reaction: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\n    passive: '',\n    A: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\n    D: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\n    T: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\n    F: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\n    R: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\n    ...DAMAGE_TYPE_ICONS\n}\n\n/**\n * Action type\n */\nexport const ACTION_TYPE = {\n    action: 'TYPES.Item.action',\n    attribute: 'tokenActionHud.pf2e.attribute',\n    condition: 'TYPES.Item.condition',\n    effect: 'TYPES.Item.effect',\n    familiarAttack: 'PF2E.AttackLabel',\n    feat: 'PF2E.Item.Feat.LevelLabel',\n    heroAction: 'tokenActionHud.pf2e.heroAction',\n    initiative: 'PF2E.InitiativeLabel',\n    item: 'PF2E.ItemTitle',\n    save: 'tokenActionHud.pf2e.save',\n    skill: 'PF2E.SkillLabel',\n    skillAction: 'tokenActionHud.pf2e.skillAction',\n    spell: 'TYPES.Item.spell',\n    strike: 'PF2E.WeaponStrikeLabel',\n    strikeAuxiliaryAction: 'PF2E.WeaponStrikeLabel',\n    toggle: 'tokenActionHud.pf2e.toggle',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Carry types icons\n */\nexport const CARRY_TYPE_ICON = {\n    held1: {\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-1 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\n        tooltip: 'PF2E.CarryType.held1'\n    },\n    held2: {\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-2 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\n        tooltip: 'PF2E.CarryType.held2'\n    },\n    dropped: {\n        icon: '<i class=\"fas fa-grip-lines fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.dropped'\n    },\n    stowed: {\n        icon: '<i class=\"fas fa-box fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.stowed'\n    },\n    worn: {\n        icon: '<i class=\"fas fa-tshirt fa-fw\" data-tooltip=\"placeholder\"></i>',\n        tooltip: 'PF2E.CarryType.worn'\n    }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    armor: { groupId: 'armor' },\n    consumable: { groupId: 'consumables' },\n    backpack: { groupId: 'containers' },\n    equipment: { groupId: 'equipment' },\n    shield: { groupId: 'shields' },\n    treasure: { groupId: 'treasure' },\n    weapon: { groupId: 'weapons' }\n}\n\n/**\n * Modular options\n */\nexport const MODULAR_OPTION = {\n    bludgeoning: 'PF2E.TraitBludgeoning',\n    piercing: 'PF2E.TraitPiercing',\n    slashing: 'PF2E.TraitSlashing'\n}\n\n/**\n * Skill abbreviations\n */\nexport const SKILL_ABBREVIATION = {\n    acrobatics: 'acr',\n    arcana: 'arc',\n    athletics: 'ath',\n    crafting: 'cra',\n    deception: 'dec',\n    diplomacy: 'dip',\n    intimidation: 'itm',\n    medicine: 'med',\n    nature: 'nat',\n    occultism: 'occ',\n    performance: 'prf',\n    perception: 'per',\n    religion: 'rel',\n    society: 'soc',\n    stealth: 'ste',\n    survival: 'sur',\n    thievery: 'thi'\n}\n\n/**\n * Strike icons\n */\nexport const STRIKE_ICON = {\n    melee: 'systems/pf2e/icons/mdi/sword.svg',\n    thrown: 'systems/pf2e/icons/mdi/thrown.svg'\n}\n\n/**\n * Strike usage\n */\nexport const STRIKE_USAGE = {\n    melee: { name: 'PF2E.WeaponRangeMelee' },\n    ranged: { name: 'PF2E.NPCAttackRanged' },\n    thrown: { name: 'PF2E.TraitThrown' }\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    attack: { id: 'attack', name: 'PF2E.AttackLabel', type: 'system' },\n    toggles: { id: 'toggles', name: 'PF2E.TogglesLabel', type: 'system' },\n    strikes: { id: 'strikes', name: 'PF2E.StrikesLabel', type: 'system' },\n    actions: { id: 'actions', name: 'PF2E.ActionsActionsHeader', type: 'system' },\n    reactions: { id: 'reactions', name: 'PF2E.ActionsReactionsHeader', type: 'system' },\n    freeActions: { id: 'free-actions', name: 'PF2E.ActionsFreeActionsHeader', type: 'system' },\n    passives: { id: 'passives', name: 'PF2E.NPC.PassivesLabel', type: 'system' },\n    skillActionsGrouped: { id: 'skill-actions-grouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsGrouped', type: 'system' },\n    skillActionsUngrouped: { id: 'skill-actions-ungrouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsUngrouped', type: 'system', settings: { sort: true } },\n    weapons: { id: 'weapons', name: 'tokenActionHud.pf2e.weapons', type: 'system' },\n    shields: { id: 'shields', name: 'tokenActionHud.pf2e.shields', type: 'system' },\n    armor: { id: 'armor', name: 'tokenActionHud.pf2e.armor', type: 'system' },\n    equipment: { id: 'equipment', name: 'tokenActionHud.pf2e.equipment', type: 'system' },\n    consumables: { id: 'consumables', name: 'tokenActionHud.pf2e.consumables', type: 'system' },\n    containers: { id: 'containers', name: 'tokenActionHud.pf2e.containers', type: 'system' },\n    treasure: { id: 'treasure', name: 'tokenActionHud.pf2e.treasure', type: 'system' },\n    ancestryFeatures: { id: 'ancestry-features', name: 'PF2E.FeaturesAncestryHeader', type: 'system' },\n    classFeatures: { id: 'class-features', name: 'PF2E.FeaturesClassHeader', type: 'system' },\n    ancestryFeats: { id: 'ancestry-feats', name: 'PF2E.FeatAncestryHeader', type: 'system' },\n    classFeats: { id: 'class-feats', name: 'PF2E.FeatClassHeader', type: 'system' },\n    skillFeats: { id: 'skill-feats', name: 'PF2E.FeatSkillHeader', type: 'system' },\n    generalFeats: { id: 'general-feats', name: 'PF2E.FeatGeneralHeader', type: 'system' },\n    bonusFeats: { id: 'bonus-feats', name: 'PF2E.FeatBonusHeader', type: 'system' },\n    spells: { id: 'spells', name: 'PF2E.Item.Spell.Plural', type: 'system' },\n    heroPoints: { id: 'hero-points', name: 'PF2E.Actor.Resource.HeroPoints', type: 'system' },\n    mythicPoints: { id: 'mythic-points', name: 'PF2E.Actor.Resource.MythicPoints', type: 'system' },\n    initiative: { id: 'initiative', name: 'PF2E.InitiativeLabel', type: 'system' },\n    perceptionCheck: { id: 'perception-check', name: 'PF2E.PerceptionLabel', type: 'system' },\n    coreSkills: { id: 'core-skills', name: 'PF2E.CoreSkillsHeader', type: 'system' },\n    loreSkills: { id: 'lore-skills', name: 'PF2E.LoreSkillsHeader', type: 'system' },\n    conditions: { id: 'conditions', name: 'PF2E.ConditionsLabel', type: 'system' },\n    socialConditions: { id: 'social-conditions', name: 'tokenActionHud.pf2e.socialConditions', type: 'system' },\n    otherConditions: { id: 'other-conditions', name: 'tokenActionHud.pf2e.otherConditions', type: 'system' },\n    effects: { id: 'effects', name: 'PF2E.EffectsLabel', type: 'system' },\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    recoveryCheck: { id: 'recovery-check', name: 'PF2E.Check.Specific.Recovery', type: 'system' },\n    rests: { id: 'rests', name: 'tokenActionHud.pf2e.rests', type: 'system' },\n    saves: { id: 'saves', name: 'PF2E.SavesHeader', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\n}\n\n/**\n * Skill actions\n */\nexport const SKILL_ACTION = {\n    l5pbgrj8SSNtRGs8: { name: 'PF2E.Actions.AdministerFirstAid.Stabilize.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/features/feats/treat-wounds.webp' },\n    ZEWD4zcEDQwYhVT8: { name: 'PF2E.Actions.AdministerFirstAid.StopBleeding.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/conditions/persistent-damage.webp' },\n    '55mxH0w8UkY1o3Xv': { name: 'PF2E.Actions.Balance.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-brown.webp' },\n    LXCy1iJddD95Z91s: { name: 'PF2E.Actions.Climb.Title', skill: 'athletics', actionCost: 1, image: 'icons/sundries/misc/ladder.webp' },\n    '9RNumMausgG7adgL': { name: 'PF2E.Actions.Coerce.Title', skill: 'intimidation', actionCost: 'passive', image: 'icons/skills/social/intimidation-impressing.webp' },\n    xcrdOOiN0l6O1sIn: { name: 'PF2E.Actions.CommandAnAnimal.Title', skill: 'nature', actionCost: 1, image: 'icons/environment/creatures/horse-white.webp' },\n    zn0HadZeoKDALxRu: { name: 'PF2E.Actions.ConcealAnObject.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp' },\n    Tu7LIRelQsiOuo1l: { name: 'PF2E.Actions.Craft.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/skills/trades/smithing-anvil-silver-red.webp' },\n    aDsYSdRqiC6qQIOQ: { name: 'PF2E.Actions.CreateADiversion.DistractingWords.Title', skill: 'deception', actionCost: 1, image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\n    zUJ0UhuoFt5a7tiN: { name: 'PF2E.Actions.CreateADiversion.Gesture.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/social/wave-halt-stop.webp' },\n    '1JpYPlIkjyseE9JU': { name: 'PF2E.Actions.CreateADiversion.Trick.Title', skill: 'deception', actionCost: 1, image: 'systems/pf2e/icons/spells/charming-words.webp' },\n    mNphXpAkmGsMadUv: { name: 'PF2E.Actions.CreateForgery.Title', skill: 'society', actionCost: 'passive', image: 'systems/pf2e/icons/spells/transcribe-moment.webp' },\n    U6WjxFPn4fUqIrfl: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'arcana', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-runes.webp' },\n    RZyfkw1DiqVy3JUC: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'occultism', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-purple.webp' },\n    sDUERv4E88G5BRPr: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'religion', actionCost: 'passive', image: 'systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp' },\n    YWAvvDXpdW1fYPFo: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'society', actionCost: 'passive', image: 'icons/skills/trades/academics-study-reading-book.webp' },\n    nEwqNNWX6scLt4sc: { name: 'PF2E.Actions.Demoralize.Title', skill: 'intimidation', actionCost: 1, image: 'icons/skills/social/intimidation-impressing.webp' },\n    T2QNEoRojMWEec4a: { name: 'PF2E.Actions.DisableDevice.Title', skill: 'thievery', actionCost: 2, image: 'systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp' },\n    ooiO59Ch2QaebOmc: { name: 'PF2E.Actions.Disarm.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/melee/sword-damaged-broken-glow-red.webp' },\n    '50Q0DYL33Kalu1BH': { name: 'PF2E.Actions.Escape.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\n    lkEcQQss16SIrVxM: { name: 'PF2E.Actions.Escape.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\n    RjfPFjqPrNve6eeh: { name: 'PF2E.Actions.Feint.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/melee/maneuver-sword-katana-yellow.webp' },\n    yMTKMnaYSGtDz4wk: { name: 'PF2E.Actions.ForceOpen.Title', skill: 'athletics', actionCost: 1, image: 'icons/equipment/feet/boots-armored-steel.webp' },\n    rCgGPEyXbzLFcio6: { name: 'PF2E.Actions.GatherInformation.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/skills/social/diplomacy-handshake.webp' },\n    i95kcGLIQKOTsnv6: { name: 'PF2E.Actions.Grapple.Title', skill: 'athletics', actionCost: 'passive', image: 'icons/skills/melee/unarmed-punch-fist.webp' },\n    FlM3HvpnsZpCKawG: { name: 'PF2E.Actions.Hide.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/features/classes/wild.webp' },\n    v3dlDjFlOmT5T2gC: { name: 'PF2E.Actions.HighJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/arrows-up-trio-red.webp' },\n    k5nW4jGyXD0Oq9LR: { name: 'PF2E.Actions.Impersonate.Title', skill: 'deception', actionCost: 'passive', image: 'icons/equipment/head/mask-carved-scream-tan.webp' },\n    VTg4t8kYTvXcHROq: { name: 'PF2E.Actions.Lie.Title', skill: 'deception', actionCost: 'passive', image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\n    QPsV0qi2zXm7syt6: { name: 'PF2E.Actions.LongJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/figure-running-gray.webp' },\n    '1Sj2Pz3VI2SFWqZw': { name: 'PF2E.Actions.MakeAnImpression.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/environment/people/commoner.webp' },\n    '9Ul5Op5OceT9P5SS': { name: 'PF2E.Actions.ManeuverInFlight.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/commodities/biological/wing-bird-white.webp' },\n    Gj68YCVlDjc75iCP: { name: 'PF2E.Actions.PalmAnObject.Title', skill: 'thievery', actionCost: 1, image: 'icons/sundries/gaming/playing-cards.webp' },\n    dWcrojMk0d2WRPBq: { name: 'PF2E.Actions.Perform.Title', skill: 'performance', actionCost: 1, image: 'icons/skills/trades/music-singing-voice-blue.webp' },\n    '8YrH37NzKRuiKFbF': { name: 'PF2E.Actions.PickALock.Title', skill: 'thievery', actionCost: 2, image: 'icons/sundries/misc/lock-bronze-reinforced.webp' },\n    BQTA7bL264189Xla: { name: 'PF2E.Actions.Repair.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/tools/smithing/anvil.webp' },\n    tbveXG4gaIoKnsWX: { name: 'PF2E.Actions.Request.Title', skill: 'diplomacy', actionCost: 1, image: 'icons/skills/social/thumbsup-approval-like.webp' },\n    tikhJ2b6AMh7wQU7: { name: 'PF2E.Actions.Seek.Title', skill: 'perception', actionCost: 1, image: 'icons/tools/scribal/magnifying-glass.webp' },\n    LN67MgbGE8IHb2X0: { name: 'PF2E.Actions.SenseDirection.Title', skill: 'survival', actionCost: 'passive', image: 'icons/tools/navigation/compass-brass-blue-red.webp' },\n    PmHt7Gb5fCrlWWTr: { name: 'PF2E.Actions.SenseMotive.Title', skill: 'perception', actionCost: 1, image: 'icons/environment/people/commoner.webp' },\n    yNry1xMZqdWHncbV: { name: 'PF2E.Actions.Shove.Title', skill: 'athletics', actionCost: 1, image: 'systems/pf2e/icons/spells/hydraulic-push.webp' },\n    HSTkVuv0SjTNK3Xx: { name: 'PF2E.Actions.Sneak.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/conditions/unnoticed.webp' },\n    UKHPveLpG7hUs4D0: { name: 'PF2E.Actions.Squeeze.Title', skill: 'acrobatics', actionCost: 'passive', image: 'icons/commodities/tech/claw-mechanical.webp' },\n    zjovbAeuLvyuWFKd: { name: 'PF2E.Actions.Steal.Title', skill: 'thievery', actionCost: 1, image: 'icons/containers/bags/coinpouch-gold-red.webp' },\n    mkKko3CEBCyJVQw1: { name: 'PF2E.Actions.Subsist.Title', skill: 'society', actionCost: 'passive', image: 'icons/environment/settlement/building-rubble.webp' },\n    zkqh01BoXDVgydzo: { name: 'PF2E.Actions.Subsist.Title', skill: 'survival', actionCost: 'passive', image: 'icons/environment/wilderness/camp-improvised.webp' },\n    TIlUkCzviYxdVk4E: { name: 'PF2E.Actions.Swim.Title', skill: 'athletics', actionCost: 1, image: 'icons/creatures/fish/fish-shark-swimming.webp' },\n    Al5LYMMdeDcpC9Br: { name: 'PF2E.Actions.Track.Title', skill: 'survival', actionCost: 'passive', image: 'systems/pf2e/icons/conditions/observed.webp' },\n    m4iM5r3TfvQs5Y2n: { name: 'PF2E.Actions.TreatDisease.Title', skill: 'medicine', actionCost: 'passive', image: 'icons/magic/nature/root-vine-caduceus-healing.webp' },\n    R03LRl2RBbsm6EcF: { name: 'PF2E.Actions.TreatPoison.Title', skill: 'medicine', actionCost: 1, image: 'systems/pf2e/icons/effects/treat-poison.webp' },\n    gRj7xUfcpUZQLrOC: { name: 'PF2E.Actions.Trip.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/wounds/bone-broken-marrow-yellow.webp' },\n    '2qhYHkcSsTJoSwrJ': { name: 'PF2E.Actions.TumbleThrough.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-sandals-tan.webp' }\n}\n\n/**\n * Skills\n */\nexport const SKILL = {\n    acrobatics: { name: 'PF2E.SkillAcrobatics' },\n    arcana: { name: 'PF2E.SkillArcana' },\n    athletics: { name: 'PF2E.SkillAthletics' },\n    crafting: { name: 'PF2E.SkillCrafting' },\n    deception: { name: 'PF2E.SkillDeception' },\n    diplomacy: { name: 'PF2E.SkillDiplomacy' },\n    intimidation: { name: 'PF2E.SkillIntimidation' },\n    lore: { name: 'PF2E.SkillLore' },\n    medicine: { name: 'PF2E.SkillMedicine' },\n    nature: { name: 'PF2E.SkillNature' },\n    occultism: { name: 'PF2E.SkillOccultism' },\n    perception: { name: 'PF2E.PerceptionLabel' },\n    performance: { name: 'PF2E.SkillPerformance' },\n    religion: { name: 'PF2E.SkillReligion' },\n    society: { name: 'PF2E.SkillSociety' },\n    stealth: { name: 'PF2E.SkillStealth' },\n    survival: { name: 'PF2E.SkillSurvival' },\n    thievery: { name: 'PF2E.SkillThievery' }\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    Utils = class Utils {\n        /**\n         * Get setting value\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns                          The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting value\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_ICON, ACTION_TYPE, CARRY_TYPE_ICON, ITEM_TYPE, MODULAR_OPTION, SKILL_ABBREVIATION, SKILL, SKILL_ACTION, STRIKE_ICON, STRIKE_USAGE, DAMAGE_TYPE_ICONS } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        // Initialize actor and token variables\n        actors = null\n        actorId = null\n        actorType = null\n        tokenId = null\n\n        // Initialize items variable\n        items = null\n\n        // Initialize groupIds variables\n        groupIds = null\n        activationGroupIds = null\n        effectGroupIds = null\n        inventoryGroupIds = null\n        spellGroupIds = null\n\n        // Initialize action variables\n        featureActions = null\n        inventoryActions = null\n        spellActions = null\n\n        mapLabel = coreModule.api.Utils.i18n('PF2E.MAPAbbreviationLabel').replace(' {penalty}', '')\n\n        /**\n         * Build System Actions\n         * @override\n         * @param {array} groupIds\n         */\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this.#getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Exit if actor is not a known type\n            const knownActors = ['character', 'familiar', 'hazard', 'npc']\n            if (this.actorType && !knownActors.includes(this.actorType)) return\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            // Set settings variables\n            this.abbreviateSkills = Utils.getSetting('abbreviateSkills')\n            this.addAuxiliaryActions = Utils.getSetting('addAuxiliaryActions')\n            this.addDamageAndCritical = Utils.getSetting('addDamageAndCritical')\n            this.addStowedItems = Utils.getSetting('addStowedItems')\n            this.addUnequippedItems = Utils.getSetting('addUnequippedItems')\n            this.calculateAttackPenalty = Utils.getSetting('calculateAttackPenalty')\n            this.colorSkills = Utils.getSetting('colorSkills')\n            this.showStrikeImages = Utils.getSetting('showStrikeImages')\n            this.showStrikeNames = Utils.getSetting('showStrikeNames')\n            this.showStrikeTraits = Utils.getSetting('showStrikeTraits')\n            this.splitStrikes = Utils.getSetting('splitStrikes')\n\n            // Set group variables\n            this.groupIds = groupIds\n\n            if (this.actorType === 'character') {\n                await this.#buildCharacterActions()\n            } else if (this.actorType === 'familiar') {\n                await this.#buildFamiliarActions()\n            } else if (this.actorType === 'hazard') {\n                await this.#buildHazardActions()\n            } else if (this.actorType === 'npc') {\n                await this.#buildNpcActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        async #buildCharacterActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeats(),\n                this.#buildHeroActions(),\n                this.#buildPoints('heroPoints'),\n                this.#buildPoints('mythicPoints'),\n                this.#buildInitiative(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildRecoveryCheck(),\n                this.#buildRests(),\n                this.#buildSaves(),\n                this.#buildSkillActions(),\n                this.#buildSkills(),\n                this.#buildSpells(),\n                this.#buildStrikes(),\n                this.#buildToggles()\n            ])\n            // Build elemental blasts after other character actions so they are grouped together\n            await this.#buildElementalBlasts()\n        }\n\n        /**\n         * Build familiar actions\n         * @private\n         */\n        async #buildFamiliarActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildAttack(),\n                this.#buildCombat(),\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildSkills()\n            ])\n        }\n\n        /**\n         * Build hazard actions\n         * @private\n         */\n        async #buildHazardActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildInitiative(),\n                this.#buildSaves(),\n                this.#buildStrikes()\n            ])\n        }\n\n        /**\n         * Build NPC actions\n         */\n        async #buildNpcActions () {\n            await Promise.all([\n                this.#buildActions(),\n                this.#buildCombat(),\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeats(),\n                this.#buildInitiative(),\n                this.#buildInventory(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildSkillActions(),\n                this.#buildSkills(),\n                this.#buildStrikes(),\n                this.#buildSpells(),\n                this.#buildToggles()\n            ])\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        async #buildMultipleTokenActions () {\n            await Promise.all([\n                this.#buildInitiative(),\n                this.#buildPerceptionCheck(),\n                this.#buildSaves(),\n                this.#buildSkillActions(),\n                this.#buildSkills()\n            ])\n        }\n\n        /**\n         * Build actions\n         */\n        async #buildActions () {\n            const actionType = 'action'\n\n            // Exit early if no items exist\n            if (this.items.size === 0) return\n\n            const actionTypes = ['action', 'reaction', 'free', 'passive']\n\n            const actionItems = new Map([...this.items].filter(([_, itemData]) => itemData.type === 'action' || actionTypes.includes(itemData.system?.actionType?.value)))\n\n            const actionsMap = new Map()\n\n            for (const [key, value] of actionItems) {\n                // Set variables\n                const actionTypeValue = value.system.actionType?.value\n\n                switch (actionTypeValue) {\n                case 'action':\n                    actionsMap.set('actions', actionsMap.get('actions') || new Map())\n                    actionsMap.get('actions').set(key, value)\n                    break\n                case 'reaction':\n                    actionsMap.set('reactions', actionsMap.get('reactions') || new Map())\n                    actionsMap.get('reactions').set(key, value)\n                    break\n                case 'free':\n                    actionsMap.set('free-actions', actionsMap.get('free-actions') || new Map())\n                    actionsMap.get('free-actions').set(key, value)\n                    break\n                case 'passive':\n                    actionsMap.set('passives', actionsMap.get('passives') || new Map())\n                    actionsMap.get('passives').set(key, value)\n                    break\n                }\n            }\n\n            // Loop through inventory subcategory ids\n            for (const [key, value] of actionsMap) {\n                const groupId = key\n                const items = value\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build attacks\n         * @private\n         */\n        #buildAttack () {\n            const actionType = 'familiarAttack'\n\n            const attack = this.actor.system.attack\n\n            if (attack) {\n                const id = attack.slug\n                const name = coreModule.api.Utils.i18n('PF2E.AttackLabel')\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const modifier = coreModule.api.Utils.getModifier(attack?.totalModifier)\n                const info1 = this.actor ? { text: modifier } : ''\n\n                // Get actions\n                const actions = [{\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    info1\n                }]\n\n                // Create group data\n                const groupData = { id: 'attack', type: 'system' }\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build combat\n         */\n        #buildCombat () {\n            const actionType = 'utility'\n\n            // Set combat types\n            const combatTypes = {\n                endTurn: { id: 'endTurn', name: coreModule.api.Utils.i18n('tokenActionHud.endTurn') }\n            }\n\n            // Delete endTurn for multiple tokens\n            if (game.combat?.current?.tokenId !== this.token?.id) delete combatTypes.endTurn\n\n            // Get actions\n            const actions = Object.entries(combatTypes).map((combatType) => {\n                const id = combatType[1].id\n                const name = combatType[1].name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                return {\n                    id,\n                    name,\n                    listName,\n                    encodedValue\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'combat', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build conditions\n         * @private\n         */\n        async #buildConditions () {\n            const actionType = 'condition'\n            const limitedConditions = ['doomed', 'dying', 'wounded']\n\n            // Get active conditions\n            const activeConditions = new Map(\n                [...this.items]\n                    .filter(item => item[1].type === actionType)\n                    .map(item => {\n                        const itemData = item[1]\n                        return [\n                            itemData.slug,\n                            itemData\n                        ]\n                    })\n            )\n\n            // Get conditions\n            // Conditions are duplicated in the ConditionManager and the name scaled conditions is suffixed with ' 1'\n            const conditions = [...game.pf2e.ConditionManager.conditions]\n                .filter(([conditionId]) => !conditionId.startsWith('Compendium'))\n                .map(([conditionId, conditionData]) => {\n                    conditionData.name = conditionData.name.replace(' 1', '')\n                    return [conditionId, conditionData]\n                })\n\n            // Build actions\n            const actions = await Promise.all(\n                conditions.map(async ([conditionId, conditionData]) => {\n                    const id = conditionData.slug\n                    const activeCondition = activeConditions.get(conditionId)\n                    const activeConditionId = activeCondition?.id\n                    const name = conditionData.name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage(conditionData)\n                    const active = activeConditionId ? ' active' : ''\n                    const cssClass = `toggle${active}`\n                    let info1 = ''\n                    let attributeValue = ''\n\n                    if (activeConditionId) {\n                        if (limitedConditions.includes(activeCondition.slug)) {\n                            const attribute = this.actor.system.attributes[activeCondition.slug]\n                            attributeValue = attribute.value\n                            const max = attribute.max\n                            info1 = { text: (max > 0) ? `${attributeValue ?? 0}/${max}` : '' }\n                        } else if (activeCondition.system.value.isValued) {\n                            attributeValue = activeCondition.system.value.value\n                            info1 = { text: attributeValue }\n                        }\n                    }\n\n                    const tooltipName = `${name}${(attributeValue) ? ` ${attributeValue}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        description: conditionData.description\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        img,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.sort((a, b) => a.name.localeCompare(b.name))\n\n            // Create group data\n            const conditionsGroupData = { id: 'conditions', type: 'system' }\n            const actionsTemp = []\n\n            // Add conditions to the group\n            await this.addActions(\n                actions.reduce(function (acc, current) {\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Malevolence', 'Unfriendly']\n                    if (!filter.includes(current.name)) {\n                        acc.push(current)\n                    } else {\n                        actionsTemp.push(current)\n                    }\n                    return acc\n                }, []),\n                conditionsGroupData\n            )\n\n            const socialGroupData = { id: 'social-conditions', type: 'system' }\n            const actionsOther = []\n\n            // Add social conditions to the group\n            await this.addActions(\n                actionsTemp.reduce(function (acc, current) {\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Unfriendly']\n                    if (filter.includes(current.name)) {\n                        acc.push(current)\n                    } else {\n                        actionsOther.push(current)\n                    }\n                    return acc\n                }, []),\n                socialGroupData\n            )\n\n            const otherGroupData = { id: 'other-conditions', type: 'system' }\n\n            // Add other conditions to the group\n            await this.addActions(actionsOther, otherGroupData)\n        }\n\n        /**\n         * Build hero points\n         */\n        async #buildPoints (actionType) {\n            let actions, groupData\n\n            const mythicEnabled = this.actor.system.resources?.mythicPoints.max ? true : false\n\n            // Create group data\n            if (actionType === 'heroPoints' && !mythicEnabled) {\n                groupData = { id: 'hero-points', type: 'system' }\n\n                const heroPoints = this.actor.system.resources?.heroPoints\n                const value = heroPoints.value\n                const max = heroPoints.max\n\n                // Get actions\n                actions = [{\n                    id: 'heroPoints',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Resource.HeroPoints'),\n                    encodedValue: [actionType, actionType].join(this.delimiter),\n                    info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\n                }]\n            }\n            else if (actionType === 'mythicPoints' && mythicEnabled) {\n                groupData = { id: 'mythic-points', type: 'system' }\n\n                const mythicPoints = this.actor.system.resources?.mythicPoints\n                const value = mythicPoints.value\n                const max = mythicPoints.max\n\n                // Get actions\n                actions = [{\n                    id: 'mythicPoints',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Resource.MythicPoints'),\n                    encodedValue: [actionType, actionType].join(this.delimiter),\n                    info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\n                }]\n            }\n\n            // Add actions to action list\n            if (actions && groupData) {\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build effects\n         * @private\n         */\n        async #buildEffects () {\n            const actionType = 'effect'\n\n            // Get effects\n            const items = new Map([...this.items]\n                .filter(item =>\n                    item[1].type === 'effect' &&\n                    ((!(item[1].system?.unidentified ?? false) &&\n                    !(item[1].unidentified ?? false)) || game.user.isGM)))\n\n            // Create group data\n            const groupData = { id: 'effects', type: 'system' }\n\n            const actions = await Promise.all(\n                [...items].map(async ([_$, itemData]) => {\n                    const id = this.#getActionId(itemData)\n                    const name = this.#getActionName(itemData)\n                    const listName = this.#getActionListName(itemData, actionType)\n                    const cssClass = this.#getActionCss(itemData)\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const icon1 = this.#getIcon1(itemData, actionType)\n                    const img = coreModule.api.Utils.getImage(itemData)\n                    const info = this.#getItemInfo(itemData)\n                    const tooltipData = {\n                        name,\n                        description: itemData.description\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        img,\n                        icon1,\n                        info,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.sort((a, b) => a.name.localeCompare(b.name))\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build Feats\n         * @private\n         */\n        async #buildFeats () {\n            const actionType = 'feat'\n            const featTypes = {\n                ancestryfeature: 'ancestry-features',\n                classfeature: 'class-features',\n                ancestry: 'ancestry-feats',\n                class: 'class-feats',\n                skill: 'skill-feats',\n                general: 'general-feats',\n                bonus: 'bonus-feats'\n            }\n\n            // Get feats\n            const featsMap = new Map()\n\n            for (const [key, value] of this.items) {\n                if (value.type !== 'feat') continue\n                // 'featType' changed to 'system.category' post pf2e 4.10+\n                const featType = value.system?.category ?? value.featType\n                const groupId = featTypes[featType]\n\n                featsMap.set(groupId, featsMap.get(groupId) || new Map())\n                featsMap.get(groupId).set(key, value)\n            }\n\n            for (const [key, value] of featsMap) {\n                const groupId = key\n                const items = value\n\n                // Get group data\n                const groupData = { id: groupId, type: 'system' }\n\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n        * Build hero actions\n        * @private\n        */\n        async #buildHeroActions () {\n            if (!game.modules.get('pf2e-hero-actions')?.active) return\n\n            const actionType = 'heroAction'\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionType])\n            const heroActions = this.actor.getFlag('pf2e-hero-actions', 'heroActions') ?? []\n\n            const groupData = { id: 'hero-actions', type: 'system' }\n\n            const actions = []\n\n            const heroPoints = this.actor.heroPoints?.value\n            const remainingHeroPoints = heroPoints - (heroActions?.length ?? 0)\n\n            if (remainingHeroPoints > 0) {\n                actions.push({\n                    id: 'drawHeroActions',\n                    name: game.i18n.format('pf2e-hero-actions.templates.heroActions.draw', { nb: remainingHeroPoints }),\n                    listName: `${actionTypeName}: ${game.i18n.localize('pf2e-hero-actions.templates.heroActions.draw').replace('({nb}) ', '')}`,\n                    encodedValue: [actionType, 'drawHeroActions'].join(this.delimiter)\n                })\n            }\n\n            const heroActionActions = await Promise.all(\n                [...heroActions].map(async (heroAction) => {\n                    const id = heroAction?.uuid\n                    const name = heroAction?.name\n                    const listName = `${actionTypeName}: ${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const img = coreModule.api.Utils.getImage('systems/pf2e/icons/actions/Passive.webp')\n                    const uuidData = (heroAction?.uuid) ? await fromUuid(heroAction?.uuid) : null\n                    const tooltipData = {\n                        name,\n                        description: uuidData?.text?.content ?? null\n                    }\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        img,\n                        listName,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.push(...heroActionActions)\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build initiative\n         * @private\n         */\n        async #buildInitiative () {\n            const actionType = 'initiative'\n\n            const initiativeStatistic = this.actor?.system?.initiative?.statistic ?? null\n\n            // Get actions\n            const actions = []\n\n            if (this.actorType !== 'hazard') {\n                const initiative = this.actor ? this.actor.system.initiative : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n                const fullName = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n                const name = this.abbreviatedSkills ? SKILL_ABBREVIATION.perception ?? fullName : fullName\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, 'perception'].join(this.delimiter)\n                const active = (initiativeStatistic === 'perception') ? ' active' : ''\n                const cssClass = `toggle${active}`\n                const modifier = coreModule.api.Utils.getModifier(initiative?.totalModifier)\n                const info1 = this.actor ? { text: modifier } : ''\n                const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                const tooltipData = {\n                    name: tooltipName,\n                    modifiers: initiative?.modifiers\n                }\n                const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                // Get actions\n                actions.push({\n                    id: 'initiative-perception',\n                    name,\n                    listName,\n                    encodedValue,\n                    cssClass,\n                    info1,\n                    tooltip\n                })\n            }\n\n            // Get skills\n            const skills = (this.actor)\n                ? Object.entries(this.actor.skills).filter(([_, skillData]) => !!skillData.label && skillData.label.length > 1)\n                : this.#getSharedSkills()\n\n            if (!skills) return\n\n            const coreSkills = []\n            const loreSkills = []\n\n            for (const skill of skills) {\n                if (!skill[1].lore) {\n                    coreSkills.push(skill)\n                } else {\n                    loreSkills.push(skill)\n                }\n            }\n\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n\n            const skillActions = await Promise.all(\n                [...coreSkills, ...loreSkills].map(async ([skillId, skillData]) => {\n                    const id = `initiative-${skillId}`\n                    const data = skillData\n                    const fullName = coreModule.api.Utils.i18n(data.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\n                    const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[data.slug] ?? fullName : fullName\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, skillId].join(this.delimiter)\n                    const active = (initiativeStatistic === skillId) ? ' active' : ''\n                    const cssClass = `toggle${active}`\n                    const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\n                    const info1 = this.actor ? { text: modifier } : ''\n                    const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        modifiers: skillData?.modifiers\n                    }\n                    const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        cssClass,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            actions.push(...skillActions)\n\n            // Create group data\n            const groupData = { id: 'initiative', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory () {\n            // Exit if no items exist\n            if (this.items.size === 0) return\n\n            const actionType = 'item'\n            const inventoryMap = new Map()\n\n            for (const [key, value] of this.items) {\n                const hasQuantity = value.system?.quantity > 0\n                const isEquippedItem = this.#isEquippedItem(value)\n                const isAddItem = this.#isAddItem('nonContainer', value)\n                const type = value.type\n\n                if (hasQuantity && isAddItem) {\n                    const itemType = isEquippedItem ? 'equipped' : 'unequipped'\n                    const itemCategoryMap = inventoryMap.get(itemType) ?? new Map()\n                    itemCategoryMap.set(key, value)\n                    inventoryMap.set(itemType, itemCategoryMap)\n\n                    if (isEquippedItem) {\n                        const categoryTypeMap = inventoryMap.get(type) ?? new Map()\n                        categoryTypeMap.set(key, value)\n                        inventoryMap.set(type, categoryTypeMap)\n                    }\n                }\n            }\n\n            // Loop through inventory group ids\n            for (const [id, items] of inventoryMap) {\n                const groupId = ITEM_TYPE[id]?.groupId\n\n                if (!groupId) continue\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = await Promise.all(\n                    [...items].map(async ([_, itemData]) => {\n                        const id = this.#getActionId(itemData)\n                        const name = this.#getActionName(itemData)\n                        const listName = this.#getActionListName(itemData, actionType)\n                        const cssClass = this.#getActionCss(itemData)\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getIcon1(itemData, actionType)\n                        const icon2 = this.#getCarryTypeIcon(itemData)\n                        const img = coreModule.api.Utils.getImage(itemData)\n                        const info = this.#getItemInfo(itemData)\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            cssClass,\n                            img,\n                            icon1,\n                            icon2,\n                            info,\n                            listName,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n\n            // Add container contents\n            if (inventoryMap.has('backpack')) {\n                // Create parent group data\n                const parentGroupData = { id: 'containers', type: 'system' }\n\n                const containers = inventoryMap.get('backpack')\n\n                for (const [id, container] of containers) {\n                    const contents = container.contents\n\n                    // Skip if container has no contents\n                    if (!contents.size) continue\n\n                    // Create group data\n                    const groupData = {\n                        id,\n                        name: container.name,\n                        listName: `Group: ${container.name}`,\n                        type: 'system-derived'\n                    }\n\n                    // Add group to action list\n                    await this.addGroup(groupData, parentGroupData)\n\n                    const contentsMap = new Map()\n\n                    for (const content of contents) {\n                        const isAddItem = this.#isAddItem('container', content)\n\n                        if (isAddItem) {\n                            contentsMap.set(content.id, content)\n                        }\n                    }\n\n                    const actions = await Promise.all(\n                        [...contentsMap].map(async ([_, itemData]) => {\n                            const id = this.#getActionId(itemData)\n                            const name = this.#getActionName(itemData)\n                            const listName = this.#getActionListName(itemData, actionType)\n                            const cssClass = this.#getActionCss(itemData)\n                            const encodedValue = [actionType, id].join(this.delimiter)\n                            const icon1 = this.#getIcon1(itemData, actionType)\n                            const icon2 = this.#getCarryTypeIcon(itemData)\n                            const img = coreModule.api.Utils.getImage(itemData)\n                            const info = this.#getItemInfo(itemData)\n                            const tooltipData = await this.#getTooltipData(itemData, actionType)\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                            return {\n                                id,\n                                name,\n                                encodedValue,\n                                cssClass,\n                                img,\n                                icon1,\n                                icon2,\n                                info,\n                                listName,\n                                tooltip\n                            }\n                        })\n                    )\n\n                    // Add actions to action list\n                    this.addActions(actions, groupData)\n                }\n            }\n        }\n\n        /**\n         * Build perception check\n         * @private\n         */\n        async #buildPerceptionCheck () {\n            const actionType = 'perceptionCheck'\n            const perception = this.actor ? this.actor.system.perception : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n            const name = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\n            const modifier = coreModule.api.Utils.getModifier(perception?.totalModifier)\n            const info1 = this.actor ? { text: modifier } : ''\n            const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n            const tooltipData = {\n                name: tooltipName,\n                modifiers: perception?.modifiers\n            }\n            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n            // Get actions\n            const actions = [{\n                id: 'perception',\n                name,\n                encodedValue: [actionType, 'perception'].join(this.delimiter),\n                info1,\n                tooltip\n            }]\n\n            // Create group data\n            const groupData = { id: 'perception-check', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build recovery check\n         */\n        #buildRecoveryCheck () {\n            const actionType = 'recoveryCheck'\n            const dyingValue = this.actor?.system.attributes?.dying\n\n            if (dyingValue?.value > 0) {\n                // Get actions\n                const actions = [{\n                    id: actionType,\n                    name: coreModule.api.Utils.i18n('PF2E.Check.Specific.Recovery'),\n                    encodedValue: [actionType, actionType].join(this.delimiter)\n                }]\n\n                // Create group data\n                const groupData = { id: 'recovery-check', type: 'system' }\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build rests\n         */\n        #buildRests () {\n            // Exit if multiple actors and not every actor is the character type\n            if (!this.actor && !this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Get actions\n            const actions = [\n                {\n                    id: 'treatWounds',\n                    name: coreModule.api.Utils.i18n('PF2E.Actions.TreatWounds.Label'),\n                    encodedValue: [actionType, 'treatWounds'].join(this.delimiter)\n                },\n                {\n                    id: 'rest',\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Character.Rest.Label'),\n                    encodedValue: [actionType, 'rest'].join(this.delimiter)\n                }\n            ]\n\n            // Take a Breather\n            if (game.settings.get('pf2e', 'staminaVariant')) {\n                actions.push({\n                    id: 'takeBreather',\n                    name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.takeBreather'),\n                    encodedValue: [actionType, 'takeBreather'].join(this.delimiter)\n                })\n            }\n\n            // Create group data\n            const groupData = { id: 'rests', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build saves\n         * @private\n         */\n        async #buildSaves () {\n            const actionType = 'save'\n\n            // Get saves\n            const saves = this.actor ? Object.entries(this.actor.saves || []) : Object.entries(CONFIG.PF2E.saves)\n\n            // Exit if no saves exist\n            if (!saves || saves.length === 0) return\n\n            // Get actions\n            const actions = await Promise.all(\n                saves.map(async ([id, saveData]) => {\n                    const name = saveData.label ?? (typeof saveData === 'string' ? coreModule.api.Utils.i18n(saveData) : '')\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    const modifier = coreModule.api.Utils.getModifier(saveData.mod)\n                    const info1 = this.actor ? { text: modifier } : ''\n                    const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                    const tooltipData = {\n                        name: tooltipName,\n                        modifiers: saveData?.modifiers\n                    }\n                    const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue,\n                        info1,\n                        tooltip\n                    }\n                })\n            )\n\n            // Get group data\n            const groupData = { id: 'saves', type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build skill actions\n         * @private\n         */\n        async #buildSkillActions () {\n            const actionType = 'compendiumMacro'\n\n            // Get skill actions\n            const actionMacros = await game.packs.get('pf2e.action-macros').getIndex()\n\n            if (!actionMacros.size) return\n\n            const skillActionsMap = new Map()\n\n            // Get actions\n            const actions = []\n            for (const actionMacro of actionMacros) {\n                const skillAction = SKILL_ACTION[actionMacro._id]\n\n                if (!skillAction) continue\n\n                const id = actionMacro._id\n                const actionName = coreModule.api.Utils.i18n(skillAction.name)\n                const skillName = coreModule.api.Utils.i18n(SKILL[skillAction.skill]?.name)\n                const name = `${actionName} - ${skillName}`\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE.skillAction)}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, 'pf2e.action-macros', id].join(this.delimiter)\n                const icon1 = this.#getActionIcon(skillAction.actionCost)\n                const img = skillAction.image\n                const modifier = coreModule.api.Utils.getModifier(this.actor?.skills[skillAction.skill]?.check?.mod)\n                const info1 = this.actor ? { text: modifier } : null\n\n                const action = {\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    icon1,\n                    img,\n                    info1\n                }\n\n                actions.push(action)\n\n                skillActionsMap.set(skillAction.skill, skillActionsMap.get(skillAction.skill) || new Map())\n                skillActionsMap.get(skillAction.skill).set(actionMacro._id, { ...action, name: actionName })\n            }\n\n            // Add actions to HUD\n            await this.addActions(actions, { id: 'skill-actions-ungrouped', type: 'system' })\n\n            for (const [key, value] of Object.entries(SKILL)) {\n                const groupId = key\n                const groupName = coreModule.api.Utils.i18n(value.name)\n                const skillActions = skillActionsMap.get(groupId)\n\n                if (!skillActions) continue\n\n                // Create group data\n                const groupData = { id: groupId, name: groupName, type: 'system-derived' }\n\n                // Add group to HUD\n                await this.addGroup(groupData, { id: 'skill-actions-grouped', type: 'system' })\n\n                // Get actions\n                const actions = [...skillActions].map(([_, skillAction]) => {\n                    return skillAction\n                })\n\n                // Add actions to HUD\n                await this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Build skills\n         * @private\n         */\n        async #buildSkills () {\n            const actionType = 'skill'\n\n            // Get skills\n            const skills = (this.actor)\n                ? Object.entries(this.actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1)\n                : this.#getSharedSkills()\n\n            if (!skills) return\n\n            const coreSkills = []\n            const loreSkills = []\n\n            for (const skill of skills) {\n                if (!skill[1].lore) {\n                    coreSkills.push(skill)\n                } else {\n                    loreSkills.push(skill)\n                }\n            }\n\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\n\n            const skillsMap = new Map()\n\n            skillsMap.set('skills', new Map())\n\n            if (coreSkills.length > 0) {\n                skillsMap.set('core-skills', new Map())\n            }\n            if (loreSkills.length > 0) {\n                skillsMap.set('lore-skills', new Map())\n            }\n\n            for (const skill of [...coreSkills, ...loreSkills]) {\n                if (!skill[1].lore) {\n                    skillsMap.get('core-skills').set(skill[0], skill[1])\n                } else {\n                    skillsMap.get('lore-skills').set(skill[0], skill[1])\n                }\n            }\n\n            // Loop through inventory subcateogry ids\n            for (const [key, value] of skillsMap) {\n                const groupId = key\n                const skills = value\n\n                // Create group data\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = await Promise.all(\n                    [...skills].map(async ([skillId, skillData]) => {\n                        const id = skillId\n                        const label = coreModule.api.Utils.i18n(skillData.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\n                        const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[skillData.slug] ?? label : label\n                        const fullName = label\n                        const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                        const listName = `${actionTypeName}${name}`\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const cssClass = (this.actor && this.colorSkills && skillData.rank > 0) ? `tah-pf2e-skill-rank-${skillData.rank}` : ''\n                        const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\n                        const info1 = this.actor ? { text: modifier } : ''\n                        const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\n                        const tooltipData = {\n                            name: tooltipName,\n                            modifiers: skillData?.modifiers\n                        }\n                        const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\n\n                        return {\n                            id,\n                            name,\n                            fullName,\n                            listName,\n                            encodedValue,\n                            cssClass,\n                            info1,\n                            tooltip\n                        }\n                    })\n                )\n\n                // Add actions to action list\n                this.addActions(actions, groupData)\n            }\n        }\n\n        /**\n         * Get shared skills between all actors\n         * @returns {object}\n         */\n        #getSharedSkills () {\n            if (!this.actors) return\n            const allSkillSets = this.actors.map(actor => Object.entries(actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1))\n            const minSkillSetSize = Math.min(...allSkillSets.map(skillSet => skillSet.length))\n            const smallestSkillSet = allSkillSets.find(skillSet => skillSet.length === minSkillSetSize)\n            return smallestSkillSet.filter(smallestSkill => allSkillSets.every(skillSet => skillSet.some(skill => skill[0] === smallestSkill[0])))\n        }\n\n        /**\n         * Build spells\n         * @private\n         */\n        async #buildSpells () {\n            const actionType = 'spell'\n\n            // Create parent group data\n            const parentGroupData = { id: 'spells', type: 'system' }\n\n            const spellcastingEntries = [...this.items].filter(item => item[1].type === 'spellcastingEntry')\n\n            for (const spellcastingEntry of spellcastingEntries) {\n                const spellbookGroupId = `spells+${spellcastingEntry[1].name.slugify({ replacement: '-', strict: true })}`\n                const spellbookGroupName = spellcastingEntry[1].name\n                const spellbookInfo1 = this.#getSpellDcInfo(spellcastingEntry[1])\n\n                // Create book group data\n                const bookGroupData = {\n                    id: spellbookGroupId,\n                    name: spellbookGroupName,\n                    type: 'system-derived',\n                    info1: spellbookInfo1\n                }\n\n                // Add group to action list\n                await this.addGroup(bookGroupData, parentGroupData)\n\n                // Add spell slot info to group\n                this.addGroupInfo(bookGroupData)\n\n                const spellInfo = await (spellcastingEntry[1].getSpellData ? spellcastingEntry[1].getSpellData() : spellcastingEntry[1].getSheetData())\n                const activeLevels = spellInfo.groups.filter(level => level.active.length > 0)\n\n                for (const level of Object.entries(activeLevels)) {\n                    const spellLevel = level[1].id\n                    const levelGroupId = `${spellbookGroupId}+${spellLevel}`\n                    const levelGroupName = String(coreModule.api.Utils.i18n(level[1].label))\n\n                    // Create level group data\n                    const levelGroupData = {\n                        id: levelGroupId,\n                        name: levelGroupName,\n                        type: 'system-derived'\n                    }\n\n                    // Add group to action list\n                    await this.addGroup(levelGroupData, bookGroupData)\n\n                    await this.#addSpellSlotInfo(bookGroupData, levelGroupData, level, spellInfo)\n\n                    // Get available spells\n                    const activeSpells = level[1].active\n                        .filter(activeSpell => activeSpell && !activeSpell.expended)\n                        .map(spell => spell.spell)\n\n                    const spells = new Map(activeSpells.map(spell => [spell.id, spell]))\n\n                    // Get actions\n                    const actions = await Promise.all(\n                        [...spells].map(async ([_, itemData]) => {\n                            const id = this.#getActionId(itemData, actionType, spellLevel)\n                            const name = this.#getActionName(itemData)\n                            const listName = this.#getActionListName(itemData, actionType)\n                            const cssClass = this.#getActionCss(itemData)\n                            const encodedValue = this.#getActionEncodedValue(itemData, actionType, spellLevel)\n                            const icon1 = this.#getIcon1(itemData, actionType)\n                            const img = coreModule.api.Utils.getImage(itemData)\n                            const tooltipData = await this.#getTooltipData(itemData, actionType, spellLevel)\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                            return {\n                                id,\n                                name,\n                                listName,\n                                encodedValue,\n                                cssClass,\n                                img,\n                                icon1,\n                                tooltip\n                            }\n                        })\n                    )\n\n                    // Add actions to action list\n                    this.addActions(actions, levelGroupData)\n                }\n            }\n        }\n\n        /**\n         * Add spell slot info\n         * @param {object} bookGroupData  The book group data\n         * @param {object} levelGroupData The level group data\n         * @param {number} level          The level\n         * @param {object} spellInfo      The spell info\n         */\n        async #addSpellSlotInfo (\n            bookGroupData,\n            levelGroupData,\n            level,\n            spellInfo\n        ) {\n            const isCantrip = level[1].id === 'cantrips'\n            const isFlexible = spellInfo.isFlexible\n            const isFocusPool = spellInfo.isFocusPool\n            const isInnate = spellInfo.isInnate\n            const isPrepared = spellInfo.isPrepared\n\n            //  Exit if spells are cantrips\n            if (!isFocusPool && (isCantrip || isInnate)) return\n\n            if (!isFocusPool && (isPrepared && !isFlexible)) return\n\n            const actionType = 'spellSlot'\n            const focus = this.actor.system.resources.focus\n            const slots = level[1].uses\n            const spellSlot = (isFocusPool) ? 'focus' : `slot${level[1].id}`\n            const maxSlots = (spellSlot === 'focus') ? focus?.max : slots?.max\n            const availableSlots = (spellSlot === 'focus') ? focus?.value : slots?.value\n            const info1 = { text: (maxSlots >= 0) ? `${availableSlots ?? 0}/${maxSlots}` : '' }\n\n            levelGroupData.info = { info1 }\n\n            // Add group info to the group\n            this.addGroupInfo(levelGroupData)\n\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE.spell)\n\n            // Get actions\n            const actions = [\n                {\n                    id: `${spellInfo.id}>${spellSlot}>slotIncrease`,\n                    name: '+',\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: +`,\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotIncrease`].join(this.delimiter),\n                    cssClass: 'shrink'\n                },\n                {\n                    id: `${spellInfo.id}>${spellSlot}>slotDecrease`,\n                    name: '-',\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: -`,\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotDecrease`].join(this.delimiter),\n                    cssClass: 'shrink'\n                }\n            ]\n\n            // Add actions to action list\n            this.addActions(actions, levelGroupData)\n        }\n\n        /**\n         * Build elemental blasts\n         */\n        async #buildElementalBlasts () {\n            const actionType = 'elementalBlast'\n\n            // Get elemental blasts\n            const blasts = new game.pf2e.ElementalBlast(this.actor)?.configs\n\n            // Exit if no strikes exist\n            if (!blasts.length) return\n\n            // Create parent group data\n            const parentGroupData = { id: 'strikes', type: 'system' }\n\n            for (const blast of blasts) {\n                let damageTypeActions = []\n                let strikeGroupData = null\n                const usageData = []\n\n                const strikeId = `${blast.item.id}-${blast.element}`\n                const strikeGroupId = `strikes+${strikeId}`\n                const strikeGroupName = (() => {\n                    let groupName = coreModule.api.Utils.i18n(blast.label)\n                    if (this.showStrikeTraits && this.showStrikeNames) {\n                        const blastTraits = blast.item.system.traits.value\n                        if (blastTraits.length > 0) {\n                            groupName += ' - '\n                            for (const trait of blastTraits) {\n                                groupName += '[' + trait + ']'\n                            }\n                        }\n                    }\n                    return groupName\n                })()\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE.strike)}: ${strikeGroupName} (${blast.item.id})`\n                const image = blast.img ?? blast.item?.img\n                const showTitle = this.showStrikeNames\n                const tooltipData = await this.#getTooltipData(blast, actionType)\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                // Create group data\n                strikeGroupData = {\n                    id: strikeGroupId,\n                    name: strikeGroupName,\n                    listName: strikeGroupListName,\n                    type: 'system-derived',\n                    settings: { showTitle },\n                    tooltip\n                }\n                \n                if (this.showStrikeImages) {\n                    strikeGroupData.settings.image = image\n                }\n\n                // Add group to action list\n                this.addGroup(strikeGroupData, parentGroupData)\n\n                if (blast.damageTypes.length > 1) {\n                    // Get actions\n                    damageTypeActions = blast.damageTypes.map((damageType, index) => {\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${damageType.value}>`)\n                        const fullName = damageType.label\n                        return {\n                            id,\n                            name: '',\n                            fullName,\n                            listName: `${strikeGroupListName}: ${fullName}`,\n                            encodedValue: ['elementalBlastDamageType', id].join(this.delimiter),\n                            cssClass: this.#getActionCss(damageType),\n                            icon1: this.#getActionIcon(damageType.icon, fullName)\n                        }\n                    })\n                }\n\n                const blastUsages = Object.entries(blast.maps) ?? []\n\n                for (const [key, blastUsage] of blastUsages) {\n                    const usage = key\n                    const usageGroupId = `${strikeGroupId}+${key}`\n                    const usageGroupName = (() => {\n                        if (usage !== 'melee' && blast.range.max > 0 && blast.range.label.length > 0) {\n                            return blast.range.label\n                        } else {\n                            return coreModule.api.Utils.i18n(STRIKE_USAGE[key].name)\n                        }\n                    })()\n                    const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\n                    const usageGroupImage = (blastUsages.length > 1)\n                        ? (usage === 'melee')\n                            ? STRIKE_ICON.melee\n                            : STRIKE_ICON.thrown\n                        : ''\n                    const usageGroupShowTitle = !((usageGroupImage || blastUsages.length <= 1))\n                    const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\n\n                    const usageGroupData = {\n                        id: usageGroupId,\n                        name: usageGroupName,\n                        listName: usageGroupListName,\n                        type: 'system-derived',\n                        settings\n                    }\n\n                    const rolls = Object.values(blastUsage)\n\n                    const actions = rolls.map((roll, index) => {\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${index}>` + usage)\n                        const isMap = `${roll}`.includes(this.mapLabel)\n                        let modifier\n                        if (isMap) {\n                            modifier = `${roll}`.split(' ')[0]\n                        } else {\n                            modifier = `${roll}`.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\n                        }\n                        const name = (this.calculateAttackPenalty) ? modifier : roll\n                        return {\n                            id,\n                            name,\n                            encodedValue: [actionType, id].join(this.delimiter),\n                            listName: `${usageGroupListName}: ${name}`\n                        }\n                    })\n\n                    // Get Damage\n                    const damageId = encodeURIComponent(`${blast.item.id}>${blast.element}>damage>${usage}`)\n                    const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\n                    actions.push({\n                        id: damageId,\n                        name: damageName,\n                        listName: `${usageGroupListName}: ${damageName}`,\n                        encodedValue: [actionType, damageId].join(this.delimiter),\n                        systemSelected: this.addDamageAndCritical\n                    })\n\n                    // Get Critical\n                    const criticalId = encodeURIComponent(`${blast.item.id}>${blast.element}>critical>${usage}`)\n                    const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\n                    actions.push({\n                        id: criticalId,\n                        name: criticalName,\n                        listName: `${usageGroupListName}: ${criticalName}`,\n                        encodedValue: [actionType, criticalId].join(this.delimiter),\n                        systemSelected: this.addDamageAndCritical\n                    })\n\n                    usageData.push({ actions, usageGroupData })\n                }\n\n                if (this.splitStrikes) {\n                    this.addActions(damageTypeActions, strikeGroupData)\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                } else {\n                    this.addActions([...(usageData[0]?.actions || []), ...damageTypeActions], strikeGroupData)\n                    usageData.shift()\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Build strikes\n         */\n        async #buildStrikes () {\n            const actionType = 'strike'\n\n            // Create parent group data\n            const parentGroupData = { id: 'strikes', type: 'system' }\n\n            // Get strikes\n            const strikes = this.actor.system.actions\n                .filter(action => (action.type === actionType && (action.item.system.quantity > 0 || this.actor.type === 'hazard' || this.actor.type === 'npc')))\n\n            // Exit if no strikes exist\n            if (!strikes) return\n\n            for (const strike of strikes) {\n                let auxiliaryActions = []\n                let versatileOptionActions = []\n                let strikeGroupData = null\n                const usageData = []\n\n                const strikeId = `${strike.item.id}-${strike.slug}`\n                const strikeGroupId = `strikes+${strikeId}`\n                const strikeGroupName = (() => {\n                    let groupName = strike.label\n                    if (this.showStrikeTraits && this.showStrikeNames) {\n                        let strikeTraits\n                        if (this.actor.type === 'character') {\n                            strikeTraits = strike.weaponTraits\n                        } else {\n                            strikeTraits = strike.traits\n                        }\n                        if (strikeTraits.length > 0) {\n                            groupName += ' - '\n                            for (const trait of strikeTraits) {\n                                groupName += '[' + trait.label + ']'\n                            }\n                        }\n                    }\n                    return groupName\n                })()\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ${strike.label} (${strike.item.id})`\n                const image = strike.imageUrl ?? strike.item?.img\n                const showTitle = this.showStrikeNames\n                const tooltipData = await this.#getTooltipData(strike, actionType)\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\n\n                // Create group data\n                strikeGroupData = {\n                    id: strikeGroupId,\n                    name: strikeGroupName,\n                    listName: strikeGroupListName,\n                    type: 'system-derived',\n                    settings: { showTitle },\n                    tooltip\n                }\n                if (this.showStrikeImages) strikeGroupData.settings.image = image\n                if (typeof strikeGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) strikeGroupData.settings.sort = false\n\n                // Add group to action list\n                this.addGroup(strikeGroupData, parentGroupData)\n\n                if (strike.auxiliaryActions?.length && this.addAuxiliaryActions) {\n                    // Get actions\n                    auxiliaryActions = strike.auxiliaryActions.flatMap((auxiliaryAction, index) => {\n                        if (auxiliaryAction.purpose === 'Modular') {\n                            const modularOptions = strike.item.system.traits.toggles.modular.options\n                            const modularSelection = strike.item.system.traits.toggles.modular.selection\n                            return modularOptions.map(modularOption => {\n                                const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>${modularOption}`)\n                                const name = coreModule.api.Utils.i18n(MODULAR_OPTION[modularOption])\n                                return {\n                                    id,\n                                    name,\n                                    listName: `${strikeGroupListName}: ${name}`,\n                                    encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\n                                    cssClass: this.#getActionCss({ selected: (modularOption === modularSelection) }),\n                                    icon1: this.#getActionIcon(auxiliaryAction.glyph)\n                                }\n                            })\n                        } else {\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>`)\n                            const name = auxiliaryAction.label\n                            return {\n                                id,\n                                name,\n                                listName: `${strikeGroupListName}: ${name}`,\n                                encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\n                                icon1: this.#getActionIcon(auxiliaryAction.glyph),\n                                info: this.#getItemInfo(auxiliaryAction)\n                            }\n                        }\n                    })\n                }\n                if (strike.ready) {\n                    if (strike.versatileOptions?.length) {\n                        // Get actions\n                        versatileOptionActions = strike.versatileOptions.map(versatileOption => {\n                            const encodedId = encodeURIComponent(`${strike.item.id}>${strike.slug}>${versatileOption.value}>`)\n                            const fullName = coreModule.api.Utils.i18n(versatileOption.label)\n                            return {\n                                id: encodedId,\n                                name: '',\n                                fullName,\n                                listName: `${strikeGroupListName}: ${fullName}`,\n                                encodedValue: ['versatileOption', encodedId].join(this.delimiter),\n                                cssClass: this.#getActionCss(versatileOption),\n                                icon1: this.#getActionIcon(versatileOption.glyph, fullName)\n                            }\n                        })\n                    }\n\n                    const strikeUsages = (strike.altUsages) ? [strike, ...strike.altUsages] : [strike]\n\n                    for (const strikeUsage of strikeUsages) {\n                        const glyph = strike.glyph\n                        const encodedUsage = `${strikeUsage.item.isMelee}_${strikeUsage.item.isThrown}_${strikeUsage.item.isRanged}`\n                        let usage\n                        switch (encodedUsage) {\n                        case 'true_false_false':\n                            usage = 'melee'\n                            break\n                        case 'false_true_true':\n                            usage = 'thrown'\n                            break\n                        case 'false_false_true':\n                            usage = 'ranged'\n                            break\n                        }\n                        const usageGroupId = `${strikeGroupId}+${usage}`\n                        const usageGroupName = (strikeUsage.attackRollType)\n                            ? coreModule.api.Utils.i18n(strikeUsage.attackRollType)\n                            : coreModule.api.Utils.i18n(STRIKE_USAGE[usage].name)\n                        const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\n                        const usageGroupIcon = (usage !== 'thrown' && glyph)\n                            ? `<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>${glyph}</span>`\n                            : STRIKE_ICON[usage]\n                        const usageGroupImage = (strikeUsages.length > 1) ? STRIKE_ICON[usage] : ''\n                        const usageGroupShowTitle = !((usageGroupImage || strikeUsages.length <= 1))\n                        const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\n\n                        const usageGroupData = {\n                            id: usageGroupId,\n                            name: usageGroupName,\n                            listName: usageGroupListName,\n                            icon: usageGroupIcon,\n                            type: 'system-derived',\n                            settings\n                        }\n\n                        if (typeof usageGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) {\n                            usageGroupData.settings.sort = false\n                        }\n\n                        const actions = strikeUsage.variants.map((variant, index) => {\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>` + usage)\n                            const isMap = variant.label.includes(this.mapLabel)\n                            const modifier = (isMap)\n                                ? variant.label.split(' ')[0]\n                                : variant.label.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\n                            const name = (this.calculateAttackPenalty) ? modifier : variant.label\n                            return {\n                                id,\n                                name,\n                                encodedValue: [actionType, id].join(this.delimiter),\n                                listName: `${usageGroupListName}: ${name}`\n                            }\n                        })\n\n                        // Get Damage\n                        const damageId = encodeURIComponent(`${strike.item.id}>${strike.slug}>damage>${usage}`)\n                        const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\n                        actions.push({\n                            id: damageId,\n                            name: damageName,\n                            listName: `${usageGroupListName}: ${damageName}`,\n                            encodedValue: [actionType, damageId].join(this.delimiter),\n                            systemSelected: this.addDamageAndCritical\n                        })\n\n                        // Get Critical\n                        const criticalId = encodeURIComponent(`${strike.item.id}>${strike.slug}>critical>${usage}`)\n                        const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\n                        actions.push({\n                            id: criticalId,\n                            name: criticalName,\n                            listName: `${usageGroupListName}: ${criticalName}`,\n                            encodedValue: [actionType, criticalId].join(this.delimiter),\n                            systemSelected: this.addDamageAndCritical\n                        })\n\n                        // Get Ammo\n                        if (strikeUsage.selectedAmmoId && !strikeUsage.ammunition) {\n                            const item = this.actor.items.get(strikeUsage.selectedAmmoId)\n\n                            if (!item) {\n                                const id = 'noAmmo'\n                                const name = coreModule.api.Utils.i18n('tokenActionHud.pf2e.noAmmo')\n                                actions.push({\n                                    id,\n                                    name,\n                                    listName: `${usageGroupListName}: ${name}`,\n                                    encodedValue: id\n                                })\n                            } else {\n                                const id = this.#getActionId(item)\n                                const name = this.#getActionName(item)\n                                actions.push({\n                                    id,\n                                    name,\n                                    listName: `${usageGroupListName}: ${name}`,\n                                    encodedValue: [actionType, id].join(this.delimiter)\n                                })\n                            }\n                        }\n\n                        usageData.push({ actions, usageGroupData })\n                    }\n                }\n\n                if (this.splitStrikes) {\n                    this.addActions([...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                } else {\n                    this.addActions([...(usageData[0]?.actions || []), ...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\n                    usageData.shift()\n                    for (const usage of usageData) {\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\n                        this.addActions(usage.actions, usage.usageGroupData)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Build toggles\n         */\n        #buildToggles () {\n            const actionType = 'toggle'\n\n            // Get toggles\n            const toggles = Object.values(this.actor.synthetics.toggles).flatMap(domain => Object.values(domain))\n\n            // Exit if no toggles exist\n            if (!toggles.length) return\n\n            const togglesWithoutSuboptions = toggles.filter(toggle => toggle.suboptions.length === 0)\n            const togglesWithSuboptions = toggles.filter(toggle => toggle.suboptions.length !== 0)\n\n            // Create group data\n            const groupData = { id: 'toggles', type: 'system' }\n\n            // Get actions\n            const actions = togglesWithoutSuboptions.map(toggle => {\n                const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>>`)\n                const name = coreModule.api.Utils.i18n(toggle.label)\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const active = (toggle.checked) ? ' active' : ''\n                const cssClass = `toggle${active}`\n\n                return { id, encodedValue, name, cssClass }\n            })\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n\n            for (const toggle of togglesWithSuboptions) {\n                const id = [toggle.domain, toggle.option].join('.')\n                const subgroupName = coreModule.api.Utils.i18n(toggle.label)\n                const subgroupListName = `${ACTION_TYPE.toggle}: ${subgroupName}`\n                const subgroupData = {\n                    id,\n                    name: subgroupName,\n                    listName: subgroupListName,\n                    type: 'system-derived'\n                }\n\n                this.addGroup(subgroupData, groupData)\n\n                // Get actions\n                const actions = toggle.suboptions.map(suboption => {\n                    const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>${suboption.value}`)\n                    const name = coreModule.api.Utils.i18n(suboption.label)\n                    const selected = suboption.selected && toggle.enabled && toggle.checked\n\n                    return {\n                        id,\n                        name,\n                        listName: `${subgroupListName}: ${name}`,\n                        encodedValue: ['toggle', id].join(this.delimiter),\n                        cssClass: this.#getActionCss({ selected })\n                    }\n                })\n\n                // Add actions to action list\n                this.addActions(actions, subgroupData)\n            }\n        }\n\n        #getActionId (entity, actionType, spellLevel) {\n            return (actionType === 'spell') ? `${entity.id ?? entity._id}-${spellLevel}` : entity.id ?? entity._id\n        }\n\n        #getActionName (entity) {\n            return entity?.name ?? entity?.label ?? ''\n        }\n\n        #getActionListName (entity, actionType) {\n            const name = this.#getActionName(entity)\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            return entity.listName ?? `${actionTypeName}${name}`\n        }\n\n        #getActionCss (entity) {\n            if (Object.hasOwn(entity, 'disabled')) {\n                const active = (!entity.disabled) ? ' active' : ''\n                return `toggle${active}`\n            }\n            if (Object.hasOwn(entity, 'selected')) {\n                const active = (entity.selected) ? ' active' : ''\n                return `toggle${active}`\n            }\n        }\n\n        #getActionEncodedValue (entity, actionType, spellLevel) {\n            const spellcastingId = entity?.spellcasting?.id\n            const encodedId = (actionType === 'spell') ? `${spellcastingId}>${spellLevel}>${entity.id ?? entity._id}` : this.#getActionId(entity, actionType, spellLevel)\n            return [actionType, encodedId].join(this.delimiter)\n        }\n\n        #getIcon1 (entity, actionType) {\n            const actions = entity.system?.actions\n            const actionTypes = ['free', 'reaction', 'passive']\n            const actionTypeValue = entity.system?.actionType?.value\n            const actionsCost = (actions) ? parseInt((actions || {}).value, 10) : null\n            const timeValue = entity.system?.time?.value\n            const actionIcon = entity.actionIcon\n            const iconType = (actionType === 'spell') ? timeValue : (actionTypes.includes(actionTypeValue)) ? actionTypeValue : actionsCost ?? actionIcon\n            const name = this.#getActionName(entity)\n            return this.#getActionIcon(iconType, name)\n        }\n\n        /**\n         * Get spell DC info\n         * @private\n         * @param {object} spellcastingEntry The spellcasting entry\n         * @returns {string}                 The spell DC info\n         */\n        #getSpellDcInfo (spellcastingEntry) {\n            const statistic = spellcastingEntry.statistic\n            const spellDc = typeof statistic.dc === 'function'\n                ? statistic.dc().value\n                : statistic.dc.value\n            const spellAttackModifier = statistic.check.mod\n            const spellAttackBonus = spellAttackModifier >= 0\n                ? `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} +${spellAttackModifier}`\n                : `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} ${spellAttackModifier}`\n            const spellDcInfo = `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.dc')}${spellDc}`\n            return `${spellAttackBonus} ${spellDcInfo}`\n        }\n\n        /**\n         * Get actors\n         * @private\n         * @returns {object}\n         */\n        #getActors () {\n            const allowedTypes = ['character', 'npc']\n            const actors = canvas.tokens.controlled.map(token => token.actor)\n            if (actors.every(actor => allowedTypes.includes(actor.type))) { return actors }\n        }\n\n        /**\n         * Is equipped item\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isEquippedItem (item) {\n            const carryTypes = ['held', 'worn']\n            const carryType = item.system.equipped?.carryType\n\n            if (this.addUnequippedItems) return true\n            if (carryTypes.includes(carryType) && !item.system.containerId?.value?.length) return true\n            return false\n        }\n\n        #isAddItem (groupType, item) {\n            if (item.system.equipped?.carryType !== 'stowed') return true\n            return this.#isAddStowedItem(groupType, item)\n        }\n\n        /**\n         * Is add stowed item\n         * @private\n         * @param {string} groupType The group type: container or nonContainer\n         * @param {object} item      The item\n         * @returns {boolean}        Whether the stowed item should be added to the group\n         */\n        #isAddStowedItem (groupType, item) {\n            if (item.system.equipped?.carryType !== 'stowed') return true\n            if (this.addStowedItems === 'both') return true\n            if (groupType === 'container' && this.addStowedItems === 'containers') return true\n            if (groupType === 'nonContainer' && this.addStowedItems === 'nonContainers') return true\n            return false\n        }\n\n        /**\n         * Get item info\n         * @private\n         * @param {object} item\n         * @returns {object}\n         */\n        #getItemInfo (item) {\n            const quantityData = this.#getQuantityData(item) ?? ''\n            return {\n                info1: { text: quantityData }\n            }\n        }\n\n        /**\n         * Get quantity\n         * @private\n         * @param {object} item\n         * @returns {string}\n         */\n        #getQuantityData (item) {\n            const quantity = item?.system?.quantity?.value\n            return (quantity > 1) ? quantity : ''\n        }\n\n        /**\n         * Get action icon\n         * @private\n         * @param {object} action\n         * @returns {string}\n         */\n        #getActionIcon (action, title = '') {\n            if (DAMAGE_TYPE_ICONS[action]) {\n                return `<i class=\"${ACTION_ICON[action]}\" data-tooltip=\"${title}\"></i>`\n            }\n            return ACTION_ICON[action]\n        }\n\n        /**\n         * Get carry type icon\n         * @private\n         * @param {object} itemData The item data\n         * @returns {string}\n         */\n        #getCarryTypeIcon (itemData) {\n            let carryType = ''\n            switch (itemData?.carryType) {\n            case 'held':\n                if (itemData?.handsHeld === 2) {\n                    carryType = 'held2'\n                } else {\n                    carryType = 'held1'\n                }\n                break\n            default:\n                carryType = itemData?.carryType\n                break\n            }\n            const tooltip = coreModule.api.Utils.i18n(CARRY_TYPE_ICON[carryType]?.tooltip) ?? ''\n            return CARRY_TYPE_ICON[carryType]?.icon.replace('placeholder', tooltip) ?? ''\n        }\n\n        /**\n         * Get tooltip data\n         * @param {object} entity     The entity\n         * @param {string} actionType The action type\n         * @returns {Promise<object>} The tooltip data\n         */\n        async #getTooltipData (entity, actionType, spellRank = null) {\n            if (this.tooltipsSetting === 'none' || !entity) return ''\n            else if (this.tooltipsSetting === 'nameOnly') return entity.name ?? ''\n\n            const itemActionTypes = ['elementalBlast', 'strike']\n\n            let chatData\n\n            if (itemActionTypes.includes(actionType)) {\n                chatData = await entity.item.getChatData()\n            } else {\n                chatData = await entity.getChatData()\n            }\n\n            if (!chatData) return ''\n\n            switch (actionType) {\n            case 'item':\n                return {\n                    name: entity.name,\n                    description: chatData.description?.value,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits,\n                    traits2: chatData.properties\n                }\n            case 'spell':\n            {\n                return {\n                    name: entity.name,\n                    description: chatData.description?.value,\n                    properties: chatData.properties,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits,\n                    traitsAlt: chatData.spellTraits\n                }\n            }\n            case 'strike':\n                return {\n                    name: entity.label,\n                    descriptionLocalised: this.#getStrikeDescription(entity),\n                    modifiers: entity.modifiers,\n                    properties: chatData.properties?.filter(property => property !== 'PF2E.WeaponTypeMartial'),\n                    traits: entity.traits,\n                    traitsAlt: entity.weaponTraits\n                }\n            default:\n                return {\n                    name: actionType === 'elementalBlast' ? entity.item.name : entity.name,\n                    description: chatData.description?.value,\n                    properties: chatData.properties,\n                    rarity: chatData.rarity,\n                    traits: chatData.traits\n                }\n            }\n        }\n\n        /**\n         * Get tooltip\n         * @private\n         * @param {string} actionType  The action type\n         * @param {object} tooltipData The tooltip data\n         * @returns {Promise<string>}  The tooltip\n         */\n        async #getTooltip (actionType, tooltipData) {\n            if (this.tooltipsSetting === 'none') return ''\n\n            const name = coreModule.api.Utils.i18n(tooltipData.name)\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            if (typeof tooltipData === 'string') return tooltipData\n\n            const nameHtml = `<h3>${name}</h3>`\n\n            const description = coreModule.api.Utils.i18n(tooltipData?.description ?? tooltipData?.descriptionLocalised ?? '')\n\n            const rarityHtml = tooltipData?.rarity\n                ? `<span class=\"tag ${tooltipData.rarity.name}\">${coreModule.api.Utils.i18n(tooltipData.rarity.label)}</span>`\n                : ''\n\n            const propertiesHtml = tooltipData?.properties\n                ? `<div class=\"tah-properties\">${tooltipData.properties.map(property => `<span class=\"tah-property\">${coreModule.api.Utils.i18n(property)}</span>`).join('')}</div>`\n                : ''\n\n            const traitsHtml = tooltipData?.traits\n                ? tooltipData.traits.map(trait => `<span class=\"tag\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const traits2Html = tooltipData?.traits2\n                ? tooltipData.traits2.map(trait => `<span class=\"tag tag_secondary\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traitsAltHtml = tooltipData?.traitsAlt\n                ? tooltipData.traitsAlt.map(trait => `<span class=\"tag tag_alt\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const modifiersHtml = tooltipData?.modifiers\n                ? `<div class=\"tags\">${tooltipData.modifiers.filter(modifier => modifier.enabled).map(modifier => {\n                    const label = coreModule.api.Utils.i18n(modifier.label)\n                    const sign = modifier.modifier >= 0 ? '+' : ''\n                    const mod = `${sign}${modifier.modifier ?? ''}`\n                    return `<span class=\"tag tag_transparent\">${label} ${mod}</span>`\n                }).join('')}</div>`\n                : ''\n\n            const tagsJoined = [rarityHtml, traitsHtml, traits2Html, traitsAltHtml].join('')\n\n            const tagsHtml = (tagsJoined) ? `<div class=\"tags\">${tagsJoined}</div>` : ''\n\n            const headerTags = (tagsHtml || modifiersHtml) ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>` : ''\n\n            if (!description && !tagsHtml && !modifiersHtml) return name\n\n            const tooltipHtml = `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`\n\n            return await TextEditor.enrichHTML(tooltipHtml, { async: true })\n        }\n\n        /**\n         * Get strike description\n         * @private\n         * @param {object} strike The strike data\n         * @returns {string}      The strike description\n         */\n        #getStrikeDescription (strike) {\n            const description = (strike?.description) ? `<p>${coreModule.api.Utils.i18n(strike?.description)}</p>` : ''\n            const criticalSuccess = (strike?.criticalSuccess) ? `<hr><h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.criticalSuccess')}</h4><p>${coreModule.api.Utils.i18n(strike?.criticalSuccess)}</p>` : ''\n            const success = (strike?.success) ? `<h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.success')}</h4><p>${coreModule.api.Utils.i18n(strike?.success)}</p>` : ''\n            return `${description}${criticalSuccess}${success}`\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'attack',\n                id: 'attack',\n                name: coreModule.api.Utils.i18n('PF2E.AttackLabel'),\n                groups: [\n                    { ...groups.attack, nestId: 'attack_attack' }\n                ]\n            },\n            {\n                nestId: 'strikes',\n                id: 'strikes',\n                name: coreModule.api.Utils.i18n('PF2E.StrikesLabel'),\n                groups: [\n                    { ...groups.toggles, nestId: 'strikes_toggles' },\n                    { ...groups.strikes, nestId: 'strikes_strikes' }\n                ],\n                settings: { customWidth: 500 }\n            },\n            {\n                nestId: 'actions',\n                id: 'actions',\n                name: coreModule.api.Utils.i18n('PF2E.ActionsActionsHeader'),\n                groups: [\n                    { ...groups.actions, nestId: 'actions_actions' },\n                    { ...groups.reactions, nestId: 'actions_reactions' },\n                    { ...groups.freeActions, nestId: 'actions_free-actions' },\n                    { ...groups.passives, nestId: 'actions_passives' }\n                ]\n            },\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('PF2E.TabInventoryLabel'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.shields, nestId: 'inventory_shields' },\n                    { ...groups.armor, nestId: 'inventory_armor' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    { ...groups.consumables, nestId: 'inventory_consumables' },\n                    { ...groups.containers, nestId: 'inventory_containers' },\n                    { ...groups.treasure, nestId: 'inventory_treasure' }\n                ]\n            },\n            {\n                nestId: 'feats',\n                id: 'feats',\n                name: coreModule.api.Utils.i18n('PF2E.Item.Feat.Plural'),\n                groups: [\n                    { ...groups.ancestryFeatures, nestId: 'feats_ancestry-features' },\n                    { ...groups.classFeatures, nestId: 'feats_class-features' },\n                    { ...groups.ancestryFeats, nestId: 'feats_ancestry-feats' },\n                    { ...groups.classFeats, nestId: 'feats_class-feats' },\n                    { ...groups.skillFeats, nestId: 'feats_skill-feats' },\n                    { ...groups.generalFeats, nestId: 'feats_general-feats' },\n                    { ...groups.bonusFeats, nestId: 'feats_bonus-feats' }\n                ]\n            },\n            {\n                nestId: 'spells',\n                id: 'spells',\n                name: coreModule.api.Utils.i18n('PF2E.Item.Spell.Plural'),\n                groups: [\n                    { ...groups.spells, nestId: 'spells_spells' }\n                ]\n            },\n            {\n                nestId: 'attributes',\n                id: 'attributes',\n                name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.attributes'),\n                groups: [\n                    { ...groups.heroPoints, nestId: 'attributes_hero-points' },\n                    { ...groups.mythicPoints, nestId: 'attributes_mythic-points' },\n                    { ...groups.initiative, nestId: 'attributes_initiative' },\n                    { ...groups.perceptionCheck, nestId: 'attributes_perception-check' },\n                    { ...groups.saves, nestId: 'attributes_saves' }\n                ]\n            },\n            {\n                nestId: 'skills',\n                id: 'skills',\n                name: coreModule.api.Utils.i18n('PF2E.SkillsLabel'),\n                groups: [\n                    { ...groups.coreSkills, nestId: 'skills_core-skills' },\n                    { ...groups.loreSkills, nestId: 'skills_lore-skills' }\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('PF2E.EffectsLabel'),\n                groups: [\n                    { ...groups.conditions, nestId: 'effects_conditions' },\n                    { ...groups.socialConditions, nestId: 'effects_social-conditions' },\n                    { ...groups.otherConditions, nestId: 'effects_other-conditions' },\n                    { ...groups.effects, nestId: 'effects_effects' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.recoveryCheck, nestId: 'utility_recovery-check' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Execute macro by ID\n         * @private\n         * @param {string} id The macro id\n         */\n        async #executeMacroById (id) {\n            game.packs.get('pf2e.pf2e-macros').getDocument(id).then((e) => e.execute())\n        }\n\n        /**\n         * Is renderable item\n         * @private\n         * @param {string} actionType The action type\n         * @return {boolean}          Whether the action is a renderable item\n         */\n        #isRenderableItem (actionType) {\n            const renderable = [\n                'action',\n                'ammo',\n                'feat',\n                'item',\n                'lore'\n            ]\n\n            return this.isRenderItem() && renderable.includes(actionType)\n        }\n\n        /**\n         * Get controlled tokens\n         * @private\n         * @return {array} The controlled tokens\n         */\n        #getControlledTokens () {\n            const actorTypes = [\n                'character',\n                'familiar',\n                'hazard',\n                'npc'\n            ]\n\n            return canvas.tokens.controlled.filter(token => actorTypes.includes(token.actor?.type))\n        }\n\n        /**\n         * Set roll options\n         * @private\n         */\n        #setRollOptions () {\n            this.rollMode = this.ctrl ? game.user.isGM ? 'gmroll' : 'blindroll' : null\n            this.showCheckDialogs = this.shift ? game.user.settings.showCheckDialogs : !game.user.settings.showCheckDialogs\n        }\n\n        /**\n         * Handle action click\n         * @override\n         * @param {object} event          The event\n         * @param {string} encodedPayload The encoded payload\n         */\n        async handleActionClick (event, encodedPayload) {\n            const payload = decodeURIComponent(encodedPayload).split('|', 2)\n\n            if (payload.length < 2) {\n                super.throwInvalidValueErr()\n            }\n\n            const [actionType, actionId] = payload\n\n            this.#setRollOptions()\n\n            if (this.#isRenderableItem(actionType)) {\n                return this.renderItem(this.actor, actionId)\n            }\n\n            if (this.actor) {\n                await this.#handleActions(event, actionType, this.actor, this.token, actionId)\n            } else {\n                for (const token of this.#getControlledTokens()) {\n                    await this.#handleActions(event, actionType, token.actor, token, actionId)\n                }\n            }\n        }\n\n        /**\n         * Handle action hover\n         * @override\n         * @param {object} event          The event\n         * @param {string} encodedPayload The encoded payload\n         */\n        async handleActionHover (event, encodedPayload) {\n            const payload = decodeURIComponent(encodedPayload).split('|', 2)\n\n            if (payload.length < 2) {\n                return\n            }\n\n            const [actionType, actionData] = payload\n\n            if (!this.actor) return\n\n            // Currently, only the following action types are handled.\n            const actionTypes = [\n                'action',\n                'elementalBlast',\n                'familiarAttack',\n                'feat',\n                'item',\n                'spell',\n                'strike'\n            ]\n\n            if (!actionTypes.includes(actionType)) return\n\n            let item\n\n            switch (actionType) {\n            case 'elementalBlast':\n                {\n                    // blastId, blastElement, blastValue, blastType\n                    const [blastId, blastElement] = actionData.split('>', 2)\n                    const blast = coreModule.api.Utils.getItem(this.actor, blastId)\n                    item = blast?.rules.find(rule => rule.value?.element === blastElement)\n                }\n                break\n            case 'familiarAttack':\n                item = this.actor.system.attack\n                break\n            case 'spell':\n                {\n                    // spellcastingEntry, rank, spellId\n                    const [, , spellId] = actionData.split('>', 3)\n                    item = coreModule.api.Utils.getItem(this.actor, spellId)\n                }\n                break\n            case 'strike':\n                {\n                    // strikeId, strikeName, strikeValue, strikeType\n                    const [strikeId] = actionData.split('>', 1)\n                    if (strikeId === 'xxPF2ExUNARMEDxx') {\n                        item = this.actor.system.actions.find(action => action.item?.id === 'xxPF2ExUNARMEDxx').item\n                    } else {\n                        item = coreModule.api.Utils.getItem(this.actor, strikeId)\n                    }\n                }\n                break\n            default:\n                {\n                    const [actionId] = actionData.split('>', 1)\n                    item = coreModule.api.Utils.getItem(this.actor, actionId)\n                }\n                break\n            }\n\n            if (!item) return\n\n            if (event.type === 'mouseenter') {\n                Hooks.call('tokenActionHudSystemActionHoverOn', event, item)\n            } else {\n                Hooks.call('tokenActionHudSystemActionHoverOff', event, item)\n            }\n        }\n\n        /**\n         * Handle actions\n         * @private\n         * @param {object} event      The event\n         * @param {string} actionType The action type\n         * @param {object} actor      The actor\n         * @param {object} token      The token\n         * @param {string} actionId   The action id\n         */\n        async #handleActions (event, actionType, actor, token, actionId) {\n            switch (actionType) {\n            case 'action':\n                this.#rollItemMacro(event, actor, actionId)\n                break\n            case 'condition':\n                this.#adjustCondition(actor, actionId)\n                break\n            case 'effect':\n                this.#adjustEffect(actor, actionId)\n                break\n            case 'elementalBlast':\n                await this.#rollElementalBlast(event, actor, actionId)\n                break\n            case 'elementalBlastDamageType':\n                this.#setElementalBlastDamageType(actor, actionId)\n                break\n            case 'familiarAttack':\n                this.#rollFamiliarAttack(actor)\n                break\n            case 'feat':\n                this.#rollItemMacro(event, actor, actionId)\n                break\n             case 'heroAction':\n                 this.#performHeroAction(actor, actionId)\n                 break\n            case 'heroPoints':\n                await this.#adjustResources(actor, 'heroPoints', 'value')\n                break\n            case 'mythicPoints':\n                await this.#adjustResources(actor, 'mythicPoints', 'value')\n                break\n            case 'initiative':\n                this.#rollInitiative(actor, actionId)\n                break\n            case 'item':\n                this.#rollItemMacro(event, actor, actionId)\n                break\n            case 'perceptionCheck':\n                this.#rollPerception(actor)\n                break\n            case 'recoveryCheck':\n                this.#rollRecovery(event, actor)\n                break\n            case 'save':\n                this.#rollSave(actor, actionId)\n                break\n            case 'spell':\n                await this.#rollSpell(actor, actionId)\n                break\n            case 'spellSlot':\n                await this.#adjustSpellSlot(actor, actionId)\n                break\n            case 'skill':\n                await this.#rollSkill(event, actor, actionId)\n                break\n            case 'strike':\n                this.#rollStrike(event, actor, actionId)\n                break\n            case 'strikeAuxiliaryAction':\n                this.#performStrikeAuxiliaryAction(actor, actionId)\n                break\n            case 'toggle':\n                await this.#performToggleAction(actor, actionId)\n                break\n            case 'utility':\n                this.#performUtilityAction(token, actionId)\n                break\n            case 'versatileOption':\n                this.#performVersatileOption(actor, actionId)\n                break\n            }\n        }\n\n        /**\n         * Roll item macro\n         * @private\n         * @param {string} actionId The action id\n         */\n        #rollItemMacro (event, actor, actionId) {\n            const item = actor?.items?.get(actionId)\n            if (item) {\n                if (!item.system.selfEffect && !item.system.frequency) {\n                    item.toMessage(event)\n                }\n                else {\n                    game.pf2e.rollItemMacro(actionId)\n                }\n            }\n        }\n\n        /**\n         * Adjust condition\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #adjustCondition (actor, actionId) {\n            this.rightClick ? actor.decreaseCondition(actionId) : actor.increaseCondition(actionId)\n        }\n\n        /**\n         * Adjust effect\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #adjustEffect (actor, actionId) {\n            const effect = coreModule.api.Utils.getItem(actor, actionId)\n\n            if (!effect) return\n\n            this.rightClick ? effect.decrease() : effect.increase()\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll elemental blast\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #rollElementalBlast (event, actor, actionId) {\n            const [itemId, element, type, usage] = decodeURIComponent(actionId).split('>', 4)\n\n            const blasts = new game.pf2e.ElementalBlast(actor)\n            const blast = blasts.configs.find(blast => blast.item.id === itemId && blast.element === element)\n            const damageType = blast.damageTypes.find(damageType => damageType.selected)?.value ?? element\n            const melee = usage === 'melee'\n            const outcome = type === 'damage' ? 'success' : 'criticalSuccess'\n\n            switch (type) {\n            case 'damage':\n            case 'critical':\n                await blasts.damage({ element, damageType, melee, outcome, event })\n                break\n            default:\n                await blasts.attack({ mapIncreases: type, element, damageType, melee, event })\n                break\n            }\n        }\n\n        /**\n         * Set elemental blast damage type\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #setElementalBlastDamageType (actor, actionId) {\n            // itemId, element, damageType\n            const [, element, damageType] = decodeURIComponent(actionId).split('>', 3)\n\n            const blasts = new game.pf2e.ElementalBlast(actor)\n            blasts.setDamageType({ element, damageType })\n        }\n\n        /**\n         * Roll familiar attack\n         * @private\n         * @param {object} actor  The actor\n         */\n        #rollFamiliarAttack (actor) {\n            actor.attackStatistic.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\n        }\n\n        /**\n         * Perform hero action\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #performHeroAction (actor, actionId) {\n            switch (actionId) {\n            case actionId === 'drawHeroActions':\n                await game.modules.get('pf2e-hero-actions')?.api?.drawHeroActions(actor)\n                break\n            case actionId === 'useHeroAction':\n                await game.modules.get('pf2e-hero-actions')?.api?.useHeroAction(actor, actionId)\n                break\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Adjust resources\n         * @private\n         * @param {object} actor     The actor\n         * @param {string} resource  The resource\n         * @param {string} valueName The value name\n         */\n        async #adjustResources (actor, resource, valueName) {\n            let value = actor.system.resources[resource][valueName]\n\n            if (this.rightClick) {\n                if (value > 0) {\n                    value--\n                }\n            } else {\n                if (value < actor.system.resources[resource].max) {\n                    value++\n                }\n            }\n\n            switch (resource) {\n            case \"heroPoints\":\n                await actor.update({ \"system.resources.heroPoints.value\": value })\n                break\n            case \"mythicPoints\":\n                await actor.update({ \"system.resources.mythicPoints.value\": value })\n                break\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll initiative\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #rollInitiative (actor, actionId) {\n            if (actor.inCombat && actor.combatant?.initiative) {\n                coreModule.api.Logger.info(game.i18n.format('PF2E.Encounter.AlreadyRolled', { actor: actor.name }), true)\n            } else {\n                await actor.update({ 'system.initiative.statistic': actionId })\n\n                actor.initiative.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\n            }\n        }\n\n        /**\n         * Roll perception\n         * @private\n         * @param {object} actor The actor\n         */\n        #rollPerception (actor) {\n            actor.perception.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\n        }\n\n        /**\n         * Roll recovery\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         */\n        #rollRecovery (event, actor) {\n            actor.rollRecovery({ event })\n        }\n\n        /**\n         * Roll save\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollSave (actor, actionId) {\n            actor.saves[actionId].check.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\n        }\n\n        /**\n         * Roll skill\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #rollSkill (event, actor, actionId) {\n            await actor.skills[actionId].check.roll({ event })\n        }\n\n        /**\n         * Roll spell\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #rollSpell (actor, actionId) {\n            const [spellbookId, level, spellId, expend] = decodeURIComponent(actionId).split('>', 4)\n\n            if (this.isRenderItem()) {\n                return this.renderItem(actor, spellId)\n            }\n\n            const spellbook = actor.items.get(spellbookId)\n            const spell = actor.items.get(spellId)\n\n            if (!spellbook || !spell) return\n\n            await spellbook.cast(spell, { message: !expend, consume: true, rank: Number(level) })\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Adjust spell slot\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #adjustSpellSlot (actor, actionId) {\n            const [spellbookId, slot, effect] = decodeURIComponent(actionId).split('>', 3)\n\n            const spellbook = actor.items.get(spellbookId)\n\n            if (!spellbook && slot !== 'focus') return\n\n            let value, max\n\n            if (slot === 'focus') {\n                value = actor.system.resources.focus.value\n                max = actor.system.resources.focus.max\n            } else {\n                value = spellbook.system.slots[slot].value\n                max = spellbook.system.slots[slot].max\n            }\n\n            switch (effect) {\n            case 'slotIncrease':\n                if (value < max) {\n                    value++\n                }\n                break\n            case 'slotDecrease':\n                if (value > 0) {\n                    value--\n                }\n            }\n\n            if (slot === 'focus') {\n                actor.update({ 'system.resources.focus.value': value })\n            } else {\n                await Item.updateDocuments([{ _id: spellbook.id, data: { slots: { [slot]: { value } } } }], { parent: actor })\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll strike\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollStrike (event, actor, actionId) {\n            const [itemId, slug, strikeType, usage] = decodeURIComponent(actionId).split('>', 4)\n\n            let strike = actor.system.actions\n                .filter(action => action.type === 'strike')\n                .find(strike => strike.item.id === itemId && strike.slug === slug)\n\n            if (this.isRenderItem() && strike.item?.id !== 'xxPF2ExUNARMEDxx') {\n                return this.renderItem(actor, strike.item.id)\n            }\n\n            let altUsage\n\n            if (strike.altUsages?.length) {\n                switch (true) {\n                case usage === 'melee' && !strike.item.isMelee:\n                    altUsage = usage\n                    strike = strike.altUsages.find(strike => strike.item.isMelee)\n                    break\n                case usage === 'ranged' && !strike.item.isRanged:\n                    altUsage = usage\n                    strike = strike.altUsages.find(strike => strike.item.isRanged)\n                    break\n                case usage === 'thrown' && !strike.item.isThrown:\n                    altUsage = usage\n                    strike = strike.altUsages.find(strike => strike.item.isThrown)\n                    break\n                }\n            }\n\n            switch (strikeType) {\n            case 'damage':\n                strike.damage({ event })\n                break\n            case 'critical':\n                strike.critical({ event })\n                break\n            default:\n                strike.variants[strikeType]?.roll({ event, altUsage })\n                break\n            }\n        }\n\n        /**\n         * Perform strike auxiliary action\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #performStrikeAuxiliaryAction (actor, actionId) {\n            const [itemId, slug, strikeType, selection] = decodeURIComponent(actionId).split('>', 4)\n\n            const strike = actor.system.actions\n                .filter(action => action.type === 'strike')\n                .find(strike => strike.item.id === itemId && strike.slug === slug)\n\n            if (!strike) return\n\n            if (strike.origin && this.isRenderItem()) {\n                this.renderItem(actor, strike.origin.id)\n            } else {\n                strike.auxiliaryActions[strikeType]?.execute({ selection })\n            }\n        }\n\n        /**\n         * Perform toggle action\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #performToggleAction (actor, actionId) {\n            const [domain, option, itemId, suboptionValue] = decodeURIComponent(actionId).split('>', 4)\n\n            if (!domain || !option) return\n\n            const toggles = Object.values(this.actor.synthetics.toggles).flatMap(domain => Object.values(domain))\n\n            const toggle = toggles.find(t => t.domain === domain && t.option === option && t.itemId === itemId)\n\n            if (!toggle) return\n\n            const value = !toggle.enabled || !toggle.checked || (suboptionValue && !toggle.suboptions.find(s => s.value === suboptionValue)?.selected)\n\n            await actor.toggleRollOption(domain, option, itemId, value, suboptionValue)\n        }\n\n        /**\n         * Perform utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #performUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'treatWounds':\n                this.#executeMacroById('6duZj0Ygiqv712rq')\n                break\n            case 'rest':\n                this.#executeMacroById('0GU2sdy3r2MeC56x')\n                break\n            case 'takeBreather':\n                this.#executeMacroById('aS6F7PSUlS9JM5jr')\n                break\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n\n        /**\n         * Perform versatile option\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #performVersatileOption (actor, actionId) {\n            const [itemId, slug, selection] = decodeURIComponent(actionId).split('>', 3)\n\n            const action = actor.system.actions\n                .filter(action => action.type === 'strike')\n                .find(strike => strike.item.id === itemId && strike.slug === slug)\n            const weapon = action?.item\n\n            if (!weapon) return\n\n            await toggleWeaponTrait({ weapon, trait: 'versatile', selection })\n\n            // Adapted from pf2e\n            async function toggleWeaponTrait ({ weapon, trait, selection }) {\n                if (!actor?.isOfType('character')) return\n\n                const item = actor.items.get(weapon.id)\n\n                const property = trait === 'double-barrel' ? 'doubleBarrel' : trait\n                const current = item.system.traits.toggles[property].selected\n                if (current === selection) return\n\n                if (item?.isOfType('weapon') && item === weapon) {\n                    const value = property === 'doubleBarrel' ? !!selection : selection\n                    await item.update({ [`system.traits.toggles.${property}.selected`]: value })\n                } else if (item?.isOfType('weapon') && weapon.altUsageType === 'melee') {\n                    item.update({ [`system.meleeUsage.traitToggles.${trait}`]: selection })\n                } else if (trait === 'versatile' && item?.isOfType('shield')) {\n                    item.update({ 'system.traits.integrated.versatile.selected': selection })\n                } else if (trait !== 'double-barrel') {\n                    const rule = item?.rules.find(\n                        r => r.key === 'Strike' && !r.ignored && r.slug === weapon.slug\n                    )\n                    await rule?.toggleTrait({ trait, selection })\n                }\n            }\n        }\n    }\n})\n","import { MODULE } from './constants.js'\n\nexport function register (updateFunc) {\n    game.settings.register(MODULE.ID, 'calculateAttackPenalty', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.calculateAttackPenalty.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.calculateAttackPenalty.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'colorSkills', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.colorSkills.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.colorSkills.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showStrikeImages', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.showStrikeImages.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.showStrikeImages.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showStrikeNames', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.showStrikeNames.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.showStrikeNames.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showStrikeTraits', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.showStrikeTraits.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.showStrikeTraits.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'splitStrikes', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.splitStrikes.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.splitStrikes.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'addAuxiliaryActions', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addAuxiliaryActions.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addAuxiliaryActions.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'addDamageAndCritical', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addDamageAndCritical.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addDamageAndCritical.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'addStowedItems', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addStowedItems.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addStowedItems.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: String,\n        default: 'containers',\n        choices: {\n            containers: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.containers'),\n            nonContainers: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.nonContainers'),\n            both: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.both'),\n            none: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.none')\n        },\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'addUnequippedItems', {\n        name: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addUnequippedItems.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.pf2e.setting.addUnequippedItems.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /** @override */\n        getActionHandler () {\n            const actionHandler = new ActionHandler()\n            return actionHandler\n        }\n\n        /** @override */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core PF2E'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /** @override */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /** @override */\n        registerSettings (onChangeFunction) {\n            systemSettings.register(onChangeFunction)\n        }\n\n        /** @override */\n        async registerDefaults () {\n            const defaults = DEFAULTS\n            if (game.modules.get('pf2e-hero-actions')?.active) {\n                const listType = coreModule.api.Utils.i18n('tokenActionHud.group')\n                const name = coreModule.api.Utils.i18n('tokenActionHud.pf2e.heroActions')\n                defaults.groups.push(\n                    {\n                        id: 'hero-actions',\n                        name,\n                        listName: `${listType}: ${name}`,\n                        type: 'system'\n                    }\n                )\n                defaults.groups.sort((a, b) => a.id.localeCompare(b.id))\n            }\n            return defaults\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","DAMAGE_TYPE_ICONS","axe","brain","bolt","droplet","fire","ghost","hammer","skull","snowflake","spider","sun","vial","ACTION_ICON","free","reaction","passive","A","D","T","F","R","ACTION_TYPE","action","attribute","condition","effect","familiarAttack","feat","heroAction","initiative","item","save","skill","skillAction","spell","strike","strikeAuxiliaryAction","toggle","utility","CARRY_TYPE_ICON","held1","icon","tooltip","held2","dropped","stowed","worn","ITEM_TYPE","armor","groupId","consumable","backpack","equipment","shield","treasure","weapon","MODULAR_OPTION","bludgeoning","piercing","slashing","SKILL_ABBREVIATION","acrobatics","arcana","athletics","crafting","deception","diplomacy","intimidation","medicine","nature","occultism","performance","perception","religion","society","stealth","survival","thievery","STRIKE_ICON","melee","thrown","STRIKE_USAGE","name","ranged","GROUP","attack","id","type","toggles","strikes","actions","reactions","freeActions","passives","skillActionsGrouped","listName","skillActionsUngrouped","settings","sort","weapons","shields","consumables","containers","ancestryFeatures","classFeatures","ancestryFeats","classFeats","skillFeats","generalFeats","bonusFeats","spells","heroPoints","mythicPoints","perceptionCheck","coreSkills","loreSkills","conditions","socialConditions","otherConditions","effects","combat","token","recoveryCheck","rests","saves","SKILL_ACTION","l5pbgrj8SSNtRGs8","actionCost","image","ZEWD4zcEDQwYhVT8","LXCy1iJddD95Z91s","xcrdOOiN0l6O1sIn","zn0HadZeoKDALxRu","Tu7LIRelQsiOuo1l","aDsYSdRqiC6qQIOQ","zUJ0UhuoFt5a7tiN","mNphXpAkmGsMadUv","U6WjxFPn4fUqIrfl","RZyfkw1DiqVy3JUC","sDUERv4E88G5BRPr","YWAvvDXpdW1fYPFo","nEwqNNWX6scLt4sc","T2QNEoRojMWEec4a","ooiO59Ch2QaebOmc","lkEcQQss16SIrVxM","RjfPFjqPrNve6eeh","yMTKMnaYSGtDz4wk","rCgGPEyXbzLFcio6","i95kcGLIQKOTsnv6","FlM3HvpnsZpCKawG","v3dlDjFlOmT5T2gC","k5nW4jGyXD0Oq9LR","VTg4t8kYTvXcHROq","QPsV0qi2zXm7syt6","Gj68YCVlDjc75iCP","dWcrojMk0d2WRPBq","BQTA7bL264189Xla","tbveXG4gaIoKnsWX","tikhJ2b6AMh7wQU7","LN67MgbGE8IHb2X0","PmHt7Gb5fCrlWWTr","yNry1xMZqdWHncbV","HSTkVuv0SjTNK3Xx","UKHPveLpG7hUs4D0","zjovbAeuLvyuWFKd","mkKko3CEBCyJVQw1","zkqh01BoXDVgydzo","TIlUkCzviYxdVk4E","Al5LYMMdeDcpC9Br","m4iM5r3TfvQs5Y2n","R03LRl2RBbsm6EcF","gRj7xUfcpUZQLrOC","SKILL","lore","Utils","Hooks","once","async","coreModule","getSetting","key","defaultValue","value","game","get","api","Logger","debug","setSetting","set","ActionHandler","actors","actorId","actorType","tokenId","items","groupIds","activationGroupIds","effectGroupIds","inventoryGroupIds","spellGroupIds","featureActions","inventoryActions","spellActions","mapLabel","i18n","replace","buildSystemActions","this","actor","getActors","includes","sortItemsByName","abbreviateSkills","addAuxiliaryActions","addDamageAndCritical","addStowedItems","addUnequippedItems","calculateAttackPenalty","colorSkills","showStrikeImages","showStrikeNames","showStrikeTraits","splitStrikes","buildCharacterActions","buildFamiliarActions","buildHazardActions","buildNpcActions","buildMultipleTokenActions","Promise","all","buildActions","buildCombat","buildConditions","buildEffects","buildFeats","buildHeroActions","buildPoints","buildInitiative","buildInventory","buildPerceptionCheck","buildRecoveryCheck","buildRests","buildSaves","buildSkillActions","buildSkills","buildSpells","buildStrikes","buildToggles","buildElementalBlasts","buildAttack","actionType","size","actionTypes","actionItems","Map","filter","_","itemData","system","actionsMap","actionTypeValue","groupData","map","getActionId","getActionName","getActionListName","cssClass","getActionCss","encodedValue","join","delimiter","icon1","getIcon1","img","getImage","info","getItemInfo","tooltipData","getTooltipData","getTooltip","addActions","slug","modifier","getModifier","totalModifier","info1","text","combatTypes","endTurn","current","Object","entries","combatType","limitedConditions","activeConditions","pf2e","ConditionManager","conditionId","startsWith","conditionData","activeCondition","activeConditionId","attributeValue","attributes","max","isValued","description","a","b","localeCompare","actionsTemp","reduce","acc","push","actionsOther","mythicEnabled","resources","unidentified","user","isGM","_$","featTypes","ancestryfeature","classfeature","ancestry","class","general","bonus","featsMap","category","featType","modules","active","actionTypeName","heroActions","getFlag","remainingHeroPoints","length","format","nb","localize","heroActionActions","uuid","uuidData","fromUuid","content","initiativeStatistic","statistic","fullName","abbreviatedSkills","modifiers","skills","skillData","label","getSharedSkills","skillActions","skillId","data","CONFIG","PF2E","skillList","check","mod","inventoryMap","hasQuantity","quantity","isEquippedItem","isAddItem","itemType","itemCategoryMap","categoryTypeMap","icon2","getCarryTypeIcon","has","parentGroupData","container","contents","addGroup","contentsMap","dyingValue","dying","every","saveData","actionMacros","packs","getIndex","skillActionsMap","actionMacro","_id","actionName","getActionIcon","groupName","skillsMap","rank","allSkillSets","minSkillSetSize","Math","min","skillSet","find","smallestSkill","some","spellcastingEntries","spellcastingEntry","spellbookGroupId","slugify","replacement","strict","bookGroupData","getSpellDcInfo","addGroupInfo","spellInfo","getSpellData","getSheetData","activeLevels","groups","level","spellLevel","levelGroupData","String","addSpellSlotInfo","activeSpells","activeSpell","expended","getActionEncodedValue","isCantrip","isFlexible","isFocusPool","isInnate","isPrepared","focus","slots","uses","spellSlot","maxSlots","blasts","ElementalBlast","configs","blast","damageTypeActions","strikeGroupData","usageData","strikeGroupId","element","strikeGroupName","blastTraits","traits","trait","strikeGroupListName","showTitle","damageTypes","damageType","index","encodeURIComponent","blastUsages","maps","blastUsage","usage","usageGroupId","usageGroupName","range","usageGroupListName","usageGroupImage","usageGroupShowTitle","usageGroupData","values","roll","split","damageId","damageName","systemSelected","criticalId","criticalName","shift","auxiliaryActions","versatileOptionActions","strikeTraits","weaponTraits","imageUrl","flatMap","auxiliaryAction","purpose","modularOptions","modular","options","modularSelection","selection","modularOption","selected","glyph","ready","versatileOptions","versatileOption","encodedId","strikeUsages","altUsages","strikeUsage","isMelee","isThrown","isRanged","attackRollType","usageGroupIcon","variants","variant","selectedAmmoId","ammunition","synthetics","domain","togglesWithoutSuboptions","suboptions","togglesWithSuboptions","option","itemId","subgroupName","subgroupListName","subgroupData","suboption","enabled","checked","entity","hasOwn","disabled","spellcastingId","spellcasting","actionsCost","parseInt","timeValue","time","actionIcon","iconType","spellDc","dc","spellAttackModifier","allowedTypes","canvas","tokens","controlled","carryType","equipped","containerId","groupType","isAddStowedItem","getQuantityData","title","handsHeld","spellRank","tooltipsSetting","chatData","getChatData","rarity","traits2","properties","traitsAlt","spellTraits","descriptionLocalised","getStrikeDescription","property","nameHtml","rarityHtml","propertiesHtml","traitsHtml","traits2Html","traitsAltHtml","modifiersHtml","tagsJoined","tagsHtml","tooltipHtml","TextEditor","enrichHTML","criticalSuccess","success","DEFAULTS","forEach","group","groupsArray","layout","nestId","customWidth","RollHandler","register","updateFunc","hint","scope","config","Boolean","default","onChange","choices","nonContainers","both","none","executeMacroById","getDocument","then","e","execute","isRenderableItem","isRenderItem","getControlledTokens","actorTypes","setRollOptions","rollMode","ctrl","showCheckDialogs","handleActionClick","event","encodedPayload","payload","decodeURIComponent","super","throwInvalidValueErr","actionId","renderItem","handleActions","handleActionHover","actionData","blastId","blastElement","getItem","rules","rule","spellId","strikeId","call","rollItemMacro","adjustCondition","adjustEffect","rollElementalBlast","setElementalBlastDamageType","rollFamiliarAttack","performHeroAction","adjustResources","rollInitiative","rollPerception","rollRecovery","rollSave","rollSpell","adjustSpellSlot","rollSkill","rollStrike","performStrikeAuxiliaryAction","performToggleAction","performUtilityAction","performVersatileOption","selfEffect","frequency","toMessage","rightClick","decreaseCondition","increaseCondition","decrease","increase","callAll","outcome","damage","mapIncreases","setDamageType","attackStatistic","skipDialog","drawHeroActions","useHeroAction","resource","valueName","update","inCombat","combatant","spellbookId","expend","spellbook","cast","message","consume","Number","slot","Item","updateDocuments","parent","strikeType","altUsage","critical","origin","suboptionValue","t","s","toggleRollOption","nextTurn","toggleWeaponTrait","isOfType","altUsageType","r","ignored","toggleTrait","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","onChangeFunction","systemSettings.register","registerDefaults","defaults","listType","on","module","requiredCoreModuleVersion"],"mappings":"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"}