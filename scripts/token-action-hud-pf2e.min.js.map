{"version":3,"file":"token-action-hud-pf2e.min.js","sources":["constants.js","defaults.js","utils.js","action-handler.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\r\n * Module-based constants\r\n */\r\nexport const MODULE = {\r\n    ID: 'token-action-hud-pf2e'\r\n}\r\n\r\n/**\r\n * Core module\r\n */\r\nexport const CORE_MODULE = {\r\n    ID: 'token-action-hud-core'\r\n}\r\n\r\n/**\r\n * Core module version required by the system module\r\n */\r\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0'\r\n\r\n/**\r\n * Damage type icons\r\n */\r\nexport const DAMAGE_TYPE_ICONS = {\r\n    axe: 'fa-solid fa-axe fa-fw',\r\n    brain: 'fa-solid fa-brain fa-fw',\r\n    bolt: 'fa-solid fa-bolt fa-fw',\r\n    'bow-arrow': 'fa-solid fa-bow-arrow fa-fw',\r\n    droplet: 'fa-solid fa-droplet fa-fw',\r\n    fire: 'fa-solid fa-fire fa-fw',\r\n    ghost: 'fa-solid fa-ghost fa-fw',\r\n    hammer: 'fa-solid fa-hammer fa-fw',\r\n    skull: 'fa-solid fa-skull fa-fw',\r\n    snowflake: 'fa-solid fa-snowflake fa-fw',\r\n    spider: 'fa-solid fa-spider fa-fw',\r\n    sun: 'fa-solid fa-sun fa-fw',\r\n    vial: 'fa-solid fa-vial fa-fw',\r\n    'waveform-lines': 'fa-solid fa-waveform-lines fa-fw'\r\n}\r\n\r\n/**\r\n * Action icons\r\n */\r\nexport const ACTION_ICON = {\r\n    1: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\r\n    2: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\r\n    3: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\r\n    free: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\r\n    reaction: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\r\n    passive: '',\r\n    A: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>A</span>',\r\n    D: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>D</span>',\r\n    T: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>T</span>',\r\n    F: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>F</span>',\r\n    R: '<span style=\\'font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);\\'>R</span>',\r\n    ...DAMAGE_TYPE_ICONS\r\n}\r\n\r\n/**\r\n * Action type\r\n */\r\nexport const ACTION_TYPE = {\r\n    action: 'TYPES.Item.action',\r\n    attribute: 'tokenActionHud.pf2e.attribute',\r\n    condition: 'TYPES.Item.condition',\r\n    effect: 'TYPES.Item.effect',\r\n    familiarAttack: 'PF2E.AttackLabel',\r\n    feat: 'PF2E.Item.Feat.LevelLabel',\r\n    heroAction: 'tokenActionHud.pf2e.heroAction',\r\n    initiative: 'PF2E.InitiativeLabel',\r\n    item: 'PF2E.ItemTitle',\r\n    save: 'tokenActionHud.pf2e.save',\r\n    skill: 'PF2E.SkillLabel',\r\n    skillAction: 'tokenActionHud.pf2e.skillAction',\r\n    spell: 'TYPES.Item.spell',\r\n    strike: 'PF2E.WeaponStrikeLabel',\r\n    strikeAuxiliaryAction: 'PF2E.WeaponStrikeLabel',\r\n    toggle: 'tokenActionHud.pf2e.toggle',\r\n    utility: 'tokenActionHud.utility'\r\n}\r\n\r\n/**\r\n * Carry types icons\r\n */\r\nexport const CARRY_TYPE_ICON = {\r\n    held1: {\r\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-1 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\r\n        tooltip: 'PF2E.CarryType.held1'\r\n    },\r\n    held2: {\r\n        icon: '<span class=\"fa-stack fa-fw fa-2xs\" data-tooltip=\"placeholder\"><i class=\"fa-solid fa-hand-back-fist fa-stack-2x\"></i><i class=\"fab fa-2 fa-stack-1x\" style=\"filter: invert(1);\"></i></span>',\r\n        tooltip: 'PF2E.CarryType.held2'\r\n    },\r\n    dropped: {\r\n        icon: '<i class=\"fas fa-grip-lines fa-fw\" data-tooltip=\"placeholder\"></i>',\r\n        tooltip: 'PF2E.CarryType.dropped'\r\n    },\r\n    stowed: {\r\n        icon: '<i class=\"fas fa-box fa-fw\" data-tooltip=\"placeholder\"></i>',\r\n        tooltip: 'PF2E.CarryType.stowed'\r\n    },\r\n    worn: {\r\n        icon: '<i class=\"fas fa-tshirt fa-fw\" data-tooltip=\"placeholder\"></i>',\r\n        tooltip: 'PF2E.CarryType.worn'\r\n    }\r\n}\r\n\r\n/**\r\n * Item types\r\n */\r\nexport const ITEM_TYPE = {\r\n    armor: { groupId: 'armor' },\r\n    consumable: { groupId: 'consumables' },\r\n    backpack: { groupId: 'containers' },\r\n    equipment: { groupId: 'equipment' },\r\n    shield: { groupId: 'shields' },\r\n    treasure: { groupId: 'treasure' },\r\n    weapon: { groupId: 'weapons' }\r\n}\r\n\r\n/**\r\n * Modular options\r\n */\r\nexport const MODULAR_OPTION = {\r\n    bludgeoning: 'PF2E.TraitBludgeoning',\r\n    piercing: 'PF2E.TraitPiercing',\r\n    slashing: 'PF2E.TraitSlashing'\r\n}\r\n\r\n/**\r\n * Skill abbreviations\r\n */\r\nexport const SKILL_ABBREVIATION = {\r\n    acrobatics: 'acr',\r\n    arcana: 'arc',\r\n    athletics: 'ath',\r\n    crafting: 'cra',\r\n    deception: 'dec',\r\n    diplomacy: 'dip',\r\n    intimidation: 'itm',\r\n    medicine: 'med',\r\n    nature: 'nat',\r\n    occultism: 'occ',\r\n    performance: 'prf',\r\n    perception: 'per',\r\n    religion: 'rel',\r\n    society: 'soc',\r\n    stealth: 'ste',\r\n    survival: 'sur',\r\n    thievery: 'thi'\r\n}\r\n\r\n/**\r\n * Strike icons\r\n */\r\nexport const STRIKE_ICON = {\r\n    melee: 'systems/pf2e/icons/mdi/sword.svg',\r\n    thrown: 'systems/pf2e/icons/mdi/thrown.svg'\r\n}\r\n\r\n/**\r\n * Strike usage\r\n */\r\nexport const STRIKE_USAGE = {\r\n    melee: { name: 'PF2E.WeaponRangeMelee' },\r\n    ranged: { name: 'PF2E.NPCAttackRanged' },\r\n    thrown: { name: 'PF2E.TraitThrown' }\r\n}\r\n\r\n/**\r\n * Groups\r\n */\r\nexport const GROUP = {\r\n    attack: { id: 'attack', name: 'PF2E.AttackLabel', type: 'system' },\r\n    toggles: { id: 'toggles', name: 'PF2E.TogglesLabel', type: 'system' },\r\n    strikes: { id: 'strikes', name: 'PF2E.StrikesLabel', type: 'system' },\r\n    actions: { id: 'actions', name: 'PF2E.ActionsActionsHeader', type: 'system' },\r\n    reactions: { id: 'reactions', name: 'PF2E.ActionsReactionsHeader', type: 'system' },\r\n    freeActions: { id: 'free-actions', name: 'PF2E.ActionsFreeActionsHeader', type: 'system' },\r\n    passives: { id: 'passives', name: 'PF2E.NPC.PassivesLabel', type: 'system' },\r\n    skillActionsGrouped: { id: 'skill-actions-grouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsGrouped', type: 'system' },\r\n    skillActionsUngrouped: { id: 'skill-actions-ungrouped', name: 'tokenActionHud.pf2e.skillActions', listName: 'tokenActionHud.pf2e.skillActionsUngrouped', type: 'system', settings: { sort: true } },\r\n    weapons: { id: 'weapons', name: 'tokenActionHud.pf2e.weapons', type: 'system' },\r\n    shields: { id: 'shields', name: 'tokenActionHud.pf2e.shields', type: 'system' },\r\n    armor: { id: 'armor', name: 'tokenActionHud.pf2e.armor', type: 'system' },\r\n    equipment: { id: 'equipment', name: 'tokenActionHud.pf2e.equipment', type: 'system' },\r\n    consumables: { id: 'consumables', name: 'tokenActionHud.pf2e.consumables', type: 'system' },\r\n    containers: { id: 'containers', name: 'tokenActionHud.pf2e.containers', type: 'system' },\r\n    treasure: { id: 'treasure', name: 'tokenActionHud.pf2e.treasure', type: 'system' },\r\n    ancestryFeatures: { id: 'ancestry-features', name: 'PF2E.FeaturesAncestryHeader', type: 'system' },\r\n    classFeatures: { id: 'class-features', name: 'PF2E.FeaturesClassHeader', type: 'system' },\r\n    ancestryFeats: { id: 'ancestry-feats', name: 'PF2E.FeatAncestryHeader', type: 'system' },\r\n    classFeats: { id: 'class-feats', name: 'PF2E.FeatClassHeader', type: 'system' },\r\n    skillFeats: { id: 'skill-feats', name: 'PF2E.FeatSkillHeader', type: 'system' },\r\n    generalFeats: { id: 'general-feats', name: 'PF2E.FeatGeneralHeader', type: 'system' },\r\n    bonusFeats: { id: 'bonus-feats', name: 'PF2E.FeatBonusHeader', type: 'system' },\r\n    spells: { id: 'spells', name: 'PF2E.Item.Spell.Plural', type: 'system' },\r\n    heroPoints: { id: 'hero-points', name: 'PF2E.HeroPointsLabel', type: 'system' },\r\n    initiative: { id: 'initiative', name: 'PF2E.InitiativeLabel', type: 'system' },\r\n    perceptionCheck: { id: 'perception-check', name: 'PF2E.PerceptionLabel', type: 'system' },\r\n    coreSkills: { id: 'core-skills', name: 'PF2E.CoreSkillsHeader', type: 'system' },\r\n    loreSkills: { id: 'lore-skills', name: 'PF2E.LoreSkillsHeader', type: 'system' },\r\n    conditions: { id: 'conditions', name: 'PF2E.ConditionsLabel', type: 'system' },\r\n    socialConditions: { id: 'social-conditions', name: 'tokenActionHud.pf2e.socialConditions', type: 'system' },\r\n    otherConditions: { id: 'other-conditions', name: 'tokenActionHud.pf2e.otherConditions', type: 'system' },\r\n    effects: { id: 'effects', name: 'PF2E.EffectsLabel', type: 'system' },\r\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\r\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\r\n    recoveryCheck: { id: 'recovery-check', name: 'PF2E.Check.Specific.Recovery', type: 'system' },\r\n    rests: { id: 'rests', name: 'tokenActionHud.pf2e.rests', type: 'system' },\r\n    saves: { id: 'saves', name: 'PF2E.SavesHeader', type: 'system' },\r\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\r\n}\r\n\r\n/**\r\n * Skill actions\r\n */\r\nexport const SKILL_ACTION = {\r\n    l5pbgrj8SSNtRGs8: { name: 'PF2E.Actions.AdministerFirstAid.Stabilize.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/features/feats/treat-wounds.webp' },\r\n    ZEWD4zcEDQwYhVT8: { name: 'PF2E.Actions.AdministerFirstAid.StopBleeding.Title', actionCost: 2, skill: 'medicine', image: 'systems/pf2e/icons/conditions/persistent-damage.webp' },\r\n    '55mxH0w8UkY1o3Xv': { name: 'PF2E.Actions.Balance.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-brown.webp' },\r\n    LXCy1iJddD95Z91s: { name: 'PF2E.Actions.Climb.Title', skill: 'athletics', actionCost: 1, image: 'icons/sundries/misc/ladder.webp' },\r\n    '9RNumMausgG7adgL': { name: 'PF2E.Actions.Coerce.Title', skill: 'intimidation', actionCost: 'passive', image: 'icons/skills/social/intimidation-impressing.webp' },\r\n    xcrdOOiN0l6O1sIn: { name: 'PF2E.Actions.CommandAnAnimal.Title', skill: 'nature', actionCost: 1, image: 'icons/environment/creatures/horse-white.webp' },\r\n    zn0HadZeoKDALxRu: { name: 'PF2E.Actions.ConcealAnObject.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp' },\r\n    Tu7LIRelQsiOuo1l: { name: 'PF2E.Actions.Craft.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/skills/trades/smithing-anvil-silver-red.webp' },\r\n    aDsYSdRqiC6qQIOQ: { name: 'PF2E.Actions.CreateADiversion.DistractingWords.Title', skill: 'deception', actionCost: 1, image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\r\n    zUJ0UhuoFt5a7tiN: { name: 'PF2E.Actions.CreateADiversion.Gesture.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/social/wave-halt-stop.webp' },\r\n    '1JpYPlIkjyseE9JU': { name: 'PF2E.Actions.CreateADiversion.Trick.Title', skill: 'deception', actionCost: 1, image: 'systems/pf2e/icons/spells/charming-words.webp' },\r\n    mNphXpAkmGsMadUv: { name: 'PF2E.Actions.CreateForgery.Title', skill: 'society', actionCost: 'passive', image: 'systems/pf2e/icons/spells/transcribe-moment.webp' },\r\n    U6WjxFPn4fUqIrfl: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'arcana', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-runes.webp' },\r\n    RZyfkw1DiqVy3JUC: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'occultism', actionCost: 'passive', image: 'icons/skills/trades/academics-book-study-purple.webp' },\r\n    sDUERv4E88G5BRPr: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'religion', actionCost: 'passive', image: 'systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp' },\r\n    YWAvvDXpdW1fYPFo: { name: 'PF2E.Actions.DecipherWriting.Title', skill: 'society', actionCost: 'passive', image: 'icons/skills/trades/academics-study-reading-book.webp' },\r\n    nEwqNNWX6scLt4sc: { name: 'PF2E.Actions.Demoralize.Title', skill: 'intimidation', actionCost: 1, image: 'icons/skills/social/intimidation-impressing.webp' },\r\n    T2QNEoRojMWEec4a: { name: 'PF2E.Actions.DisableDevice.Title', skill: 'thievery', actionCost: 2, image: 'systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp' },\r\n    ooiO59Ch2QaebOmc: { name: 'PF2E.Actions.Disarm.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/melee/sword-damaged-broken-glow-red.webp' },\r\n    '50Q0DYL33Kalu1BH': { name: 'PF2E.Actions.Escape.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\r\n    lkEcQQss16SIrVxM: { name: 'PF2E.Actions.Escape.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/movement/feet-winged-boots-glowing-yellow.webp' },\r\n    RjfPFjqPrNve6eeh: { name: 'PF2E.Actions.Feint.Title', skill: 'deception', actionCost: 1, image: 'icons/skills/melee/maneuver-sword-katana-yellow.webp' },\r\n    yMTKMnaYSGtDz4wk: { name: 'PF2E.Actions.ForceOpen.Title', skill: 'athletics', actionCost: 1, image: 'icons/equipment/feet/boots-armored-steel.webp' },\r\n    rCgGPEyXbzLFcio6: { name: 'PF2E.Actions.GatherInformation.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/skills/social/diplomacy-handshake.webp' },\r\n    i95kcGLIQKOTsnv6: { name: 'PF2E.Actions.Grapple.Title', skill: 'athletics', actionCost: 'passive', image: 'icons/skills/melee/unarmed-punch-fist.webp' },\r\n    FlM3HvpnsZpCKawG: { name: 'PF2E.Actions.Hide.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/features/classes/wild.webp' },\r\n    v3dlDjFlOmT5T2gC: { name: 'PF2E.Actions.HighJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/arrows-up-trio-red.webp' },\r\n    k5nW4jGyXD0Oq9LR: { name: 'PF2E.Actions.Impersonate.Title', skill: 'deception', actionCost: 'passive', image: 'icons/equipment/head/mask-carved-scream-tan.webp' },\r\n    VTg4t8kYTvXcHROq: { name: 'PF2E.Actions.Lie.Title', skill: 'deception', actionCost: 'passive', image: 'icons/magic/control/mouth-smile-deception-purple.webp' },\r\n    QPsV0qi2zXm7syt6: { name: 'PF2E.Actions.LongJump.Title', skill: 'athletics', actionCost: 2, image: 'icons/skills/movement/figure-running-gray.webp' },\r\n    '1Sj2Pz3VI2SFWqZw': { name: 'PF2E.Actions.MakeAnImpression.Title', skill: 'diplomacy', actionCost: 'passive', image: 'icons/environment/people/commoner.webp' },\r\n    '9Ul5Op5OceT9P5SS': { name: 'PF2E.Actions.ManeuverInFlight.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/commodities/biological/wing-bird-white.webp' },\r\n    Gj68YCVlDjc75iCP: { name: 'PF2E.Actions.PalmAnObject.Title', skill: 'thievery', actionCost: 1, image: 'icons/sundries/gaming/playing-cards.webp' },\r\n    dWcrojMk0d2WRPBq: { name: 'PF2E.Actions.Perform.Title', skill: 'performance', actionCost: 1, image: 'icons/skills/trades/music-singing-voice-blue.webp' },\r\n    '8YrH37NzKRuiKFbF': { name: 'PF2E.Actions.PickALock.Title', skill: 'thievery', actionCost: 2, image: 'icons/sundries/misc/lock-bronze-reinforced.webp' },\r\n    BQTA7bL264189Xla: { name: 'PF2E.Actions.Repair.Title', skill: 'crafting', actionCost: 'passive', image: 'icons/tools/smithing/anvil.webp' },\r\n    tbveXG4gaIoKnsWX: { name: 'PF2E.Actions.Request.Title', skill: 'diplomacy', actionCost: 1, image: 'icons/skills/social/thumbsup-approval-like.webp' },\r\n    tikhJ2b6AMh7wQU7: { name: 'PF2E.Actions.Seek.Title', skill: 'perception', actionCost: 1, image: 'icons/tools/scribal/magnifying-glass.webp' },\r\n    LN67MgbGE8IHb2X0: { name: 'PF2E.Actions.SenseDirection.Title', skill: 'survival', actionCost: 'passive', image: 'icons/tools/navigation/compass-brass-blue-red.webp' },\r\n    PmHt7Gb5fCrlWWTr: { name: 'PF2E.Actions.SenseMotive.Title', skill: 'perception', actionCost: 1, image: 'icons/environment/people/commoner.webp' },\r\n    yNry1xMZqdWHncbV: { name: 'PF2E.Actions.Shove.Title', skill: 'athletics', actionCost: 1, image: 'systems/pf2e/icons/spells/hydraulic-push.webp' },\r\n    HSTkVuv0SjTNK3Xx: { name: 'PF2E.Actions.Sneak.Title', skill: 'stealth', actionCost: 1, image: 'systems/pf2e/icons/conditions/unnoticed.webp' },\r\n    UKHPveLpG7hUs4D0: { name: 'PF2E.Actions.Squeeze.Title', skill: 'acrobatics', actionCost: 'passive', image: 'icons/commodities/tech/claw-mechanical.webp' },\r\n    zjovbAeuLvyuWFKd: { name: 'PF2E.Actions.Steal.Title', skill: 'thievery', actionCost: 1, image: 'icons/containers/bags/coinpouch-gold-red.webp' },\r\n    mkKko3CEBCyJVQw1: { name: 'PF2E.Actions.Subsist.Title', skill: 'society', actionCost: 'passive', image: 'icons/environment/settlement/building-rubble.webp' },\r\n    zkqh01BoXDVgydzo: { name: 'PF2E.Actions.Subsist.Title', skill: 'survival', actionCost: 'passive', image: 'icons/environment/wilderness/camp-improvised.webp' },\r\n    TIlUkCzviYxdVk4E: { name: 'PF2E.Actions.Swim.Title', skill: 'athletics', actionCost: 1, image: 'icons/creatures/fish/fish-shark-swimming.webp' },\r\n    Al5LYMMdeDcpC9Br: { name: 'PF2E.Actions.Track.Title', skill: 'survival', actionCost: 'passive', image: 'systems/pf2e/icons/conditions/observed.webp' },\r\n    m4iM5r3TfvQs5Y2n: { name: 'PF2E.Actions.TreatDisease.Title', skill: 'medicine', actionCost: 'passive', image: 'icons/magic/nature/root-vine-caduceus-healing.webp' },\r\n    R03LRl2RBbsm6EcF: { name: 'PF2E.Actions.TreatPoison.Title', skill: 'medicine', actionCost: 1, image: 'systems/pf2e/icons/effects/treat-poison.webp' },\r\n    gRj7xUfcpUZQLrOC: { name: 'PF2E.Actions.Trip.Title', skill: 'athletics', actionCost: 1, image: 'icons/skills/wounds/bone-broken-marrow-yellow.webp' },\r\n    '2qhYHkcSsTJoSwrJ': { name: 'PF2E.Actions.TumbleThrough.Title', skill: 'acrobatics', actionCost: 1, image: 'icons/skills/movement/feet-winged-sandals-tan.webp' }\r\n}\r\n\r\n/**\r\n * Skills\r\n */\r\nexport const SKILL = {\r\n    acrobatics: { name: 'PF2E.SkillAcrobatics' },\r\n    arcana: { name: 'PF2E.SkillArcana' },\r\n    athletics: { name: 'PF2E.SkillAthletics' },\r\n    crafting: { name: 'PF2E.SkillCrafting' },\r\n    deception: { name: 'PF2E.SkillDeception' },\r\n    diplomacy: { name: 'PF2E.SkillDiplomacy' },\r\n    intimidation: { name: 'PF2E.SkillIntimidation' },\r\n    lore: { name: 'PF2E.SkillLore' },\r\n    medicine: { name: 'PF2E.SkillMedicine' },\r\n    nature: { name: 'PF2E.SkillNature' },\r\n    occultism: { name: 'PF2E.SkillOccultism' },\r\n    perception: { name: 'PF2E.PerceptionLabel' },\r\n    performance: { name: 'PF2E.SkillPerformance' },\r\n    religion: { name: 'PF2E.SkillReligion' },\r\n    society: { name: 'PF2E.SkillSociety' },\r\n    stealth: { name: 'PF2E.SkillStealth' },\r\n    survival: { name: 'PF2E.SkillSurvival' },\r\n    thievery: { name: 'PF2E.SkillThievery' }\r\n}\r\n","import { GROUP } from './constants.js'\r\n\r\n/**\r\n * Default layout and groups\r\n */\r\nexport let DEFAULTS = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    const groups = GROUP\r\n    Object.values(groups).forEach(group => {\r\n        group.name = coreModule.api.Utils.i18n(group.name)\r\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\r\n    })\r\n    const groupsArray = Object.values(groups)\r\n    DEFAULTS = {\r\n        layout: [\r\n            {\r\n                nestId: 'attack',\r\n                id: 'attack',\r\n                name: coreModule.api.Utils.i18n('PF2E.AttackLabel'),\r\n                groups: [\r\n                    { ...groups.attack, nestId: 'attack_attack' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'strikes',\r\n                id: 'strikes',\r\n                name: coreModule.api.Utils.i18n('PF2E.StrikesLabel'),\r\n                groups: [\r\n                    { ...groups.toggles, nestId: 'strikes_toggles' },\r\n                    { ...groups.strikes, nestId: 'strikes_strikes' }\r\n                ],\r\n                settings: { customWidth: 500 }\r\n            },\r\n            {\r\n                nestId: 'actions',\r\n                id: 'actions',\r\n                name: coreModule.api.Utils.i18n('PF2E.ActionsActionsHeader'),\r\n                groups: [\r\n                    { ...groups.actions, nestId: 'actions_actions' },\r\n                    { ...groups.reactions, nestId: 'actions_reactions' },\r\n                    { ...groups.freeActions, nestId: 'actions_free-actions' },\r\n                    { ...groups.passives, nestId: 'actions_passives' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'inventory',\r\n                id: 'inventory',\r\n                name: coreModule.api.Utils.i18n('PF2E.TabInventoryLabel'),\r\n                groups: [\r\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\r\n                    { ...groups.shields, nestId: 'inventory_shields' },\r\n                    { ...groups.armor, nestId: 'inventory_armor' },\r\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\r\n                    { ...groups.consumables, nestId: 'inventory_consumables' },\r\n                    { ...groups.containers, nestId: 'inventory_containers' },\r\n                    { ...groups.treasure, nestId: 'inventory_treasure' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'feats',\r\n                id: 'feats',\r\n                name: coreModule.api.Utils.i18n('PF2E.Item.Feat.Plural'),\r\n                groups: [\r\n                    { ...groups.ancestryFeatures, nestId: 'feats_ancestry-features' },\r\n                    { ...groups.classFeatures, nestId: 'feats_class-features' },\r\n                    { ...groups.ancestryFeats, nestId: 'feats_ancestry-feats' },\r\n                    { ...groups.classFeats, nestId: 'feats_class-feats' },\r\n                    { ...groups.skillFeats, nestId: 'feats_skill-feats' },\r\n                    { ...groups.generalFeats, nestId: 'feats_general-feats' },\r\n                    { ...groups.bonusFeats, nestId: 'feats_bonus-feats' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'spells',\r\n                id: 'spells',\r\n                name: coreModule.api.Utils.i18n('PF2E.Item.Spell.Plural'),\r\n                groups: [\r\n                    { ...groups.spells, nestId: 'spells_spells' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'attributes',\r\n                id: 'attributes',\r\n                name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.attributes'),\r\n                groups: [\r\n                    { ...groups.heroPoints, nestId: 'attributes_hero-points' },\r\n                    { ...groups.initiative, nestId: 'attributes_initiative' },\r\n                    { ...groups.perceptionCheck, nestId: 'attributes_perception-check' },\r\n                    { ...groups.saves, nestId: 'attributes_saves' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'skills',\r\n                id: 'skills',\r\n                name: coreModule.api.Utils.i18n('PF2E.SkillsLabel'),\r\n                groups: [\r\n                    { ...groups.coreSkills, nestId: 'skills_core-skills' },\r\n                    { ...groups.loreSkills, nestId: 'skills_lore-skills' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'effects',\r\n                id: 'effects',\r\n                name: coreModule.api.Utils.i18n('PF2E.EffectsLabel'),\r\n                groups: [\r\n                    { ...groups.conditions, nestId: 'effects_conditions' },\r\n                    { ...groups.socialConditions, nestId: 'effects_social-conditions' },\r\n                    { ...groups.otherConditions, nestId: 'effects_other-conditions' },\r\n                    { ...groups.effects, nestId: 'effects_effects' }\r\n                ]\r\n            },\r\n            {\r\n                nestId: 'utility',\r\n                id: 'utility',\r\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\r\n                groups: [\r\n                    { ...groups.combat, nestId: 'utility_combat' },\r\n                    { ...groups.token, nestId: 'utility_token' },\r\n                    { ...groups.recoveryCheck, nestId: 'utility_recovery-check' },\r\n                    { ...groups.rests, nestId: 'utility_rests' },\r\n                    { ...groups.utility, nestId: 'utility_utility' }\r\n                ]\r\n            }\r\n        ],\r\n        groups: groupsArray\r\n    }\r\n})\r\n","import { MODULE } from './constants.js'\r\n\r\nexport let Utils = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    Utils = class Utils {\r\n        /**\r\n         * Get setting value\r\n         * @param {string} key               The key\r\n         * @param {string=null} defaultValue The default value\r\n         * @returns                          The setting value\r\n         */\r\n        static getSetting (key, defaultValue = null) {\r\n            let value = defaultValue ?? null\r\n            try {\r\n                value = game.settings.get(MODULE.ID, key)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n            return value\r\n        }\r\n\r\n        /**\r\n         * Set setting value\r\n         * @param {string} key   The key\r\n         * @param {string} value The value\r\n         */\r\n        static async setSetting (key, value) {\r\n            try {\r\n                value = await game.settings.set(MODULE.ID, key, value)\r\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\r\n            } catch {\r\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\r\n            }\r\n        }\r\n    }\r\n})\r\n","// System Module Imports\r\nimport { ACTION_ICON, ACTION_TYPE, CARRY_TYPE_ICON, ITEM_TYPE, MODULAR_OPTION, SKILL_ABBREVIATION, SKILL, SKILL_ACTION, STRIKE_ICON, STRIKE_USAGE, DAMAGE_TYPE_ICONS } from './constants.js'\r\nimport { Utils } from './utils.js'\r\n\r\nexport let ActionHandler = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\r\n        // Initialize actor and token variables\r\n        actors = null\r\n        actorId = null\r\n        actorType = null\r\n        tokenId = null\r\n\r\n        // Initialize items variable\r\n        items = null\r\n\r\n        // Initialize groupIds variables\r\n        groupIds = null\r\n        activationGroupIds = null\r\n        effectGroupIds = null\r\n        inventoryGroupIds = null\r\n        spellGroupIds = null\r\n\r\n        // Initialize action variables\r\n        featureActions = null\r\n        inventoryActions = null\r\n        spellActions = null\r\n\r\n        mapLabel = coreModule.api.Utils.i18n('PF2E.MAPAbbreviationLabel').replace(' {penalty}', '')\r\n\r\n        /**\r\n         * Build System Actions\r\n         * @override\r\n         * @param {array} groupIds\r\n         */\r\n        async buildSystemActions (groupIds) {\r\n            // Set actor and token variables\r\n            this.actors = (!this.actor) ? this.#getActors() : [this.actor]\r\n            this.actorType = this.actor?.type\r\n\r\n            // Exit if actor is not a known type\r\n            const knownActors = ['character', 'familiar', 'hazard', 'npc']\r\n            if (this.actorType && !knownActors.includes(this.actorType)) return\r\n\r\n            // Set items variable\r\n            if (this.actor) {\r\n                let items = this.actor.items\r\n                items = coreModule.api.Utils.sortItemsByName(items)\r\n                this.items = items\r\n            }\r\n\r\n            // Set settings variables\r\n            this.abbreviateSkills = Utils.getSetting('abbreviateSkills')\r\n            this.addAuxiliaryActions = Utils.getSetting('addAuxiliaryActions')\r\n            this.addDamageAndCritical = Utils.getSetting('addDamageAndCritical')\r\n            this.addStowedItems = Utils.getSetting('addStowedItems')\r\n            this.addUnequippedItems = Utils.getSetting('addUnequippedItems')\r\n            this.calculateAttackPenalty = Utils.getSetting('calculateAttackPenalty')\r\n            this.colorSkills = Utils.getSetting('colorSkills')\r\n            this.showStrikeImages = Utils.getSetting('showStrikeImages')\r\n            this.showStrikeNames = Utils.getSetting('showStrikeNames')\r\n            this.showStrikeTraits = Utils.getSetting('showStrikeTraits')\r\n            this.splitStrikes = Utils.getSetting('splitStrikes')\r\n\r\n            // Set group variables\r\n            this.groupIds = groupIds\r\n\r\n            if (this.actorType === 'character') {\r\n                await this.#buildCharacterActions()\r\n            } else if (this.actorType === 'familiar') {\r\n                await this.#buildFamiliarActions()\r\n            } else if (this.actorType === 'hazard') {\r\n                await this.#buildHazardActions()\r\n            } else if (this.actorType === 'npc') {\r\n                await this.#buildNpcActions()\r\n            } else if (!this.actor) {\r\n                this.#buildMultipleTokenActions()\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build character actions\r\n         * @private\r\n         */\r\n        async #buildCharacterActions () {\r\n            await Promise.all([\r\n                this.#buildActions(),\r\n                this.#buildCombat(),\r\n                this.#buildConditions(),\r\n                this.#buildEffects(),\r\n                this.#buildFeats(),\r\n                this.#buildHeroActions(),\r\n                this.#buildHeroPoints(),\r\n                this.#buildInitiative(),\r\n                this.#buildInventory(),\r\n                this.#buildPerceptionCheck(),\r\n                this.#buildRecoveryCheck(),\r\n                this.#buildRests(),\r\n                this.#buildSaves(),\r\n                this.#buildSkillActions(),\r\n                this.#buildSkills(),\r\n                this.#buildSpells(),\r\n                this.#buildStrikes(),\r\n                this.#buildToggles()\r\n            ])\r\n            // Build elemental blasts after other character actions so they are grouped together\r\n            await this.#buildElementalBlasts()\r\n        }\r\n\r\n        /**\r\n         * Build familiar actions\r\n         * @private\r\n         */\r\n        async #buildFamiliarActions () {\r\n            await Promise.all([\r\n                this.#buildActions(),\r\n                this.#buildAttack(),\r\n                this.#buildCombat(),\r\n                this.#buildConditions(),\r\n                this.#buildEffects(),\r\n                this.#buildInventory(),\r\n                this.#buildPerceptionCheck(),\r\n                this.#buildSaves(),\r\n                this.#buildSkills()\r\n            ])\r\n        }\r\n\r\n        /**\r\n         * Build hazard actions\r\n         * @private\r\n         */\r\n        async #buildHazardActions () {\r\n            await Promise.all([\r\n                this.#buildActions(),\r\n                this.#buildCombat(),\r\n                this.#buildInitiative(),\r\n                this.#buildSaves(),\r\n                this.#buildStrikes()\r\n            ])\r\n        }\r\n\r\n        /**\r\n         * Build NPC actions\r\n         */\r\n        async #buildNpcActions () {\r\n            await Promise.all([\r\n                this.#buildActions(),\r\n                this.#buildCombat(),\r\n                this.#buildConditions(),\r\n                this.#buildEffects(),\r\n                this.#buildFeats(),\r\n                this.#buildInitiative(),\r\n                this.#buildInventory(),\r\n                this.#buildPerceptionCheck(),\r\n                this.#buildSaves(),\r\n                this.#buildSkillActions(),\r\n                this.#buildSkills(),\r\n                this.#buildStrikes(),\r\n                this.#buildSpells(),\r\n                this.#buildToggles()\r\n            ])\r\n        }\r\n\r\n        /**\r\n         * Build multiple token actions\r\n         * @private\r\n         * @returns {object}\r\n         */\r\n        async #buildMultipleTokenActions () {\r\n            await Promise.all([\r\n                this.#buildInitiative(),\r\n                this.#buildPerceptionCheck(),\r\n                this.#buildSaves(),\r\n                this.#buildSkillActions(),\r\n                this.#buildSkills()\r\n            ])\r\n        }\r\n\r\n        /**\r\n         * Build actions\r\n         */\r\n        async #buildActions () {\r\n            const actionType = 'action'\r\n\r\n            // Exit early if no items exist\r\n            if (this.items.size === 0) return\r\n\r\n            const actionTypes = ['action', 'reaction', 'free', 'passive']\r\n\r\n            const actionItems = new Map([...this.items].filter(([_, itemData]) => itemData.type === 'action' || actionTypes.includes(itemData.system?.actionType?.value)))\r\n\r\n            const actionsMap = new Map()\r\n\r\n            for (const [key, value] of actionItems) {\r\n                // Set variables\r\n                const actionTypeValue = value.system.actionType?.value\r\n\r\n                switch (actionTypeValue) {\r\n                case 'action':\r\n                    actionsMap.set('actions', actionsMap.get('actions') || new Map())\r\n                    actionsMap.get('actions').set(key, value)\r\n                    break\r\n                case 'reaction':\r\n                    actionsMap.set('reactions', actionsMap.get('reactions') || new Map())\r\n                    actionsMap.get('reactions').set(key, value)\r\n                    break\r\n                case 'free':\r\n                    actionsMap.set('free-actions', actionsMap.get('free-actions') || new Map())\r\n                    actionsMap.get('free-actions').set(key, value)\r\n                    break\r\n                case 'passive':\r\n                    actionsMap.set('passives', actionsMap.get('passives') || new Map())\r\n                    actionsMap.get('passives').set(key, value)\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Loop through inventory subcategory ids\r\n            for (const [key, value] of actionsMap) {\r\n                const groupId = key\r\n                const items = value\r\n\r\n                // Create group data\r\n                const groupData = { id: groupId, type: 'system' }\r\n\r\n                const actions = await Promise.all(\r\n                    [...items].map(async ([_, itemData]) => {\r\n                        const id = this.#getActionId(itemData)\r\n                        const name = this.#getActionName(itemData)\r\n                        const listName = this.#getActionListName(itemData, actionType)\r\n                        const cssClass = this.#getActionCss(itemData)\r\n                        const encodedValue = [actionType, id].join(this.delimiter)\r\n                        const icon1 = this.#getIcon1(itemData, actionType)\r\n                        const img = coreModule.api.Utils.getImage(itemData)\r\n                        const info = this.#getItemInfo(itemData)\r\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\r\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n                        return {\r\n                            id,\r\n                            name,\r\n                            encodedValue,\r\n                            cssClass,\r\n                            img,\r\n                            icon1,\r\n                            info,\r\n                            listName,\r\n                            tooltip\r\n                        }\r\n                    })\r\n                )\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, groupData)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build attacks\r\n         * @private\r\n         */\r\n        #buildAttack () {\r\n            const actionType = 'familiarAttack'\r\n\r\n            const attack = this.actor.system.attack\r\n\r\n            if (attack) {\r\n                const id = attack.slug\r\n                const name = coreModule.api.Utils.i18n('PF2E.AttackLabel')\r\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                const listName = `${actionTypeName}${name}`\r\n                const encodedValue = [actionType, id].join(this.delimiter)\r\n                const modifier = coreModule.api.Utils.getModifier(attack?.totalModifier)\r\n                const info1 = this.actor ? { text: modifier } : ''\r\n\r\n                // Get actions\r\n                const actions = [{\r\n                    id,\r\n                    name,\r\n                    listName,\r\n                    encodedValue,\r\n                    info1\r\n                }]\r\n\r\n                // Create group data\r\n                const groupData = { id: 'attack', type: 'system' }\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, groupData)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build combat\r\n         */\r\n        #buildCombat () {\r\n            const actionType = 'utility'\r\n\r\n            // Set combat types\r\n            const combatTypes = {\r\n                endTurn: { id: 'endTurn', name: coreModule.api.Utils.i18n('tokenActionHud.endTurn') }\r\n            }\r\n\r\n            // Delete endTurn for multiple tokens\r\n            if (game.combat?.current?.tokenId !== this.token?.id) delete combatTypes.endTurn\r\n\r\n            // Get actions\r\n            const actions = Object.entries(combatTypes).map((combatType) => {\r\n                const id = combatType[1].id\r\n                const name = combatType[1].name\r\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                const listName = `${actionTypeName}${name}`\r\n                const encodedValue = [actionType, id].join(this.delimiter)\r\n                return {\r\n                    id,\r\n                    name,\r\n                    listName,\r\n                    encodedValue\r\n                }\r\n            })\r\n\r\n            // Create group data\r\n            const groupData = { id: 'combat', type: 'system' }\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build conditions\r\n         * @private\r\n         */\r\n        async #buildConditions () {\r\n            const actionType = 'condition'\r\n            const limitedConditions = ['doomed', 'dying', 'wounded']\r\n\r\n            // Get active conditions\r\n            const activeConditions = new Map(\r\n                [...this.items]\r\n                    .filter(item => item[1].type === actionType)\r\n                    .map(item => {\r\n                        const itemData = item[1]\r\n                        return [\r\n                            itemData.slug,\r\n                            itemData\r\n                        ]\r\n                    })\r\n            )\r\n\r\n            // Get conditions\r\n            // Conditions are duplicated in the ConditionManager and the name scaled conditions is suffixed with ' 1'\r\n            const conditions = [...game.pf2e.ConditionManager.conditions]\r\n                .filter(([conditionId]) => !conditionId.startsWith('Compendium'))\r\n                .map(([conditionId, conditionData]) => {\r\n                    conditionData.name = conditionData.name.replace(' 1', '')\r\n                    return [conditionId, conditionData]\r\n                })\r\n\r\n            // Build actions\r\n            const actions = await Promise.all(\r\n                conditions.map(async ([conditionId, conditionData]) => {\r\n                    const id = conditionData.slug\r\n                    const activeCondition = activeConditions.get(conditionId)\r\n                    const activeConditionId = activeCondition?.id\r\n                    const name = conditionData.name\r\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                    const listName = `${actionTypeName}${name}`\r\n                    const encodedValue = [actionType, id].join(this.delimiter)\r\n                    const img = coreModule.api.Utils.getImage(conditionData)\r\n                    const active = activeConditionId ? ' active' : ''\r\n                    const cssClass = `toggle${active}`\r\n                    let info1 = ''\r\n                    let attributeValue = ''\r\n\r\n                    if (activeConditionId) {\r\n                        if (limitedConditions.includes(activeCondition.slug)) {\r\n                            const attribute = this.actor.system.attributes[activeCondition.slug]\r\n                            attributeValue = attribute.value\r\n                            const max = attribute.max\r\n                            info1 = { text: (max > 0) ? `${attributeValue ?? 0}/${max}` : '' }\r\n                        } else if (activeCondition.system.value.isValued) {\r\n                            attributeValue = activeCondition.system.value.value\r\n                            info1 = { text: attributeValue }\r\n                        }\r\n                    }\r\n\r\n                    const tooltipName = `${name}${(attributeValue) ? ` ${attributeValue}` : ''}`\r\n                    const tooltipData = {\r\n                        name: tooltipName,\r\n                        description: conditionData.description\r\n                    }\r\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        listName,\r\n                        encodedValue,\r\n                        cssClass,\r\n                        img,\r\n                        info1,\r\n                        tooltip\r\n                    }\r\n                })\r\n            )\r\n\r\n            actions.sort((a, b) => a.name.localeCompare(b.name))\r\n\r\n            // Create group data\r\n            const conditionsGroupData = { id: 'conditions', type: 'system' }\r\n            const actionsTemp = []\r\n\r\n            // Add conditions to the group\r\n            await this.addActions(\r\n                actions.reduce(function (acc, current) {\r\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Malevolence', 'Unfriendly']\r\n                    if (!filter.includes(current.name)) {\r\n                        acc.push(current)\r\n                    } else {\r\n                        actionsTemp.push(current)\r\n                    }\r\n                    return acc\r\n                }, []),\r\n                conditionsGroupData\r\n            )\r\n\r\n            const socialGroupData = { id: 'social-conditions', type: 'system' }\r\n            const actionsOther = []\r\n\r\n            // Add social conditions to the group\r\n            await this.addActions(\r\n                actionsTemp.reduce(function (acc, current) {\r\n                    const filter = ['Friendly', 'Helpful', 'Hostile', 'Indifferent', 'Unfriendly']\r\n                    if (filter.includes(current.name)) {\r\n                        acc.push(current)\r\n                    } else {\r\n                        actionsOther.push(current)\r\n                    }\r\n                    return acc\r\n                }, []),\r\n                socialGroupData\r\n            )\r\n\r\n            const otherGroupData = { id: 'other-conditions', type: 'system' }\r\n\r\n            // Add other conditions to the group\r\n            await this.addActions(actionsOther, otherGroupData)\r\n        }\r\n\r\n        /**\r\n         * Build hero points\r\n         */\r\n        async #buildHeroPoints () {\r\n            const actionType = 'heroPoints'\r\n\r\n            // Create group data\r\n            const groupData = { id: 'hero-points', type: 'system' }\r\n\r\n            const heroPoints = this.actor.system.resources?.heroPoints\r\n            const value = heroPoints.value\r\n            const max = heroPoints.max\r\n\r\n            // Get actions\r\n            const actions = [{\r\n                id: 'heroPoints',\r\n                name: coreModule.api.Utils.i18n('PF2E.HeroPointsLabel'),\r\n                encodedValue: [actionType, actionType].join(this.delimiter),\r\n                info1: { text: (max > 0) ? `${value ?? 0}/${max}` : '' }\r\n            }]\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build effects\r\n         * @private\r\n         */\r\n        async #buildEffects () {\r\n            const actionType = 'effect'\r\n\r\n            // Get effects\r\n            const items = new Map([...this.items]\r\n                .filter(item =>\r\n                    item[1].type === 'effect' &&\r\n                    ((!(item[1].system?.unidentified ?? false) &&\r\n                    !(item[1].unidentified ?? false)) || game.user.isGM)))\r\n\r\n            // Create group data\r\n            const groupData = { id: 'effects', type: 'system' }\r\n\r\n            const actions = await Promise.all(\r\n                [...items].map(async ([_$, itemData]) => {\r\n                    const id = this.#getActionId(itemData)\r\n                    const name = this.#getActionName(itemData)\r\n                    const listName = this.#getActionListName(itemData, actionType)\r\n                    const cssClass = this.#getActionCss(itemData)\r\n                    const encodedValue = [actionType, id].join(this.delimiter)\r\n                    const icon1 = this.#getIcon1(itemData, actionType)\r\n                    const img = coreModule.api.Utils.getImage(itemData)\r\n                    const info = this.#getItemInfo(itemData)\r\n                    const tooltipData = {\r\n                        name,\r\n                        description: itemData.description\r\n                    }\r\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        listName,\r\n                        encodedValue,\r\n                        cssClass,\r\n                        img,\r\n                        icon1,\r\n                        info,\r\n                        tooltip\r\n                    }\r\n                })\r\n            )\r\n\r\n            actions.sort((a, b) => a.name.localeCompare(b.name))\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build Feats\r\n         * @private\r\n         */\r\n        async #buildFeats () {\r\n            const actionType = 'feat'\r\n            const featTypes = {\r\n                ancestryfeature: 'ancestry-features',\r\n                classfeature: 'class-features',\r\n                ancestry: 'ancestry-feats',\r\n                class: 'class-feats',\r\n                skill: 'skill-feats',\r\n                general: 'general-feats',\r\n                bonus: 'bonus-feats'\r\n            }\r\n\r\n            // Get feats\r\n            const featsMap = new Map()\r\n\r\n            for (const [key, value] of this.items) {\r\n                if (value.type !== 'feat') continue\r\n                // 'featType' changed to 'system.category' post pf2e 4.10+\r\n                const featType = value.system?.category ?? value.featType\r\n                const groupId = featTypes[featType]\r\n\r\n                featsMap.set(groupId, featsMap.get(groupId) || new Map())\r\n                featsMap.get(groupId).set(key, value)\r\n            }\r\n\r\n            for (const [key, value] of featsMap) {\r\n                const groupId = key\r\n                const items = value\r\n\r\n                // Get group data\r\n                const groupData = { id: groupId, type: 'system' }\r\n\r\n                const actions = await Promise.all(\r\n                    [...items].map(async ([_, itemData]) => {\r\n                        const id = this.#getActionId(itemData)\r\n                        const name = this.#getActionName(itemData)\r\n                        const listName = this.#getActionListName(itemData, actionType)\r\n                        const cssClass = this.#getActionCss(itemData)\r\n                        const encodedValue = [actionType, id].join(this.delimiter)\r\n                        const icon1 = this.#getIcon1(itemData, actionType)\r\n                        const img = coreModule.api.Utils.getImage(itemData)\r\n                        const info = this.#getItemInfo(itemData)\r\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\r\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n                        return {\r\n                            id,\r\n                            name,\r\n                            encodedValue,\r\n                            cssClass,\r\n                            img,\r\n                            icon1,\r\n                            info,\r\n                            listName,\r\n                            tooltip\r\n                        }\r\n                    })\r\n                )\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, groupData)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build Hero Actions\r\n         * @private\r\n         */\r\n        async #buildHeroActions () {\r\n            if (!game.modules.get('pf2e-hero-actions')?.active) return\r\n\r\n            const actionType = 'heroAction'\r\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionType])\r\n            const heroActions = this.actor.getFlag('pf2e-hero-actions', 'heroActions') ?? []\r\n\r\n            const groupData = { id: 'hero-actions', type: 'system' }\r\n\r\n            const actions = []\r\n\r\n            const heroPoints = this.actor.heroPoints?.value\r\n            const remainingHeroPoints = heroPoints - (heroActions?.length ?? 0)\r\n\r\n            if (remainingHeroPoints > 0) {\r\n                actions.push({\r\n                    id: 'drawHeroActions',\r\n                    name: game.i18n.format('pf2e-hero-actions.templates.heroActions.draw', { nb: remainingHeroPoints }),\r\n                    listName: `${actionTypeName}: ${game.i18n.localize('pf2e-hero-actions.templates.heroActions.draw').replace('({nb}) ', '')}`,\r\n                    encodedValue: [actionType, 'drawHeroActions'].join(this.delimiter)\r\n                })\r\n            }\r\n\r\n            const heroActionActions = await Promise.all(\r\n                [...heroActions].map(async (heroAction) => {\r\n                    const id = heroAction?.uuid\r\n                    const name = heroAction?.name\r\n                    const listName = `${actionTypeName}: ${name}`\r\n                    const encodedValue = [actionType, id].join(this.delimiter)\r\n                    const img = coreModule.api.Utils.getImage('systems/pf2e/icons/actions/Passive.webp')\r\n                    const uuidData = (heroAction?.uuid) ? await fromUuid(heroAction?.uuid) : null\r\n                    const tooltipData = {\r\n                        name,\r\n                        description: uuidData?.text?.content ?? null\r\n                    }\r\n                    const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        encodedValue,\r\n                        img,\r\n                        listName,\r\n                        tooltip\r\n                    }\r\n                })\r\n            )\r\n\r\n            actions.push(...heroActionActions)\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build initiative\r\n         * @private\r\n         */\r\n        async #buildInitiative () {\r\n            const actionType = 'initiative'\r\n\r\n            const initiativeStatistic = this.actor?.system?.initiative?.statistic ?? null\r\n\r\n            // Get actions\r\n            const actions = []\r\n\r\n            if (this.actorType !== 'hazard') {\r\n                const initiative = this.actor ? this.actor.system.initiative : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\r\n                const fullName = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\r\n                const name = this.abbreviatedSkills ? SKILL_ABBREVIATION.perception ?? fullName : fullName\r\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                const listName = `${actionTypeName}${name}`\r\n                const encodedValue = [actionType, 'perception'].join(this.delimiter)\r\n                const active = (initiativeStatistic === 'perception') ? ' active' : ''\r\n                const cssClass = `toggle${active}`\r\n                const modifier = coreModule.api.Utils.getModifier(initiative?.totalModifier)\r\n                const info1 = this.actor ? { text: modifier } : ''\r\n                const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\r\n                const tooltipData = {\r\n                    name: tooltipName,\r\n                    modifiers: initiative?.modifiers\r\n                }\r\n                const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\r\n\r\n                // Get actions\r\n                actions.push({\r\n                    id: 'initiative-perception',\r\n                    name,\r\n                    listName,\r\n                    encodedValue,\r\n                    cssClass,\r\n                    info1,\r\n                    tooltip\r\n                })\r\n            }\r\n\r\n            // Get skills\r\n            const skills = (this.actor)\r\n                ? Object.entries(this.actor.skills).filter(([_, skillData]) => !!skillData.label && skillData.label.length > 1)\r\n                : this.#getSharedSkills()\r\n\r\n            if (!skills) return\r\n\r\n            const coreSkills = []\r\n            const loreSkills = []\r\n\r\n            for (const skill of skills) {\r\n                if (!skill[1].lore) {\r\n                    coreSkills.push(skill)\r\n                } else {\r\n                    loreSkills.push(skill)\r\n                }\r\n            }\r\n\r\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\r\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\r\n\r\n            const skillActions = await Promise.all(\r\n                [...coreSkills, ...loreSkills].map(async ([skillId, skillData]) => {\r\n                    const id = `initiative-${skillId}`\r\n                    const data = skillData\r\n                    const fullName = coreModule.api.Utils.i18n(data.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\r\n                    const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[data.slug] ?? fullName : fullName\r\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                    const listName = `${actionTypeName}${name}`\r\n                    const encodedValue = [actionType, skillId].join(this.delimiter)\r\n                    const active = (initiativeStatistic === skillId) ? ' active' : ''\r\n                    const cssClass = `toggle${active}`\r\n                    const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\r\n                    const info1 = this.actor ? { text: modifier } : ''\r\n                    const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\r\n                    const tooltipData = {\r\n                        name: tooltipName,\r\n                        modifiers: skillData?.modifiers\r\n                    }\r\n                    const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\r\n\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        listName,\r\n                        encodedValue,\r\n                        cssClass,\r\n                        info1,\r\n                        tooltip\r\n                    }\r\n                })\r\n            )\r\n\r\n            actions.push(...skillActions)\r\n\r\n            // Create group data\r\n            const groupData = { id: 'initiative', type: 'system' }\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build inventory\r\n         * @private\r\n         */\r\n        async #buildInventory () {\r\n            // Exit if no items exist\r\n            if (this.items.size === 0) return\r\n\r\n            const actionType = 'item'\r\n            const inventoryMap = new Map()\r\n\r\n            for (const [key, value] of this.items) {\r\n                const hasQuantity = value.system?.quantity > 0\r\n                const isEquippedItem = this.#isEquippedItem(value)\r\n                const isAddItem = this.#isAddItem('nonContainer', value)\r\n                const type = value.type\r\n\r\n                if (hasQuantity && isAddItem) {\r\n                    const itemType = isEquippedItem ? 'equipped' : 'unequipped'\r\n                    const itemCategoryMap = inventoryMap.get(itemType) ?? new Map()\r\n                    itemCategoryMap.set(key, value)\r\n                    inventoryMap.set(itemType, itemCategoryMap)\r\n\r\n                    if (isEquippedItem) {\r\n                        const categoryTypeMap = inventoryMap.get(type) ?? new Map()\r\n                        categoryTypeMap.set(key, value)\r\n                        inventoryMap.set(type, categoryTypeMap)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Loop through inventory group ids\r\n            for (const [id, items] of inventoryMap) {\r\n                const groupId = ITEM_TYPE[id]?.groupId\r\n\r\n                if (!groupId) continue\r\n\r\n                // Create group data\r\n                const groupData = { id: groupId, type: 'system' }\r\n\r\n                // Get actions\r\n                const actions = await Promise.all(\r\n                    [...items].map(async ([_, itemData]) => {\r\n                        const id = this.#getActionId(itemData)\r\n                        const name = this.#getActionName(itemData)\r\n                        const listName = this.#getActionListName(itemData, actionType)\r\n                        const cssClass = this.#getActionCss(itemData)\r\n                        const encodedValue = [actionType, id].join(this.delimiter)\r\n                        const icon1 = this.#getIcon1(itemData, actionType)\r\n                        const icon2 = this.#getCarryTypeIcon(itemData)\r\n                        const img = coreModule.api.Utils.getImage(itemData)\r\n                        const info = this.#getItemInfo(itemData)\r\n                        const tooltipData = await this.#getTooltipData(itemData, actionType)\r\n                        const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n                        return {\r\n                            id,\r\n                            name,\r\n                            encodedValue,\r\n                            cssClass,\r\n                            img,\r\n                            icon1,\r\n                            icon2,\r\n                            info,\r\n                            listName,\r\n                            tooltip\r\n                        }\r\n                    })\r\n                )\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, groupData)\r\n            }\r\n\r\n            // Add container contents\r\n            if (inventoryMap.has('backpack')) {\r\n                // Create parent group data\r\n                const parentGroupData = { id: 'containers', type: 'system' }\r\n\r\n                const containers = inventoryMap.get('backpack')\r\n\r\n                for (const [id, container] of containers) {\r\n                    const contents = container.contents\r\n\r\n                    // Skip if container has no contents\r\n                    if (!contents.size) continue\r\n\r\n                    // Create group data\r\n                    const groupData = {\r\n                        id,\r\n                        name: container.name,\r\n                        listName: `Group: ${container.name}`,\r\n                        type: 'system-derived'\r\n                    }\r\n\r\n                    // Add group to action list\r\n                    await this.addGroup(groupData, parentGroupData)\r\n\r\n                    const contentsMap = new Map()\r\n\r\n                    for (const content of contents) {\r\n                        const isAddItem = this.#isAddItem('container', content)\r\n\r\n                        if (isAddItem) {\r\n                            contentsMap.set(content.id, content)\r\n                        }\r\n                    }\r\n\r\n                    const actions = await Promise.all(\r\n                        [...contentsMap].map(async ([_, itemData]) => {\r\n                            const id = this.#getActionId(itemData)\r\n                            const name = this.#getActionName(itemData)\r\n                            const listName = this.#getActionListName(itemData, actionType)\r\n                            const cssClass = this.#getActionCss(itemData)\r\n                            const encodedValue = [actionType, id].join(this.delimiter)\r\n                            const icon1 = this.#getIcon1(itemData, actionType)\r\n                            const icon2 = this.#getCarryTypeIcon(itemData)\r\n                            const img = coreModule.api.Utils.getImage(itemData)\r\n                            const info = this.#getItemInfo(itemData)\r\n                            const tooltipData = await this.#getTooltipData(itemData, actionType)\r\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n                            return {\r\n                                id,\r\n                                name,\r\n                                encodedValue,\r\n                                cssClass,\r\n                                img,\r\n                                icon1,\r\n                                icon2,\r\n                                info,\r\n                                listName,\r\n                                tooltip\r\n                            }\r\n                        })\r\n                    )\r\n\r\n                    // Add actions to action list\r\n                    this.addActions(actions, groupData)\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build perception check\r\n         * @private\r\n         */\r\n        async #buildPerceptionCheck () {\r\n            const actionType = 'perceptionCheck'\r\n            const perception = this.actor ? this.actor.system.perception : coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\r\n            const name = coreModule.api.Utils.i18n('PF2E.PerceptionLabel')\r\n            const modifier = coreModule.api.Utils.getModifier(perception?.totalModifier)\r\n            const info1 = this.actor ? { text: modifier } : ''\r\n            const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\r\n            const tooltipData = {\r\n                name: tooltipName,\r\n                modifiers: perception?.modifiers\r\n            }\r\n            const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n            // Get actions\r\n            const actions = [{\r\n                id: 'perception',\r\n                name,\r\n                encodedValue: [actionType, 'perception'].join(this.delimiter),\r\n                info1,\r\n                tooltip\r\n            }]\r\n\r\n            // Create group data\r\n            const groupData = { id: 'perception-check', type: 'system' }\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build recovery check\r\n         */\r\n        #buildRecoveryCheck () {\r\n            const actionType = 'recoveryCheck'\r\n            const dyingValue = this.actor?.system.attributes?.dying\r\n\r\n            if (dyingValue?.value > 0) {\r\n                // Get actions\r\n                const actions = [{\r\n                    id: actionType,\r\n                    name: coreModule.api.Utils.i18n('PF2E.Check.Specific.Recovery'),\r\n                    encodedValue: [actionType, actionType].join(this.delimiter)\r\n                }]\r\n\r\n                // Create group data\r\n                const groupData = { id: 'recovery-check', type: 'system' }\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, groupData)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build rests\r\n         */\r\n        #buildRests () {\r\n            // Exit if multiple actors and not every actor is the character type\r\n            if (!this.actor && !this.actors.every(actor => actor.type === 'character')) return\r\n\r\n            const actionType = 'utility'\r\n\r\n            // Get actions\r\n            const actions = [\r\n                {\r\n                    id: 'treatWounds',\r\n                    name: coreModule.api.Utils.i18n('PF2E.Actions.TreatWounds.Label'),\r\n                    encodedValue: [actionType, 'treatWounds'].join(this.delimiter)\r\n                },\r\n                {\r\n                    id: 'rest',\r\n                    name: coreModule.api.Utils.i18n('PF2E.Actor.Character.Rest.Label'),\r\n                    encodedValue: [actionType, 'rest'].join(this.delimiter)\r\n                }\r\n            ]\r\n\r\n            // Take a Breather\r\n            if (game.settings.get('pf2e', 'staminaVariant')) {\r\n                actions.push({\r\n                    id: 'takeBreather',\r\n                    name: coreModule.api.Utils.i18n('tokenActionHud.pf2e.takeBreather'),\r\n                    encodedValue: [actionType, 'takeBreather'].join(this.delimiter)\r\n                })\r\n            }\r\n\r\n            // Create group data\r\n            const groupData = { id: 'rests', type: 'system' }\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build saves\r\n         * @private\r\n         */\r\n        async #buildSaves () {\r\n            const actionType = 'save'\r\n\r\n            // Get saves\r\n            const saves = this.actor ? Object.entries(this.actor.saves || []) : Object.entries(CONFIG.PF2E.saves)\r\n\r\n            // Exit if no saves exist\r\n            if (!saves || saves.length === 0) return\r\n\r\n            // Get actions\r\n            const actions = await Promise.all(\r\n                saves.map(async ([id, saveData]) => {\r\n                    const name = saveData.label ?? (typeof saveData === 'string' ? coreModule.api.Utils.i18n(saveData) : '')\r\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                    const listName = `${actionTypeName}${name}`\r\n                    const encodedValue = [actionType, id].join(this.delimiter)\r\n                    const modifier = coreModule.api.Utils.getModifier(saveData.mod)\r\n                    const info1 = this.actor ? { text: modifier } : ''\r\n                    const tooltipName = `${name}${(this.actor && modifier) ? ` ${modifier}` : ''}`\r\n                    const tooltipData = {\r\n                        name: tooltipName,\r\n                        modifiers: saveData?.modifiers\r\n                    }\r\n                    const tooltip = this.actor ? await this.#getTooltip(actionType, tooltipData) : null\r\n\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        listName,\r\n                        encodedValue,\r\n                        info1,\r\n                        tooltip\r\n                    }\r\n                })\r\n            )\r\n\r\n            // Get group data\r\n            const groupData = { id: 'saves', type: 'system' }\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n        }\r\n\r\n        /**\r\n         * Build skill actions\r\n         * @private\r\n         */\r\n        async #buildSkillActions () {\r\n            const actionType = 'compendiumMacro'\r\n\r\n            // Get skill actions\r\n            const actionMacros = await game.packs.get('pf2e.action-macros').getIndex()\r\n\r\n            if (!actionMacros.size) return\r\n\r\n            const skillActionsMap = new Map()\r\n\r\n            // Get actions\r\n            const actions = []\r\n            for (const actionMacro of actionMacros) {\r\n                const skillAction = SKILL_ACTION[actionMacro._id]\r\n\r\n                if (!skillAction) continue\r\n\r\n                const id = actionMacro._id\r\n                const actionName = coreModule.api.Utils.i18n(skillAction.name)\r\n                const skillName = coreModule.api.Utils.i18n(SKILL[skillAction.skill]?.name)\r\n                const name = `${actionName} - ${skillName}`\r\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE.skillAction)}: ` ?? ''\r\n                const listName = `${actionTypeName}${name}`\r\n                const encodedValue = [actionType, 'pf2e.action-macros', id].join(this.delimiter)\r\n                const icon1 = this.#getActionIcon(skillAction.actionCost)\r\n                const img = skillAction.image\r\n                const modifier = coreModule.api.Utils.getModifier(this.actor?.skills[skillAction.skill]?.check?.mod)\r\n                const info1 = this.actor ? { text: modifier } : null\r\n\r\n                const action = {\r\n                    id,\r\n                    name,\r\n                    listName,\r\n                    encodedValue,\r\n                    icon1,\r\n                    img,\r\n                    info1\r\n                }\r\n\r\n                actions.push(action)\r\n\r\n                skillActionsMap.set(skillAction.skill, skillActionsMap.get(skillAction.skill) || new Map())\r\n                skillActionsMap.get(skillAction.skill).set(actionMacro._id, { ...action, name: actionName })\r\n            }\r\n\r\n            // Add actions to HUD\r\n            await this.addActions(actions, { id: 'skill-actions-ungrouped', type: 'system' })\r\n\r\n            for (const [key, value] of Object.entries(SKILL)) {\r\n                const groupId = key\r\n                const groupName = coreModule.api.Utils.i18n(value.name)\r\n                const skillActions = skillActionsMap.get(groupId)\r\n\r\n                if (!skillActions) continue\r\n\r\n                // Create group data\r\n                const groupData = { id: groupId, name: groupName, type: 'system-derived' }\r\n\r\n                // Add group to HUD\r\n                await this.addGroup(groupData, { id: 'skill-actions-grouped', type: 'system' })\r\n\r\n                // Get actions\r\n                const actions = [...skillActions].map(([_, skillAction]) => {\r\n                    return skillAction\r\n                })\r\n\r\n                // Add actions to HUD\r\n                await this.addActions(actions, groupData)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build skills\r\n         * @private\r\n         */\r\n        async #buildSkills () {\r\n            const actionType = 'skill'\r\n\r\n            // Get skills\r\n            const skills = (this.actor)\r\n                ? Object.entries(this.actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1)\r\n                : this.#getSharedSkills()\r\n\r\n            if (!skills) return\r\n\r\n            const coreSkills = []\r\n            const loreSkills = []\r\n\r\n            for (const skill of skills) {\r\n                if (!skill[1].lore) {\r\n                    coreSkills.push(skill)\r\n                } else {\r\n                    loreSkills.push(skill)\r\n                }\r\n            }\r\n\r\n            coreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\r\n            loreSkills.sort((a, b) => a[1].label.localeCompare(b[1].label))\r\n\r\n            const skillsMap = new Map()\r\n\r\n            skillsMap.set('skills', new Map())\r\n\r\n            if (coreSkills.length > 0) {\r\n                skillsMap.set('core-skills', new Map())\r\n            }\r\n            if (loreSkills.length > 0) {\r\n                skillsMap.set('lore-skills', new Map())\r\n            }\r\n\r\n            for (const skill of [...coreSkills, ...loreSkills]) {\r\n                if (!skill[1].lore) {\r\n                    skillsMap.get('core-skills').set(skill[0], skill[1])\r\n                } else {\r\n                    skillsMap.get('lore-skills').set(skill[0], skill[1])\r\n                }\r\n            }\r\n\r\n            // Loop through inventory subcateogry ids\r\n            for (const [key, value] of skillsMap) {\r\n                const groupId = key\r\n                const skills = value\r\n\r\n                // Create group data\r\n                const groupData = { id: groupId, type: 'system' }\r\n\r\n                // Get actions\r\n                const actions = await Promise.all(\r\n                    [...skills].map(async ([skillId, skillData]) => {\r\n                        const id = skillId\r\n                        const label = coreModule.api.Utils.i18n(skillData.label) ?? coreModule.api.Utils.i18n(CONFIG.PF2E.skillList[skillId])\r\n                        const name = this.abbreviatedSkills ? SKILL_ABBREVIATION[skillData.slug] ?? label : label\r\n                        const fullName = label\r\n                        const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n                        const listName = `${actionTypeName}${name}`\r\n                        const encodedValue = [actionType, id].join(this.delimiter)\r\n                        const cssClass = (this.actor && this.colorSkills && skillData.rank > 0) ? `tah-pf2e-skill-rank-${skillData.rank}` : ''\r\n                        const modifier = coreModule.api.Utils.getModifier(skillData.check?.mod)\r\n                        const info1 = this.actor ? { text: modifier } : ''\r\n                        const tooltipName = `${fullName}${(this.actor && modifier) ? ` ${modifier}` : ''}`\r\n                        const tooltipData = {\r\n                            name: tooltipName,\r\n                            modifiers: skillData?.modifiers\r\n                        }\r\n                        const tooltip = (this.actor) ? await this.#getTooltip(actionType, tooltipData) : null\r\n\r\n                        return {\r\n                            id,\r\n                            name,\r\n                            fullName,\r\n                            listName,\r\n                            encodedValue,\r\n                            cssClass,\r\n                            info1,\r\n                            tooltip\r\n                        }\r\n                    })\r\n                )\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, groupData)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get shared skills between all actors\r\n         * @returns {object}\r\n         */\r\n        #getSharedSkills () {\r\n            if (!this.actors) return\r\n            const allSkillSets = this.actors.map(actor => Object.entries(actor.skills).filter(skill => !!skill[1].label && skill[1].label.length > 1))\r\n            const minSkillSetSize = Math.min(...allSkillSets.map(skillSet => skillSet.length))\r\n            const smallestSkillSet = allSkillSets.find(skillSet => skillSet.length === minSkillSetSize)\r\n            return smallestSkillSet.filter(smallestSkill => allSkillSets.every(skillSet => skillSet.some(skill => skill[0] === smallestSkill[0])))\r\n        }\r\n\r\n        /**\r\n         * Build spells\r\n         * @private\r\n         */\r\n        async #buildSpells () {\r\n            const actionType = 'spell'\r\n\r\n            // Create parent group data\r\n            const parentGroupData = { id: 'spells', type: 'system' }\r\n\r\n            const spellcastingEntries = [...this.items].filter(item => item[1].type === 'spellcastingEntry')\r\n\r\n            for (const spellcastingEntry of spellcastingEntries) {\r\n                const spellbookGroupId = `spells+${spellcastingEntry[1].name.slugify({ replacement: '-', strict: true })}`\r\n                const spellbookGroupName = spellcastingEntry[1].name\r\n                const spellbookInfo1 = this.#getSpellDcInfo(spellcastingEntry[1])\r\n\r\n                // Create book group data\r\n                const bookGroupData = {\r\n                    id: spellbookGroupId,\r\n                    name: spellbookGroupName,\r\n                    type: 'system-derived',\r\n                    info1: spellbookInfo1\r\n                }\r\n\r\n                // Add group to action list\r\n                await this.addGroup(bookGroupData, parentGroupData)\r\n\r\n                // Add spell slot info to group\r\n                this.addGroupInfo(bookGroupData)\r\n\r\n                const spellInfo = await (spellcastingEntry[1].getSpellData ? spellcastingEntry[1].getSpellData() : spellcastingEntry[1].getSheetData())\r\n                const activeLevels = spellInfo.groups.filter(level => level.active.length > 0)\r\n\r\n                for (const level of Object.entries(activeLevels)) {\r\n                    const spellLevel = level[1].id\r\n                    const levelGroupId = `${spellbookGroupId}+${spellLevel}`\r\n                    const levelGroupName = String(coreModule.api.Utils.i18n(level[1].label))\r\n\r\n                    // Create level group data\r\n                    const levelGroupData = {\r\n                        id: levelGroupId,\r\n                        name: levelGroupName,\r\n                        type: 'system-derived'\r\n                    }\r\n\r\n                    // Add group to action list\r\n                    await this.addGroup(levelGroupData, bookGroupData)\r\n\r\n                    await this.#addSpellSlotInfo(bookGroupData, levelGroupData, level, spellInfo)\r\n\r\n                    // Get available spells\r\n                    const activeSpells = level[1].active\r\n                        .filter(activeSpell => activeSpell && !activeSpell.expended)\r\n                        .map(spell => spell.spell)\r\n\r\n                    const spells = new Map(activeSpells.map(spell => [spell.id, spell]))\r\n\r\n                    // Get actions\r\n                    const actions = await Promise.all(\r\n                        [...spells].map(async ([_, itemData]) => {\r\n                            const id = this.#getActionId(itemData, actionType, spellLevel)\r\n                            const name = this.#getActionName(itemData)\r\n                            const listName = this.#getActionListName(itemData, actionType)\r\n                            const cssClass = this.#getActionCss(itemData)\r\n                            const encodedValue = this.#getActionEncodedValue(itemData, actionType, spellLevel)\r\n                            const icon1 = this.#getIcon1(itemData, actionType)\r\n                            const img = coreModule.api.Utils.getImage(itemData)\r\n                            const tooltipData = await this.#getTooltipData(itemData, actionType, spellLevel)\r\n                            const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n                            return {\r\n                                id,\r\n                                name,\r\n                                listName,\r\n                                encodedValue,\r\n                                cssClass,\r\n                                img,\r\n                                icon1,\r\n                                tooltip\r\n                            }\r\n                        })\r\n                    )\r\n\r\n                    // Add actions to action list\r\n                    this.addActions(actions, levelGroupData)\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add spell slot info\r\n         * @param {object} bookGroupData  The book group data\r\n         * @param {object} levelGroupData The level group data\r\n         * @param {number} level          The level\r\n         * @param {object} spellInfo      The spell info\r\n         */\r\n        async #addSpellSlotInfo (\r\n            bookGroupData,\r\n            levelGroupData,\r\n            level,\r\n            spellInfo\r\n        ) {\r\n            const isCantrip = level[1].id === 'cantrips'\r\n            const isFlexible = spellInfo.isFlexible\r\n            const isFocusPool = spellInfo.isFocusPool\r\n            const isInnate = spellInfo.isInnate\r\n            const isPrepared = spellInfo.isPrepared\r\n\r\n            //  Exit if spells are cantrips\r\n            if (!isFocusPool && (isCantrip || isInnate)) return\r\n\r\n            if (!isFocusPool && (isPrepared && !isFlexible)) return\r\n\r\n            const actionType = 'spellSlot'\r\n            const focus = this.actor.system.resources.focus\r\n            const slots = level[1].uses\r\n            const spellSlot = (isFocusPool) ? 'focus' : `slot${level[1].id}`\r\n            const maxSlots = (spellSlot === 'focus') ? focus?.max : slots?.max\r\n            const availableSlots = (spellSlot === 'focus') ? focus?.value : slots?.value\r\n            const info1 = { text: (maxSlots >= 0) ? `${availableSlots ?? 0}/${maxSlots}` : '' }\r\n\r\n            levelGroupData.info = { info1 }\r\n\r\n            // Add group info to the group\r\n            this.addGroupInfo(levelGroupData)\r\n\r\n            const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE.spell)\r\n\r\n            // Get actions\r\n            const actions = [\r\n                {\r\n                    id: `${spellInfo.id}>${spellSlot}>slotIncrease`,\r\n                    name: '+',\r\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: +`,\r\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotIncrease`].join(this.delimiter),\r\n                    cssClass: 'shrink'\r\n                },\r\n                {\r\n                    id: `${spellInfo.id}>${spellSlot}>slotDecrease`,\r\n                    name: '-',\r\n                    listName: `${actionTypeName}: ${bookGroupData.name}: ${levelGroupData.name}: -`,\r\n                    encodedValue: [actionType, `${spellInfo.id}>${spellSlot}>slotDecrease`].join(this.delimiter),\r\n                    cssClass: 'shrink'\r\n                }\r\n            ]\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, levelGroupData)\r\n        }\r\n\r\n        /**\r\n         * Build elemental blasts\r\n         */\r\n        async #buildElementalBlasts () {\r\n            const actionType = 'elementalBlast'\r\n\r\n            // Get elemental blasts\r\n            const blasts = new game.pf2e.ElementalBlast(this.actor)?.configs\r\n\r\n            // Exit if no strikes exist\r\n            if (!blasts.length) return\r\n\r\n            // Create parent group data\r\n            const parentGroupData = { id: 'strikes', type: 'system' }\r\n\r\n            for (const blast of blasts) {\r\n                let damageTypeActions = []\r\n                let strikeGroupData = null\r\n                const usageData = []\r\n\r\n                const strikeId = `${blast.item.id}-${blast.element}`\r\n                const strikeGroupId = `strikes+${strikeId}`\r\n                const strikeGroupName = (() => {\r\n                    let groupName = coreModule.api.Utils.i18n(blast.label)\r\n                    if (this.showStrikeTraits && this.showStrikeNames) {\r\n                        const blastTraits = blast.item.system.traits.value\r\n                        if (blastTraits.length > 0) {\r\n                            groupName += ' - '\r\n                            for (const trait of blastTraits) {\r\n                                groupName += '[' + trait + ']'\r\n                            }\r\n                        }\r\n                    }\r\n                    return groupName\r\n                })()\r\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE.strike)}: ${strikeGroupName} (${blast.item.id})`\r\n                const image = blast.img ?? blast.item?.img\r\n                const showTitle = this.showStrikeNames\r\n                const tooltipData = await this.#getTooltipData(blast, actionType)\r\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n\r\n                // Create group data\r\n                strikeGroupData = { id: strikeGroupId, name: strikeGroupName, listName: strikeGroupListName, type: 'system-derived', settings: { showTitle }, tooltip }\r\n                if (this.showStrikeImages) {\r\n                    strikeGroupData.settings.image = image\r\n                }\r\n\r\n                // Add group to action list\r\n                this.addGroup(strikeGroupData, parentGroupData)\r\n\r\n                if (blast.damageTypes.length > 1) {\r\n                    // Get actions\r\n                    damageTypeActions = blast.damageTypes.map((damageType, index) => {\r\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${damageType.value}>`)\r\n                        const fullName = damageType.label\r\n                        return {\r\n                            id,\r\n                            name: '',\r\n                            fullName,\r\n                            listName: `${strikeGroupListName}: ${fullName}`,\r\n                            encodedValue: ['elementalBlastDamageType', id].join(this.delimiter),\r\n                            cssClass: this.#getActionCss(damageType),\r\n                            icon1: this.#getActionIcon(damageType.icon, fullName)\r\n                        }\r\n                    })\r\n                }\r\n\r\n                const blastUsages = Object.entries(blast.maps) ?? []\r\n\r\n                for (const [key, blastUsage] of blastUsages) {\r\n                    const usage = key\r\n                    const usageGroupId = `${strikeGroupId}+${key}`\r\n                    const usageGroupName = (() => {\r\n                        if (usage !== 'melee' && blast.range.max > 0 && blast.range.label.length > 0) {\r\n                            return blast.range.label\r\n                        } else {\r\n                            return coreModule.api.Utils.i18n(STRIKE_USAGE[key].name)\r\n                        }\r\n                    })()\r\n                    const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\r\n                    const usageGroupImage = (blastUsages.length > 1)\r\n                        ? (usage === 'melee')\r\n                            ? STRIKE_ICON.melee\r\n                            : STRIKE_ICON.thrown\r\n                        : ''\r\n                    const usageGroupShowTitle = !((usageGroupImage || blastUsages.length <= 1))\r\n                    const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\r\n\r\n                    const usageGroupData = {\r\n                        id: usageGroupId,\r\n                        name: usageGroupName,\r\n                        listName: usageGroupListName,\r\n                        type: 'system-derived',\r\n                        settings\r\n                    }\r\n\r\n                    const rolls = Object.values(blastUsage)\r\n\r\n                    const actions = rolls.map((roll, index) => {\r\n                        const id = encodeURIComponent(`${blast.item.id}>${blast.element}>${index}>` + usage)\r\n                        const isMap = `${roll}`.includes(this.mapLabel)\r\n                        let modifier\r\n                        if (isMap) {\r\n                            modifier = `${roll}`.split(' ')[0]\r\n                        } else {\r\n                            modifier = `${roll}`.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\r\n                        }\r\n                        const name = (this.calculateAttackPenalty) ? modifier : roll\r\n                        return {\r\n                            id,\r\n                            name,\r\n                            encodedValue: [actionType, id].join(this.delimiter),\r\n                            listName: `${usageGroupListName}: ${name}`\r\n                        }\r\n                    })\r\n\r\n                    // Get Damage\r\n                    const damageId = encodeURIComponent(`${blast.item.id}>${blast.element}>damage>${usage}`)\r\n                    const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\r\n                    actions.push({\r\n                        id: damageId,\r\n                        name: damageName,\r\n                        listName: `${usageGroupListName}: ${damageName}`,\r\n                        encodedValue: [actionType, damageId].join(this.delimiter),\r\n                        systemSelected: this.addDamageAndCritical\r\n                    })\r\n\r\n                    // Get Critical\r\n                    const criticalId = encodeURIComponent(`${blast.item.id}>${blast.element}>critical>${usage}`)\r\n                    const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\r\n                    actions.push({\r\n                        id: criticalId,\r\n                        name: criticalName,\r\n                        listName: `${usageGroupListName}: ${criticalName}`,\r\n                        encodedValue: [actionType, criticalId].join(this.delimiter),\r\n                        systemSelected: this.addDamageAndCritical\r\n                    })\r\n\r\n                    usageData.push({ actions, usageGroupData })\r\n                }\r\n\r\n                if (this.splitStrikes) {\r\n                    this.addActions(damageTypeActions, strikeGroupData)\r\n                    for (const usage of usageData) {\r\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\r\n                        this.addActions(usage.actions, usage.usageGroupData)\r\n                    }\r\n                } else {\r\n                    this.addActions([...(usageData[0]?.actions || []), ...damageTypeActions], strikeGroupData)\r\n                    usageData.shift()\r\n                    for (const usage of usageData) {\r\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\r\n                        this.addActions(usage.actions, usage.usageGroupData)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build strikes\r\n         */\r\n        async #buildStrikes () {\r\n            const actionType = 'strike'\r\n\r\n            // Create parent group data\r\n            const parentGroupData = { id: 'strikes', type: 'system' }\r\n\r\n            // Get strikes\r\n            const strikes = this.actor.system.actions\r\n                .filter(action => (action.type === actionType && (action.item.system.quantity > 0 || this.actor.type === 'hazard' || this.actor.type === 'npc')))\r\n\r\n            // Exit if no strikes exist\r\n            if (!strikes) return\r\n\r\n            for (const strike of strikes) {\r\n                let auxiliaryActions = []\r\n                let versatileOptionActions = []\r\n                let strikeGroupData = null\r\n                const usageData = []\r\n\r\n                const strikeId = `${strike.item.id}-${strike.slug}`\r\n                const strikeGroupId = `strikes+${strikeId}`\r\n                const strikeGroupName = (() => {\r\n                    let groupName = strike.label\r\n                    if (this.showStrikeTraits && this.showStrikeNames) {\r\n                        let strikeTraits\r\n                        if (this.actor.type === 'character') {\r\n                            strikeTraits = strike.weaponTraits\r\n                        } else {\r\n                            strikeTraits = strike.traits\r\n                        }\r\n                        if (strikeTraits.length > 0) {\r\n                            groupName += ' - '\r\n                            for (const trait of strikeTraits) {\r\n                                groupName += '[' + trait.label + ']'\r\n                            }\r\n                        }\r\n                    }\r\n                    return groupName\r\n                })()\r\n                const strikeGroupListName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ${strike.label} (${strike.item.id})`\r\n                const image = strike.imageUrl ?? strike.item?.img\r\n                const showTitle = this.showStrikeNames\r\n                const tooltipData = await this.#getTooltipData(strike, actionType)\r\n                const tooltip = await this.#getTooltip(actionType, tooltipData)\r\n                // Create group data\r\n                strikeGroupData = { id: strikeGroupId, name: strikeGroupName, listName: strikeGroupListName, type: 'system-derived', settings: { showTitle }, tooltip }\r\n                if (this.showStrikeImages) { strikeGroupData.settings.image = image }\r\n                if (typeof strikeGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) strikeGroupData.settings.sort = false\r\n\r\n                // Add group to action list\r\n                this.addGroup(strikeGroupData, parentGroupData)\r\n\r\n                if (strike.auxiliaryActions?.length && this.addAuxiliaryActions) {\r\n                    // Get actions\r\n                    auxiliaryActions = strike.auxiliaryActions.flatMap((auxiliaryAction, index) => {\r\n                        if (auxiliaryAction.purpose === 'Modular') {\r\n                            const modularOptions = strike.item.system.traits.toggles.modular.options\r\n                            const modularSelection = strike.item.system.traits.toggles.modular.selection\r\n                            return modularOptions.map(modularOption => {\r\n                                const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>${modularOption}`)\r\n                                const name = coreModule.api.Utils.i18n(MODULAR_OPTION[modularOption])\r\n                                return {\r\n                                    id,\r\n                                    name,\r\n                                    listName: `${strikeGroupListName}: ${name}`,\r\n                                    encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\r\n                                    icon1: this.#getActionIcon(auxiliaryAction.glyph),\r\n                                    cssClass: this.#getActionCss({ selected: (modularOption === modularSelection) })\r\n                                }\r\n                            })\r\n                        } else {\r\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>`)\r\n                            const name = auxiliaryAction.label\r\n                            return {\r\n                                id,\r\n                                name,\r\n                                listName: `${strikeGroupListName}: ${name}`,\r\n                                encodedValue: ['strikeAuxiliaryAction', id].join(this.delimiter),\r\n                                icon1: this.#getActionIcon(auxiliaryAction.glyph),\r\n                                info: this.#getItemInfo(auxiliaryAction)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                if (strike.ready) {\r\n                    if (strike.versatileOptions?.length) {\r\n                        // Get actions\r\n                        versatileOptionActions = strike.versatileOptions.map(versatileOption => {\r\n                            const encodedId = encodeURIComponent(`${strike.item.id}>${strike.slug}>${versatileOption.value}>`)\r\n                            const fullName = coreModule.api.Utils.i18n(versatileOption.label)\r\n                            return {\r\n                                id: encodedId,\r\n                                name: '',\r\n                                fullName,\r\n                                listName: `${strikeGroupListName}: ${fullName}`,\r\n                                encodedValue: ['versatileOption', encodedId].join(this.delimiter),\r\n                                cssClass: this.#getActionCss(versatileOption),\r\n                                icon1: this.#getActionIcon(versatileOption.glyph, fullName)\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    const strikeUsages = (strike.altUsages) ? [strike, ...strike.altUsages] : [strike]\r\n\r\n                    for (const strikeUsage of strikeUsages) {\r\n                        const glyph = strike.glyph\r\n                        const encodedUsage = `${strikeUsage.item.isMelee}_${strikeUsage.item.isThrown}_${strikeUsage.item.isRanged}`\r\n                        let usage\r\n                        switch (encodedUsage) {\r\n                        case 'true_false_false':\r\n                            usage = 'melee'\r\n                            break\r\n                        case 'false_true_true':\r\n                            usage = 'thrown'\r\n                            break\r\n                        case 'false_false_true':\r\n                            usage = 'ranged'\r\n                            break\r\n                        }\r\n                        const usageGroupId = `${strikeGroupId}+${usage}`\r\n                        const usageGroupName = (strikeUsage.attackRollType)\r\n                            ? coreModule.api.Utils.i18n(strikeUsage.attackRollType)\r\n                            : coreModule.api.Utils.i18n(STRIKE_USAGE[usage].name)\r\n                        const usageGroupListName = `${strikeGroupListName}: ${usageGroupName}`\r\n                        const usageGroupIcon = (usage !== 'thrown' && glyph)\r\n                            ? `<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>${glyph}</span>`\r\n                            : STRIKE_ICON[usage]\r\n                        const usageGroupImage = (strikeUsages.length > 1) ? STRIKE_ICON[usage] : ''\r\n                        const usageGroupShowTitle = !((usageGroupImage || strikeUsages.length <= 1))\r\n                        const settings = { showTitle: usageGroupShowTitle, image: usageGroupImage }\r\n\r\n                        const usageGroupData = {\r\n                            id: usageGroupId,\r\n                            name: usageGroupName,\r\n                            listName: usageGroupListName,\r\n                            icon: usageGroupIcon,\r\n                            type: 'system-derived',\r\n                            settings\r\n                        }\r\n\r\n                        if (typeof usageGroupData.settings.sort === 'undefined' && coreModule.api.Utils.getSetting('sortActions')) {\r\n                            usageGroupData.settings.sort = false\r\n                        }\r\n\r\n                        const actions = strikeUsage.variants.map((variant, index) => {\r\n                            const id = encodeURIComponent(`${strike.item.id}>${strike.slug}>${index}>` + usage)\r\n                            const isMap = variant.label.includes(this.mapLabel)\r\n                            const modifier = (isMap)\r\n                                ? variant.label.split(' ')[0]\r\n                                : variant.label.replace(coreModule.api.Utils.i18n('PF2E.WeaponStrikeLabel'), '').replace(' ', '')\r\n                            const name = (this.calculateAttackPenalty) ? modifier : variant.label\r\n                            return {\r\n                                id,\r\n                                name,\r\n                                encodedValue: [actionType, id].join(this.delimiter),\r\n                                listName: `${usageGroupListName}: ${name}`\r\n                            }\r\n                        })\r\n\r\n                        // Get Damage\r\n                        const damageId = encodeURIComponent(`${strike.item.id}>${strike.slug}>damage>${usage}`)\r\n                        const damageName = coreModule.api.Utils.i18n('PF2E.DamageLabel')\r\n                        actions.push({\r\n                            id: damageId,\r\n                            name: damageName,\r\n                            listName: `${usageGroupListName}: ${damageName}`,\r\n                            encodedValue: [actionType, damageId].join(this.delimiter),\r\n                            systemSelected: this.addDamageAndCritical\r\n                        })\r\n\r\n                        // Get Critical\r\n                        const criticalId = encodeURIComponent(`${strike.item.id}>${strike.slug}>critical>${usage}`)\r\n                        const criticalName = coreModule.api.Utils.i18n('PF2E.CriticalDamageLabel')\r\n                        actions.push({\r\n                            id: criticalId,\r\n                            name: criticalName,\r\n                            listName: `${usageGroupListName}: ${criticalName}`,\r\n                            encodedValue: [actionType, criticalId].join(this.delimiter),\r\n                            systemSelected: this.addDamageAndCritical\r\n                        })\r\n\r\n                        // Get Ammo\r\n                        if (strikeUsage.selectedAmmoId && !strikeUsage.ammunition) {\r\n                            const item = this.actor.items.get(strikeUsage.selectedAmmoId)\r\n\r\n                            if (!item) {\r\n                                const id = 'noAmmo'\r\n                                const name = coreModule.api.Utils.i18n('tokenActionHud.pf2e.noAmmo')\r\n                                actions.push({\r\n                                    id,\r\n                                    name,\r\n                                    listName: `${usageGroupListName}: ${name}`,\r\n                                    encodedValue: id\r\n                                })\r\n                            } else {\r\n                                const id = this.#getActionId(item)\r\n                                const name = this.#getActionName(item)\r\n                                actions.push({\r\n                                    id,\r\n                                    name,\r\n\r\n                                    listName: `${usageGroupListName}: ${name}`,\r\n                                    encodedValue: [actionType, id].join(this.delimiter)\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        usageData.push({ actions, usageGroupData })\r\n                    }\r\n                }\r\n\r\n                if (this.splitStrikes) {\r\n                    this.addActions([...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\r\n                    for (const usage of usageData) {\r\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\r\n                        this.addActions(usage.actions, usage.usageGroupData)\r\n                    }\r\n                } else {\r\n                    this.addActions([...(usageData[0]?.actions || []), ...versatileOptionActions, ...auxiliaryActions], strikeGroupData)\r\n                    usageData.shift()\r\n                    for (const usage of usageData) {\r\n                        this.addGroup(usage.usageGroupData, strikeGroupData)\r\n                        this.addActions(usage.actions, usage.usageGroupData)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Build toggles\r\n         */\r\n        #buildToggles () {\r\n            const actionType = 'toggle'\r\n\r\n            // Get toggles\r\n            const toggles = Object.values(this.actor.synthetics.toggles).flatMap(domain => Object.values(domain))\r\n\r\n            // Exit if no toggles exist\r\n            if (!toggles.length) return\r\n\r\n            const togglesWithoutSuboptions = toggles.filter(toggle => toggle.suboptions.length === 0)\r\n            const togglesWithSuboptions = toggles.filter(toggle => toggle.suboptions.length !== 0)\r\n\r\n            // Create group data\r\n            const groupData = { id: 'toggles', type: 'system' }\r\n\r\n            // Get actions\r\n            const actions = togglesWithoutSuboptions.map(toggle => {\r\n                const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>>`)\r\n                const name = coreModule.api.Utils.i18n(toggle.label)\r\n                const encodedValue = [actionType, id].join(this.delimiter)\r\n                const active = (toggle.checked) ? ' active' : ''\r\n                const cssClass = `toggle${active}`\r\n\r\n                return { id, encodedValue, name, cssClass }\r\n            })\r\n\r\n            // Add actions to action list\r\n            this.addActions(actions, groupData)\r\n\r\n            for (const toggle of togglesWithSuboptions) {\r\n                const id = [toggle.domain, toggle.option].join('.')\r\n                const subgroupName = coreModule.api.Utils.i18n(toggle.label)\r\n                const subgroupListName = `${ACTION_TYPE.toggle}: ${subgroupName}`\r\n                const subgroupData = {\r\n                    id,\r\n                    name: subgroupName,\r\n                    listName: subgroupListName,\r\n                    type: 'system-derived'\r\n                }\r\n\r\n                this.addGroup(subgroupData, groupData)\r\n\r\n                // Get actions\r\n                const actions = toggle.suboptions.map(suboption => {\r\n                    const id = encodeURIComponent(`${toggle.domain}>${toggle.option}>${toggle.itemId}>${suboption.value}`)\r\n                    const name = coreModule.api.Utils.i18n(suboption.label)\r\n                    const selected = suboption.selected && toggle.enabled && toggle.checked\r\n\r\n                    return {\r\n                        id,\r\n                        name,\r\n                        listName: `${subgroupListName}: ${name}`,\r\n                        encodedValue: ['toggle', id].join(this.delimiter),\r\n                        cssClass: this.#getActionCss({ selected })\r\n                    }\r\n                })\r\n\r\n                // Add actions to action list\r\n                this.addActions(actions, subgroupData)\r\n            }\r\n        }\r\n\r\n        #getActionId (entity, actionType, spellLevel) {\r\n            return (actionType === 'spell') ? `${entity.id ?? entity._id}-${spellLevel}` : entity.id ?? entity._id\r\n        }\r\n\r\n        #getActionName (entity) {\r\n            return entity?.name ?? entity?.label ?? ''\r\n        }\r\n\r\n        #getActionListName (entity, actionType) {\r\n            const name = this.#getActionName(entity)\r\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\r\n            return entity.listName ?? `${actionTypeName}${name}`\r\n        }\r\n\r\n        #getActionCss (entity) {\r\n            if (Object.hasOwn(entity, 'disabled')) {\r\n                const active = (!entity.disabled) ? ' active' : ''\r\n                return `toggle${active}`\r\n            }\r\n            if (Object.hasOwn(entity, 'selected')) {\r\n                const active = (entity.selected) ? ' active' : ''\r\n                return `toggle${active}`\r\n            }\r\n        }\r\n\r\n        #getActionEncodedValue (entity, actionType, spellLevel) {\r\n            const spellcastingId = entity?.spellcasting?.id\r\n            const encodedId = (actionType === 'spell') ? `${spellcastingId}>${spellLevel}>${entity.id ?? entity._id}` : this.#getActionId(entity, actionType, spellLevel)\r\n            return [actionType, encodedId].join(this.delimiter)\r\n        }\r\n\r\n        #getIcon1 (entity, actionType) {\r\n            const actions = entity.system?.actions\r\n            const actionTypes = ['free', 'reaction', 'passive']\r\n            const actionTypeValue = entity.system?.actionType?.value\r\n            const actionsCost = (actions) ? parseInt((actions || {}).value, 10) : null\r\n            const timeValue = entity.system?.time?.value\r\n            const actionIcon = entity.actionIcon\r\n            const iconType = (actionType === 'spell') ? timeValue : (actionTypes.includes(actionTypeValue)) ? actionTypeValue : actionsCost ?? actionIcon\r\n            const name = this.#getActionName(entity)\r\n            return this.#getActionIcon(iconType, name)\r\n        }\r\n\r\n        /**\r\n         * Get spell DC info\r\n         * @private\r\n         * @param {object} spellcastingEntry The spellcasting entry\r\n         * @returns {string}                 The spell DC info\r\n         */\r\n        #getSpellDcInfo (spellcastingEntry) {\r\n            const statistic = spellcastingEntry.statistic\r\n            const spellDc = typeof statistic.dc === 'function'\r\n                ? statistic.dc().value\r\n                : statistic.dc.value\r\n            const spellAttackModifier = statistic.check.mod\r\n            const spellAttackBonus = spellAttackModifier >= 0\r\n                ? `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} +${spellAttackModifier}`\r\n                : `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.atk')} ${spellAttackModifier}`\r\n            const spellDcInfo = `${coreModule.api.Utils.i18n('tokenActionHud.pf2e.dc')}${spellDc}`\r\n            return `${spellAttackBonus} ${spellDcInfo}`\r\n        }\r\n\r\n        /**\r\n         * Get actors\r\n         * @private\r\n         * @returns {object}\r\n         */\r\n        #getActors () {\r\n            const allowedTypes = ['character', 'npc']\r\n            const actors = canvas.tokens.controlled.map(token => token.actor)\r\n            if (actors.every(actor => allowedTypes.includes(actor.type))) { return actors }\r\n        }\r\n\r\n        /**\r\n         * Is equipped item\r\n         * @private\r\n         * @param {object} item\r\n         * @returns {boolean}\r\n         */\r\n        #isEquippedItem (item) {\r\n            const carryTypes = ['held', 'worn']\r\n            const carryType = item.system.equipped?.carryType\r\n\r\n            if (this.addUnequippedItems) return true\r\n            if (carryTypes.includes(carryType) && !item.system.containerId?.value?.length) return true\r\n            return false\r\n        }\r\n\r\n        #isAddItem (groupType, item) {\r\n            if (item.system.equipped?.carryType !== 'stowed') return true\r\n            return this.#isAddStowedItem(groupType, item)\r\n        }\r\n\r\n        /**\r\n         * Is add stowed item\r\n         * @private\r\n         * @param {string} groupType The group type: container or nonContainer\r\n         * @param {object} item      The item\r\n         * @returns {boolean}        Whether the stowed item should be added to the group\r\n         */\r\n        #isAddStowedItem (groupType, item) {\r\n            if (item.system.equipped?.carryType !== 'stowed') return true\r\n            if (this.addStowedItems === 'both') return true\r\n            if (groupType === 'container' && this.addStowedItems === 'containers') return true\r\n            if (groupType === 'nonContainer' && this.addStowedItems === 'nonContainers') return true\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Get item info\r\n         * @private\r\n         * @param {object} item\r\n         * @returns {object}\r\n         */\r\n        #getItemInfo (item) {\r\n            const quantityData = this.#getQuantityData(item) ?? ''\r\n            return {\r\n                info1: { text: quantityData }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get quantity\r\n         * @private\r\n         * @param {object} item\r\n         * @returns {string}\r\n         */\r\n        #getQuantityData (item) {\r\n            const quantity = item?.system?.quantity?.value\r\n            return (quantity > 1) ? quantity : ''\r\n        }\r\n\r\n        /**\r\n         * Get action icon\r\n         * @private\r\n         * @param {object} action\r\n         * @returns {string}\r\n         */\r\n        #getActionIcon (action, title = '') {\r\n            if (DAMAGE_TYPE_ICONS[action]) {\r\n                return `<i class=\"${ACTION_ICON[action]}\" data-tooltip=\"${title}\"></i>`\r\n            }\r\n            return ACTION_ICON[action]\r\n        }\r\n\r\n        /**\r\n         * Get carry type icon\r\n         * @private\r\n         * @param {object} itemData The item data\r\n         * @returns {string}\r\n         */\r\n        #getCarryTypeIcon (itemData) {\r\n            let carryType = ''\r\n            switch (itemData?.carryType) {\r\n            case 'held':\r\n                if (itemData?.handsHeld === 2) {\r\n                    carryType = 'held2'\r\n                } else {\r\n                    carryType = 'held1'\r\n                }\r\n                break\r\n            default:\r\n                carryType = itemData?.carryType\r\n                break\r\n            }\r\n            const tooltip = coreModule.api.Utils.i18n(CARRY_TYPE_ICON[carryType]?.tooltip) ?? ''\r\n            return CARRY_TYPE_ICON[carryType]?.icon.replace('placeholder', tooltip) ?? ''\r\n        }\r\n\r\n        /**\r\n         * Get tooltip data\r\n         * @param {object} entity     The entity\r\n         * @param {string} actionType The action type\r\n         * @returns {Promise<object>} The tooltip data\r\n         */\r\n        async #getTooltipData (entity, actionType, spellRank = null) {\r\n            if (this.tooltipsSetting === 'none' || !entity) return ''\r\n            else if (this.tooltipsSetting === 'nameOnly') return entity.name ?? ''\r\n\r\n            const itemActionTypes = ['elementalBlast', 'strike']\r\n\r\n            let chatData\r\n\r\n            if (itemActionTypes.includes(actionType)) {\r\n                chatData = await entity.item.getChatData()\r\n            } else {\r\n                chatData = await entity.getChatData()\r\n            }\r\n\r\n            if (!chatData) return ''\r\n\r\n            // console.log(entity)\r\n            // console.log(actionType)\r\n\r\n            switch (actionType) {\r\n            case 'item':\r\n                return {\r\n                    name: entity.name,\r\n                    description: chatData.description?.value,\r\n                    rarity: chatData.rarity,\r\n                    traits: chatData.traits,\r\n                    traits2: chatData.properties\r\n                }\r\n            case 'spell':\r\n            {\r\n                return {\r\n                    name: entity.name,\r\n                    description: chatData.description?.value,\r\n                    properties: chatData.properties,\r\n                    rarity: chatData.rarity,\r\n                    traits: chatData.traits,\r\n                    traitsAlt: chatData.spellTraits\r\n                }\r\n            }\r\n            case 'strike':\r\n                return {\r\n                    name: entity.label,\r\n                    descriptionLocalised: this.#getStrikeDescription(entity),\r\n                    modifiers: entity.modifiers,\r\n                    properties: chatData.properties?.filter(property => property !== 'PF2E.WeaponTypeMartial'),\r\n                    traits: entity.traits,\r\n                    traitsAlt: entity.weaponTraits\r\n                }\r\n            default:\r\n                return {\r\n                    name: actionType === 'elementalBlast' ? entity.item.name : entity.name,\r\n                    description: chatData.description?.value,\r\n                    properties: chatData.properties,\r\n                    rarity: chatData.rarity,\r\n                    traits: chatData.traits\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get tooltip\r\n         * @private\r\n         * @param {string} actionType  The action type\r\n         * @param {object} tooltipData The tooltip data\r\n         * @returns {Promise<string>}  The tooltip\r\n         */\r\n        async #getTooltip (actionType, tooltipData) {\r\n            if (this.tooltipsSetting === 'none') return ''\r\n\r\n            const name = coreModule.api.Utils.i18n(tooltipData.name)\r\n\r\n            if (this.tooltipsSetting === 'nameOnly') return name\r\n\r\n            if (typeof tooltipData === 'string') return tooltipData\r\n\r\n            const nameHtml = `<h3>${name}</h3>`\r\n\r\n            const description = coreModule.api.Utils.i18n(tooltipData?.description ?? tooltipData?.descriptionLocalised ?? '')\r\n\r\n            const rarityHtml = tooltipData?.rarity\r\n                ? `<span class=\"tag ${tooltipData.rarity.name}\">${coreModule.api.Utils.i18n(tooltipData.rarity.label)}</span>`\r\n                : ''\r\n\r\n            const propertiesHtml = tooltipData?.properties\r\n                ? `<div class=\"tah-properties\">${tooltipData.properties.map(property => `<span class=\"tah-property\">${coreModule.api.Utils.i18n(property)}</span>`).join('')}</div>`\r\n                : ''\r\n\r\n            const traitsHtml = tooltipData?.traits\r\n                ? tooltipData.traits.map(trait => `<span class=\"tag\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\r\n                : ''\r\n\r\n            const traits2Html = tooltipData?.traits2\r\n                ? tooltipData.traits2.map(trait => `<span class=\"tag tag_secondary\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\r\n                : ''\r\n\r\n            const traitsAltHtml = tooltipData?.traitsAlt\r\n                ? tooltipData.traitsAlt.map(trait => `<span class=\"tag tag_alt\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\r\n                : ''\r\n\r\n            const modifiersHtml = tooltipData?.modifiers\r\n                ? `<div class=\"tags\">${tooltipData.modifiers.filter(modifier => modifier.enabled).map(modifier => {\r\n                    const label = coreModule.api.Utils.i18n(modifier.label)\r\n                    const sign = modifier.modifier >= 0 ? '+' : ''\r\n                    const mod = `${sign}${modifier.modifier ?? ''}`\r\n                    return `<span class=\"tag tag_transparent\">${label} ${mod}</span>`\r\n                }).join('')}</div>`\r\n                : ''\r\n\r\n            const tagsJoined = [rarityHtml, traitsHtml, traits2Html, traitsAltHtml].join('')\r\n\r\n            const tagsHtml = (tagsJoined) ? `<div class=\"tags\">${tagsJoined}</div>` : ''\r\n\r\n            const headerTags = (tagsHtml || modifiersHtml) ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>` : ''\r\n\r\n            if (!description && !tagsHtml && !modifiersHtml) return name\r\n\r\n            /*  const tooltipHtml = await TextEditor.enrichHTML(\r\n                `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`,\r\n                { async: true }\r\n            ) */\r\n\r\n            const tooltipHtml = `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`\r\n\r\n            return await TextEditor.enrichHTML(tooltipHtml, { async: true })\r\n        }\r\n\r\n        /**\r\n         * Get strike description\r\n         * @private\r\n         * @param {object} strike The strike data\r\n         * @returns {string}      The strike description\r\n         */\r\n        #getStrikeDescription (strike) {\r\n            const description = (strike?.description) ? `<p>${coreModule.api.Utils.i18n(strike?.description)}</p>` : ''\r\n            const criticalSuccess = (strike?.criticalSuccess) ? `<hr><h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.criticalSuccess')}</h4><p>${coreModule.api.Utils.i18n(strike?.criticalSuccess)}</p>` : ''\r\n            const success = (strike?.success) ? `<h4>${coreModule.api.Utils.i18n('PF2E.Check.Result.Degree.Check.success')}</h4><p>${coreModule.api.Utils.i18n(strike?.success)}</p>` : ''\r\n            return `${description}${criticalSuccess}${success}`\r\n        }\r\n    }\r\n})\r\n","export let RollHandler = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\r\n        /**\r\n         * Execute macro by ID\r\n         * @private\r\n         * @param {string} id The macro id\r\n         */\r\n        async #executeMacroById (id) {\r\n            game.packs.get('pf2e.pf2e-macros').getDocument(id).then((e) => e.execute())\r\n        }\r\n\r\n        /**\r\n         * Is renderable item\r\n         * @private\r\n         * @param {string} actionType The action type\r\n         * @return {boolean}          Whether the action is a renderable item\r\n         */\r\n        #isRenderableItem (actionType) {\r\n            const renderable = [\r\n                'action',\r\n                'ammo',\r\n                'feat',\r\n                'item',\r\n                'lore'\r\n            ]\r\n\r\n            return this.isRenderItem() && renderable.includes(actionType)\r\n        }\r\n\r\n        /**\r\n         * Get controlled tokens\r\n         * @private\r\n         * @return {array} The controlled tokens\r\n         */\r\n        #getControlledTokens () {\r\n            const actorTypes = [\r\n                'character',\r\n                'familiar',\r\n                'hazard',\r\n                'npc'\r\n            ]\r\n\r\n            return canvas.tokens.controlled.filter(token => actorTypes.includes(token.actor?.type))\r\n        }\r\n\r\n        /**\r\n         * Set roll options\r\n         * @private\r\n         */\r\n        #setRollOptions () {\r\n            this.rollMode = this.ctrl ? game.user.isGM ? 'gmroll' : 'blindroll' : null\r\n            this.showCheckDialogs = this.shift ? game.user.settings.showCheckDialogs : !game.user.settings.showCheckDialogs\r\n        }\r\n\r\n        /**\r\n         * Handle action click\r\n         * @override\r\n         * @param {object} event          The event\r\n         * @param {string} encodedPayload The encoded payload\r\n         */\r\n        async handleActionClick (event, encodedPayload) {\r\n            const payload = decodeURIComponent(encodedPayload).split('|', 2)\r\n\r\n            if (payload.length < 2) {\r\n                super.throwInvalidValueErr()\r\n            }\r\n\r\n            const [actionType, actionId] = payload\r\n\r\n            this.#setRollOptions()\r\n\r\n            if (this.#isRenderableItem(actionType)) {\r\n                return this.renderItem(this.actor, actionId)\r\n            }\r\n\r\n            if (this.actor) {\r\n                await this.#handleActions(event, actionType, this.actor, this.token, actionId)\r\n            } else {\r\n                for (const token of this.#getControlledTokens()) {\r\n                    await this.#handleActions(event, actionType, token.actor, token, actionId)\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle action hover\r\n         * @override\r\n         * @param {object} event          The event\r\n         * @param {string} encodedPayload The encoded payload\r\n         */\r\n        async handleActionHover (event, encodedPayload) {\r\n            const payload = decodeURIComponent(encodedPayload).split('|', 2)\r\n\r\n            if (payload.length < 2) {\r\n                return\r\n            }\r\n\r\n            const [actionType, actionData] = payload\r\n\r\n            if (!this.actor) return\r\n\r\n            // Currently, only the following action types are handled.\r\n            const actionTypes = [\r\n                'action',\r\n                'elementalBlast',\r\n                'familiarAttack',\r\n                'feat',\r\n                'item',\r\n                'spell',\r\n                'strike'\r\n            ]\r\n\r\n            if (!actionTypes.includes(actionType)) return\r\n\r\n            let item\r\n\r\n            switch (actionType) {\r\n            case 'elementalBlast':\r\n                {\r\n                    // blastId, blastElement, blastValue, blastType\r\n                    const [blastId, blastElement] = actionData.split('>', 2)\r\n                    const blast = coreModule.api.Utils.getItem(this.actor, blastId)\r\n                    item = blast?.rules.find(rule => rule.value?.element === blastElement)\r\n                }\r\n                break\r\n            case 'familiarAttack':\r\n                item = this.actor.system.attack\r\n                break\r\n            case 'spell':\r\n                {\r\n                    // spellcastingEntry, rank, spellId\r\n                    const [, , spellId] = actionData.split('>', 3)\r\n                    item = coreModule.api.Utils.getItem(this.actor, spellId)\r\n                }\r\n                break\r\n            case 'strike':\r\n                {\r\n                    // strikeId, strikeName, strikeValue, strikeType\r\n                    const [strikeId] = actionData.split('>', 1)\r\n                    if (strikeId === 'xxPF2ExUNARMEDxx') {\r\n                        item = this.actor.system.actions.find(action => action.item?.id === 'xxPF2ExUNARMEDxx').item\r\n                    } else {\r\n                        item = coreModule.api.Utils.getItem(this.actor, strikeId)\r\n                    }\r\n                }\r\n                break\r\n            default:\r\n                {\r\n                    const [actionId] = actionData.split('>', 1)\r\n                    item = coreModule.api.Utils.getItem(this.actor, actionId)\r\n                }\r\n                break\r\n            }\r\n\r\n            if (!item) return\r\n\r\n            if (event.type === 'mouseenter') {\r\n                Hooks.call('tokenActionHudSystemActionHoverOn', event, item)\r\n            } else {\r\n                Hooks.call('tokenActionHudSystemActionHoverOff', event, item)\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Handle actions\r\n         * @private\r\n         * @param {object} event      The event\r\n         * @param {string} actionType The action type\r\n         * @param {object} actor      The actor\r\n         * @param {object} token      The token\r\n         * @param {string} actionId   The action id\r\n         */\r\n        async #handleActions (event, actionType, actor, token, actionId) {\r\n            switch (actionType) {\r\n            case 'action':\r\n                this.#rollItemMacro(event, actor, actionId)\r\n                break\r\n            case 'condition':\r\n                this.#adjustCondition(actor, actionId)\r\n                break\r\n            case 'effect':\r\n                this.#adjustEffect(actor, actionId)\r\n                break\r\n            case 'elementalBlast':\r\n                await this.#rollElementalBlast(event, actor, actionId)\r\n                break\r\n            case 'elementalBlastDamageType':\r\n                this.#setElementalBlastDamageType(actor, actionId)\r\n                break\r\n            case 'familiarAttack':\r\n                this.#rollFamiliarAttack(actor)\r\n                break\r\n            case 'feat':\r\n                this.#rollItemMacro(event, actor, actionId)\r\n                break\r\n            case 'heroAction':\r\n                this.#performHeroAction(actor, actionId)\r\n                break\r\n            case 'heroPoints':\r\n                await this.#adjustResources(actor, 'heroPoints', 'value')\r\n                break\r\n            case 'initiative':\r\n                this.#rollInitiative(actor, actionId)\r\n                break\r\n            case 'item':\r\n                this.#rollItemMacro(event, actor, actionId)\r\n                break\r\n            case 'perceptionCheck':\r\n                this.#rollPerception(actor)\r\n                break\r\n            case 'recoveryCheck':\r\n                this.#rollRecovery(event, actor)\r\n                break\r\n            case 'save':\r\n                this.#rollSave(actor, actionId)\r\n                break\r\n            case 'spell':\r\n                await this.#rollSpell(actor, actionId)\r\n                break\r\n            case 'spellSlot':\r\n                await this.#adjustSpellSlot(actor, actionId)\r\n                break\r\n            case 'skill':\r\n                await this.#rollSkill(event, actor, actionId)\r\n                break\r\n            case 'strike':\r\n                this.#rollStrike(event, actor, actionId)\r\n                break\r\n            case 'strikeAuxiliaryAction':\r\n                this.#performStrikeAuxiliaryAction(actor, actionId)\r\n                break\r\n            case 'toggle':\r\n                await this.#performToggleAction(actor, actionId)\r\n                break\r\n            case 'utility':\r\n                this.#performUtilityAction(token, actionId)\r\n                break\r\n            case 'versatileOption':\r\n                this.#performVersatileOption(actor, actionId)\r\n                break\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Roll item macro\r\n         * @private\r\n         * @param {string} actionId The action id\r\n         */\r\n        #rollItemMacro (event, actor, actionId) {\r\n            const item = actor?.items?.get(actionId)\r\n            if (item) {\r\n                if (!item.system.selfEffect && !item.system.frequency) {\r\n                    item.toMessage(event)\r\n                }\r\n                else {\r\n                    game.pf2e.rollItemMacro(actionId)\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Adjust condition\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #adjustCondition (actor, actionId) {\r\n            this.rightClick ? actor.decreaseCondition(actionId) : actor.increaseCondition(actionId)\r\n        }\r\n\r\n        /**\r\n         * Adjust effect\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #adjustEffect (actor, actionId) {\r\n            const effect = coreModule.api.Utils.getItem(actor, actionId)\r\n\r\n            if (!effect) return\r\n\r\n            this.rightClick ? effect.decrease() : effect.increase()\r\n\r\n            Hooks.callAll('forceUpdateTokenActionHud')\r\n        }\r\n\r\n        /**\r\n         * Roll elemental blast\r\n         * @private\r\n         * @param {object} event    The event\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #rollElementalBlast (event, actor, actionId) {\r\n            const [itemId, element, type, usage] = decodeURIComponent(actionId).split('>', 4)\r\n\r\n            const blasts = new game.pf2e.ElementalBlast(actor)\r\n            const blast = blasts.configs.find(blast => blast.item.id === itemId && blast.element === element)\r\n            const damageType = blast.damageTypes.find(damageType => damageType.selected)?.value ?? element\r\n            const melee = usage === 'melee'\r\n            const outcome = type === 'damage' ? 'success' : 'criticalSuccess'\r\n\r\n            switch (type) {\r\n            case 'damage':\r\n            case 'critical':\r\n                await blasts.damage({ element, damageType, melee, outcome, event })\r\n                break\r\n            default:\r\n                await blasts.attack({ mapIncreases: type, element, damageType, melee, event })\r\n                break\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set elemental blast damage type\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        #setElementalBlastDamageType (actor, actionId) {\r\n            // itemId, element, damageType\r\n            const [, element, damageType] = decodeURIComponent(actionId).split('>', 3)\r\n\r\n            const blasts = new game.pf2e.ElementalBlast(actor)\r\n            blasts.setDamageType({ element, damageType })\r\n        }\r\n\r\n        /**\r\n         * Roll familiar attack\r\n         * @private\r\n         * @param {object} actor  The actor\r\n         */\r\n        #rollFamiliarAttack (actor) {\r\n            actor.attackStatistic.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\r\n        }\r\n\r\n        /**\r\n         * Perform hero action\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #performHeroAction (actor, actionId) {\r\n            switch (actionId) {\r\n            case actionId === 'drawHeroActions':\r\n                await game.modules.get('pf2e-hero-actions')?.api?.drawHeroActions(actor)\r\n                break\r\n            case actionId === 'useHeroAction':\r\n                await game.modules.get('pf2e-hero-actions')?.api?.useHeroAction(actor, actionId)\r\n                break\r\n            }\r\n\r\n            Hooks.callAll('forceUpdateTokenActionHud')\r\n        }\r\n\r\n        /**\r\n         * Adjust resources\r\n         * @private\r\n         * @param {object} actor     The actor\r\n         * @param {string} resource  The resource\r\n         * @param {string} valueName The value name\r\n         */\r\n        async #adjustResources (actor, resource, valueName) {\r\n            let value = actor.system.resources[resource][valueName]\r\n\r\n            if (this.rightClick) {\r\n                if (value > 0) {\r\n                    value--\r\n                }\r\n            } else {\r\n                if (value < actor.system.resources[resource].max) {\r\n                    value++\r\n                }\r\n            }\r\n\r\n            await actor.update({ \"system.resources.heroPoints.value\": value });\r\n\r\n            Hooks.callAll('forceUpdateTokenActionHud')\r\n        }\r\n\r\n        /**\r\n         * Roll initiative\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #rollInitiative (actor, actionId) {\r\n            if (actor.inCombat && actor.combatant?.initiative) {\r\n                coreModule.api.Logger.info(game.i18n.format('PF2E.Encounter.AlreadyRolled', { actor: actor.name }), true)\r\n            } else {\r\n                await actor.update({ 'system.initiative.statistic': actionId })\r\n\r\n                actor.initiative.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Roll perception\r\n         * @private\r\n         * @param {object} actor The actor\r\n         */\r\n        #rollPerception (actor) {\r\n            actor.perception.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\r\n        }\r\n\r\n        /**\r\n         * Roll recovery\r\n         * @private\r\n         * @param {object} event The event\r\n         * @param {object} actor The actor\r\n         */\r\n        #rollRecovery (event, actor) {\r\n            actor.rollRecovery({ event })\r\n        }\r\n\r\n        /**\r\n         * Roll save\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        #rollSave (actor, actionId) {\r\n            actor.saves[actionId].check.roll({ rollMode: this.rollMode, skipDialog: this.skipDialog })\r\n        }\r\n\r\n        /**\r\n         * Roll skill\r\n         * @private\r\n         * @param {object} event    The event\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #rollSkill (event, actor, actionId) {\r\n            await actor.skills[actionId].check.roll({ event })\r\n        }\r\n\r\n        /**\r\n         * Roll spell\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #rollSpell (actor, actionId) {\r\n            const [spellbookId, level, spellId, expend] = decodeURIComponent(actionId).split('>', 4)\r\n\r\n            if (this.isRenderItem()) {\r\n                return this.doRenderItem(actor, spellId)\r\n            }\r\n\r\n            const spellbook = actor.items.get(spellbookId)\r\n            const spell = actor.items.get(spellId)\r\n\r\n            if (!spellbook || !spell) return\r\n\r\n            await spellbook.cast(spell, { message: !expend, consume: true, rank: Number(level) })\r\n\r\n            Hooks.callAll('forceUpdateTokenActionHud')\r\n        }\r\n\r\n        /**\r\n         * Adjust spell slot\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #adjustSpellSlot (actor, actionId) {\r\n            const [spellbookId, slot, effect] = decodeURIComponent(actionId).split('>', 3)\r\n\r\n            const spellbook = actor.items.get(spellbookId)\r\n\r\n            if (!spellbook && slot !== 'focus') return\r\n\r\n            let value, max\r\n\r\n            if (slot === 'focus') {\r\n                value = actor.system.resources.focus.value\r\n                max = actor.system.resources.focus.max\r\n            } else {\r\n                value = spellbook.system.slots[slot].value\r\n                max = spellbook.system.slots[slot].max\r\n            }\r\n\r\n            switch (effect) {\r\n            case 'slotIncrease':\r\n                if (value < max) {\r\n                    value++\r\n                }\r\n                break\r\n            case 'slotDecrease':\r\n                if (value > 0) {\r\n                    value--\r\n                }\r\n            }\r\n\r\n            if (slot === 'focus') {\r\n                actor.update({ 'system.resources.focus.value': value })\r\n            } else {\r\n                await Item.updateDocuments([{ _id: spellbook.id, data: { slots: { [slot]: { value } } } }], { parent: actor })\r\n            }\r\n\r\n            Hooks.callAll('forceUpdateTokenActionHud')\r\n        }\r\n\r\n        /**\r\n         * Roll strike\r\n         * @private\r\n         * @param {object} event    The event\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        #rollStrike (event, actor, actionId) {\r\n            const [itemId, slug, strikeType, usage] = decodeURIComponent(actionId).split('>', 4)\r\n\r\n            let strike = actor.system.actions\r\n                .filter(action => action.type === 'strike')\r\n                .find(strike => strike.item.id === itemId && strike.slug === slug)\r\n\r\n            if (this.isRenderItem() && strike.item?.id !== 'xxPF2ExUNARMEDxx') {\r\n                return this.doRenderItem(actor, strike.item.id)\r\n            }\r\n\r\n            let altUsage\r\n\r\n            if (strike.altUsages?.length) {\r\n                switch (true) {\r\n                case usage === 'melee' && !strike.item.isMelee:\r\n                    altUsage = usage\r\n                    strike = strike.altUsages.find(strike => strike.item.isMelee)\r\n                    break\r\n                case usage === 'ranged' && !strike.item.isRanged:\r\n                    altUsage = usage\r\n                    strike = strike.altUsages.find(strike => strike.item.isRanged)\r\n                    break\r\n                case usage === 'thrown' && !strike.item.isThrown:\r\n                    altUsage = usage\r\n                    strike = strike.altUsages.find(strike => strike.item.isThrown)\r\n                    break\r\n                }\r\n            }\r\n\r\n            switch (strikeType) {\r\n            case 'damage':\r\n                strike.damage({ event })\r\n                break\r\n            case 'critical':\r\n                strike.critical({ event })\r\n                break\r\n            default:\r\n                strike.variants[strikeType]?.roll({ event, altUsage })\r\n                break\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Perform strike auxiliary action\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        #performStrikeAuxiliaryAction (actor, actionId) {\r\n            const [itemId, slug, strikeType, selection] = decodeURIComponent(actionId).split('>', 4)\r\n\r\n            const strike = actor.system.actions\r\n                .filter(action => action.type === 'strike')\r\n                .find(strike => strike.item.id === itemId && strike.slug === slug)\r\n\r\n            if (!strike) return\r\n\r\n            if (strike.origin && this.isRenderItem()) {\r\n                this.doRenderItem(actor, strike.origin.id)\r\n            } else {\r\n                strike.auxiliaryActions[strikeType]?.execute({ selection })\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Perform toggle action\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #performToggleAction (actor, actionId) {\r\n            const [domain, option, itemId, suboptionValue] = decodeURIComponent(actionId).split('>', 4)\r\n\r\n            if (!domain || !option) return\r\n\r\n            const toggles = Object.values(this.actor.synthetics.toggles).flatMap(domain => Object.values(domain))\r\n\r\n            const toggle = toggles.find(t => t.domain === domain && t.option === option && t.itemId === itemId)\r\n\r\n            if (!toggle) return\r\n\r\n            const value = !toggle.enabled || !toggle.checked || (suboptionValue && !toggle.suboptions.find(s => s.value === suboptionValue)?.selected)\r\n\r\n            await actor.toggleRollOption(domain, option, itemId, value, suboptionValue)\r\n        }\r\n\r\n        /**\r\n         * Perform utility action\r\n         * @private\r\n         * @param {object} token    The token\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #performUtilityAction (token, actionId) {\r\n            switch (actionId) {\r\n            case 'treatWounds':\r\n                this.#executeMacroById('6duZj0Ygiqv712rq')\r\n                break\r\n            case 'rest':\r\n                this.#executeMacroById('0GU2sdy3r2MeC56x')\r\n                break\r\n            case 'takeBreather':\r\n                this.#executeMacroById('aS6F7PSUlS9JM5jr')\r\n                break\r\n            case 'endTurn':\r\n                if (game.combat?.current?.tokenId === token.id) {\r\n                    await game.combat?.nextTurn()\r\n                }\r\n                break\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Perform versatile option\r\n         * @private\r\n         * @param {object} actor    The actor\r\n         * @param {string} actionId The action id\r\n         */\r\n        async #performVersatileOption (actor, actionId) {\r\n            const [itemId, slug, selection] = decodeURIComponent(actionId).split('>', 3)\r\n\r\n            const action = actor.system.actions\r\n                .filter(action => action.type === 'strike')\r\n                .find(strike => strike.item.id === itemId && strike.slug === slug)\r\n            const weapon = action?.item\r\n\r\n            if (!weapon) return\r\n\r\n            await toggleWeaponTrait({ weapon, trait: 'versatile', selection })\r\n\r\n            // Adapted from pf2e\r\n            async function toggleWeaponTrait ({ weapon, trait, selection }) {\r\n                if (!actor?.isOfType('character')) return\r\n\r\n                const item = actor.items.get(weapon.id)\r\n\r\n                const property = trait === 'double-barrel' ? 'doubleBarrel' : trait\r\n                const current = item.system.traits.toggles[property].selected\r\n                if (current === selection) return\r\n\r\n                if (item?.isOfType('weapon') && item === weapon) {\r\n                    const value = property === 'doubleBarrel' ? !!selection : selection\r\n                    await item.update({ [`system.traits.toggles.${property}.selected`]: value })\r\n                } else if (item?.isOfType('weapon') && weapon.altUsageType === 'melee') {\r\n                    item.update({ [`system.meleeUsage.traitToggles.${trait}`]: selection })\r\n                } else if (trait === 'versatile' && item?.isOfType('shield')) {\r\n                    item.update({ 'system.traits.integrated.versatile.selected': selection })\r\n                } else if (trait !== 'double-barrel') {\r\n                    const rule = item?.rules.find(\r\n                        r => r.key === 'Strike' && !r.ignored && r.slug === weapon.slug\r\n                    )\r\n                    await rule?.toggleTrait({ trait, selection })\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { MODULE } from './constants.js'\r\n\r\nexport function register (updateFunc) {\r\n    game.settings.register(MODULE.ID, 'calculateAttackPenalty', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.calculateAttackPenalty.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.calculateAttackPenalty.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'colorSkills', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.colorSkills.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.colorSkills.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'showStrikeImages', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.showStrikeImages.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.showStrikeImages.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'showStrikeNames', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.showStrikeNames.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.showStrikeNames.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'showStrikeTraits', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.showStrikeTraits.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.showStrikeTraits.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'splitStrikes', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.splitStrikes.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.splitStrikes.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'addAuxiliaryActions', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addAuxiliaryActions.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addAuxiliaryActions.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'addDamageAndCritical', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addDamageAndCritical.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addDamageAndCritical.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'addStowedItems', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addStowedItems.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addStowedItems.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: String,\r\n        default: 'containers',\r\n        choices: {\r\n            containers: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.containers'),\r\n            nonContainers: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.nonContainers'),\r\n            both: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.both'),\r\n            none: game.i18n.localize('tokenActionHud.pf2e.setting.addStowedItems.choice.none')\r\n        },\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n\r\n    game.settings.register(MODULE.ID, 'addUnequippedItems', {\r\n        name: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addUnequippedItems.name'\r\n        ),\r\n        hint: game.i18n.localize(\r\n            'tokenActionHud.pf2e.setting.addUnequippedItems.hint'\r\n        ),\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n        onChange: (value) => {\r\n            updateFunc(value)\r\n        }\r\n    })\r\n}\r\n","// System Module Imports\r\nimport { ActionHandler } from './action-handler.js'\r\nimport { RollHandler as Core } from './roll-handler.js'\r\nimport { DEFAULTS } from './defaults.js'\r\nimport * as systemSettings from './settings.js'\r\n\r\nexport let SystemManager = null\r\n\r\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\r\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\r\n        /** @override */\r\n        getActionHandler () {\r\n            const actionHandler = new ActionHandler()\r\n            return actionHandler\r\n        }\r\n\r\n        /** @override */\r\n        getAvailableRollHandlers () {\r\n            const coreTitle = 'Core PF2E'\r\n            const choices = { core: coreTitle }\r\n            return choices\r\n        }\r\n\r\n        /** @override */\r\n        getRollHandler (rollHandlerId) {\r\n            let rollHandler\r\n            switch (rollHandlerId) {\r\n            case 'core':\r\n            default:\r\n                rollHandler = new Core()\r\n                break\r\n            }\r\n            return rollHandler\r\n        }\r\n\r\n        /** @override */\r\n        registerSettings (onChangeFunction) {\r\n            systemSettings.register(onChangeFunction)\r\n        }\r\n\r\n        /** @override */\r\n        async registerDefaults () {\r\n            const defaults = DEFAULTS\r\n            if (game.modules.get('pf2e-hero-actions')?.active) {\r\n                const listType = coreModule.api.Utils.i18n('tokenActionHud.group')\r\n                const name = coreModule.api.Utils.i18n('tokenActionHud.pf2e.heroActions')\r\n                defaults.groups.push(\r\n                    {\r\n                        id: 'hero-actions',\r\n                        name,\r\n                        listName: `${listType}: ${name}`,\r\n                        type: 'system'\r\n                    }\r\n                )\r\n                defaults.groups.sort((a, b) => a.id.localeCompare(b.id))\r\n            }\r\n            return defaults\r\n        }\r\n    }\r\n})\r\n","import { SystemManager } from './system-manager.js'\r\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\r\n\r\nHooks.on('tokenActionHudCoreApiReady', async () => {\r\n    const module = game.modules.get(MODULE.ID)\r\n    module.api = {\r\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\r\n        SystemManager\r\n    }\r\n    Hooks.call('tokenActionHudSystemReady', module)\r\n})\r\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","DAMAGE_TYPE_ICONS","axe","brain","bolt","droplet","fire","ghost","hammer","skull","snowflake","spider","sun","vial","ACTION_ICON","free","reaction","passive","A","D","T","F","R","ACTION_TYPE","action","attribute","condition","effect","familiarAttack","feat","heroAction","initiative","item","save","skill","skillAction","spell","strike","strikeAuxiliaryAction","toggle","utility","CARRY_TYPE_ICON","held1","icon","tooltip","held2","dropped","stowed","worn","ITEM_TYPE","armor","groupId","consumable","backpack","equipment","shield","treasure","weapon","MODULAR_OPTION","bludgeoning","piercing","slashing","SKILL_ABBREVIATION","acrobatics","arcana","athletics","crafting","deception","diplomacy","intimidation","medicine","nature","occultism","performance","perception","religion","society","stealth","survival","thievery","STRIKE_ICON","melee","thrown","STRIKE_USAGE","name","ranged","GROUP","attack","id","type","toggles","strikes","actions","reactions","freeActions","passives","skillActionsGrouped","listName","skillActionsUngrouped","settings","sort","weapons","shields","consumables","containers","ancestryFeatures","classFeatures","ancestryFeats","classFeats","skillFeats","generalFeats","bonusFeats","spells","heroPoints","perceptionCheck","coreSkills","loreSkills","conditions","socialConditions","otherConditions","effects","combat","token","recoveryCheck","rests","saves","SKILL_ACTION","l5pbgrj8SSNtRGs8","actionCost","image","ZEWD4zcEDQwYhVT8","LXCy1iJddD95Z91s","xcrdOOiN0l6O1sIn","zn0HadZeoKDALxRu","Tu7LIRelQsiOuo1l","aDsYSdRqiC6qQIOQ","zUJ0UhuoFt5a7tiN","mNphXpAkmGsMadUv","U6WjxFPn4fUqIrfl","RZyfkw1DiqVy3JUC","sDUERv4E88G5BRPr","YWAvvDXpdW1fYPFo","nEwqNNWX6scLt4sc","T2QNEoRojMWEec4a","ooiO59Ch2QaebOmc","lkEcQQss16SIrVxM","RjfPFjqPrNve6eeh","yMTKMnaYSGtDz4wk","rCgGPEyXbzLFcio6","i95kcGLIQKOTsnv6","FlM3HvpnsZpCKawG","v3dlDjFlOmT5T2gC","k5nW4jGyXD0Oq9LR","VTg4t8kYTvXcHROq","QPsV0qi2zXm7syt6","Gj68YCVlDjc75iCP","dWcrojMk0d2WRPBq","BQTA7bL264189Xla","tbveXG4gaIoKnsWX","tikhJ2b6AMh7wQU7","LN67MgbGE8IHb2X0","PmHt7Gb5fCrlWWTr","yNry1xMZqdWHncbV","HSTkVuv0SjTNK3Xx","UKHPveLpG7hUs4D0","zjovbAeuLvyuWFKd","mkKko3CEBCyJVQw1","zkqh01BoXDVgydzo","TIlUkCzviYxdVk4E","Al5LYMMdeDcpC9Br","m4iM5r3TfvQs5Y2n","R03LRl2RBbsm6EcF","gRj7xUfcpUZQLrOC","SKILL","lore","DEFAULTS","Hooks","once","async","coreModule","groups","Object","values","forEach","group","api","Utils","i18n","groupsArray","layout","nestId","customWidth","getSetting","key","defaultValue","value","game","get","Logger","debug","setSetting","set","ActionHandler","actors","actorId","actorType","tokenId","items","groupIds","activationGroupIds","effectGroupIds","inventoryGroupIds","spellGroupIds","featureActions","inventoryActions","spellActions","mapLabel","replace","buildSystemActions","this","actor","getActors","includes","sortItemsByName","abbreviateSkills","addAuxiliaryActions","addDamageAndCritical","addStowedItems","addUnequippedItems","calculateAttackPenalty","colorSkills","showStrikeImages","showStrikeNames","showStrikeTraits","splitStrikes","buildCharacterActions","buildFamiliarActions","buildHazardActions","buildNpcActions","buildMultipleTokenActions","Promise","all","buildActions","buildCombat","buildConditions","buildEffects","buildFeats","buildHeroActions","buildHeroPoints","buildInitiative","buildInventory","buildPerceptionCheck","buildRecoveryCheck","buildRests","buildSaves","buildSkillActions","buildSkills","buildSpells","buildStrikes","buildToggles","buildElementalBlasts","buildAttack","actionType","size","actionTypes","actionItems","Map","filter","_","itemData","system","actionsMap","actionTypeValue","groupData","map","getActionId","getActionName","getActionListName","cssClass","getActionCss","encodedValue","join","delimiter","icon1","getIcon1","img","getImage","info","getItemInfo","tooltipData","getTooltipData","getTooltip","addActions","slug","modifier","getModifier","totalModifier","info1","text","combatTypes","endTurn","current","entries","combatType","limitedConditions","activeConditions","pf2e","ConditionManager","conditionId","startsWith","conditionData","activeCondition","activeConditionId","attributeValue","attributes","max","isValued","description","a","b","localeCompare","actionsTemp","reduce","acc","push","actionsOther","resources","unidentified","user","isGM","_$","featTypes","ancestryfeature","classfeature","ancestry","class","general","bonus","featsMap","category","featType","modules","active","actionTypeName","heroActions","getFlag","remainingHeroPoints","length","format","nb","localize","heroActionActions","uuid","uuidData","fromUuid","content","initiativeStatistic","statistic","fullName","abbreviatedSkills","modifiers","skills","skillData","label","getSharedSkills","skillActions","skillId","data","CONFIG","PF2E","skillList","check","mod","inventoryMap","hasQuantity","quantity","isEquippedItem","isAddItem","itemType","itemCategoryMap","categoryTypeMap","icon2","getCarryTypeIcon","has","parentGroupData","container","contents","addGroup","contentsMap","dyingValue","dying","every","saveData","actionMacros","packs","getIndex","skillActionsMap","actionMacro","_id","actionName","getActionIcon","groupName","skillsMap","rank","allSkillSets","minSkillSetSize","Math","min","skillSet","find","smallestSkill","some","spellcastingEntries","spellcastingEntry","spellbookGroupId","slugify","replacement","strict","bookGroupData","getSpellDcInfo","addGroupInfo","spellInfo","getSpellData","getSheetData","activeLevels","level","spellLevel","levelGroupData","String","addSpellSlotInfo","activeSpells","activeSpell","expended","getActionEncodedValue","isCantrip","isFlexible","isFocusPool","isInnate","isPrepared","focus","slots","uses","spellSlot","maxSlots","blasts","ElementalBlast","configs","blast","damageTypeActions","strikeGroupData","usageData","strikeGroupId","element","strikeGroupName","blastTraits","traits","trait","strikeGroupListName","showTitle","damageTypes","damageType","index","encodeURIComponent","blastUsages","maps","blastUsage","usage","usageGroupId","usageGroupName","range","usageGroupListName","usageGroupImage","usageGroupShowTitle","usageGroupData","roll","split","damageId","damageName","systemSelected","criticalId","criticalName","shift","auxiliaryActions","versatileOptionActions","strikeTraits","weaponTraits","imageUrl","flatMap","auxiliaryAction","purpose","modularOptions","modular","options","modularSelection","selection","modularOption","glyph","selected","ready","versatileOptions","versatileOption","encodedId","strikeUsages","altUsages","strikeUsage","isMelee","isThrown","isRanged","attackRollType","usageGroupIcon","variants","variant","selectedAmmoId","ammunition","synthetics","domain","togglesWithoutSuboptions","suboptions","togglesWithSuboptions","option","itemId","subgroupName","subgroupListName","subgroupData","suboption","enabled","checked","entity","hasOwn","disabled","spellcastingId","spellcasting","actionsCost","parseInt","timeValue","time","actionIcon","iconType","spellDc","dc","spellAttackModifier","allowedTypes","canvas","tokens","controlled","carryType","equipped","containerId","groupType","isAddStowedItem","getQuantityData","title","handsHeld","spellRank","tooltipsSetting","chatData","getChatData","rarity","traits2","properties","traitsAlt","spellTraits","descriptionLocalised","getStrikeDescription","property","nameHtml","rarityHtml","propertiesHtml","traitsHtml","traits2Html","traitsAltHtml","modifiersHtml","tagsJoined","tagsHtml","tooltipHtml","TextEditor","enrichHTML","criticalSuccess","success","RollHandler","register","updateFunc","hint","scope","config","Boolean","default","onChange","choices","nonContainers","both","none","executeMacroById","getDocument","then","e","execute","isRenderableItem","isRenderItem","getControlledTokens","actorTypes","setRollOptions","rollMode","ctrl","showCheckDialogs","handleActionClick","event","encodedPayload","payload","decodeURIComponent","super","throwInvalidValueErr","actionId","renderItem","handleActions","handleActionHover","actionData","blastId","blastElement","getItem","rules","rule","spellId","strikeId","call","rollItemMacro","adjustCondition","adjustEffect","rollElementalBlast","setElementalBlastDamageType","rollFamiliarAttack","performHeroAction","adjustResources","rollInitiative","rollPerception","rollRecovery","rollSave","rollSpell","adjustSpellSlot","rollSkill","rollStrike","performStrikeAuxiliaryAction","performToggleAction","performUtilityAction","performVersatileOption","selfEffect","frequency","toMessage","rightClick","decreaseCondition","increaseCondition","decrease","increase","callAll","outcome","damage","mapIncreases","setDamageType","attackStatistic","skipDialog","drawHeroActions","useHeroAction","resource","valueName","update","inCombat","combatant","spellbookId","expend","doRenderItem","spellbook","cast","message","consume","Number","slot","Item","updateDocuments","parent","strikeType","altUsage","critical","origin","suboptionValue","t","s","toggleRollOption","nextTurn","toggleWeaponTrait","isOfType","altUsageType","r","ignored","toggleTrait","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","onChangeFunction","systemSettings.register","registerDefaults","defaults","listType","on","module","requiredCoreModuleVersion"],"mappings":"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"}